<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>参与和贡献 on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/community/cn/contribute/</link>
    <description>Recent content in 参与和贡献 on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/community/cn/contribute/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>订阅指南</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/subscribe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/subscribe/</guid>
      <description>在使用ShardingSphere的过程中，如果您发现任何问题，有新的想法、建议都可以通过Apache邮件列表参与到ShardingSphere的社区建设中。
  发送订阅邮件。 用自己的邮箱向dev-subscribe@shardingsphere.apache.org发送一封邮件，主题和内容任意。
  接收确认邮件并回复。 完成步骤1后，您将收到一封来自dev-help@shardingsphere.apache.org的确认邮件（如未收到，请确认该邮件是否已被拦截，或已经被自动归入订阅邮件、垃圾邮件、推广邮件等文件夹）。直接回复该邮件，或点击邮件里的链接快捷回复即可，主题和内容任意。
  接收欢迎邮件。 完成以上步骤后，您会收到一封主题为WELCOME to dev@shardingsphere.apache.org的欢迎邮件，至此您已成功订阅Apache ShardingSphere的邮件列表。
  至此，您可以通过订阅的邮箱接收及回复邮件，或通过查看归档邮件来跟踪邮件对话。
  </description>
    </item>
    
    <item>
      <title>贡献者指南</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/contributor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/contributor/</guid>
      <description>您可以报告bug，提交一个新的功能增强建议或者直接对以上内容提交改进补丁。
提交issue  在提交issue之前，请经过充分的搜索，确定该issue不是通过简单的检索即可以解决的问题。 查看issue列表，确定该issue不是一个重复的问题。 新建一个issue并选择您的issue类型。 使用一个清晰并有描述性的标题来定义issue。 根据模板填写必要信息。 在提交issue之后，对该issue分配合适的标签。如：bug，enhancement，discussion等。 请对自己提交的issue保持关注，在讨论中进一步提供必要信息。  开发流程 Fork分支到本地，设置upstream  从shardingsphere的repo上fork一个分支到您自己的repo来开始工作，并设置upstream为shardingsphere的repo。  git remote add upstream https://github.com/apache/shardingsphere.git 选择issue  请在选择您要修改的issue。如果是您新发现的问题或想提供issue中没有的功能增强，请先新建一个issue并设置正确的标签。 在选中相关的issue之后，请回复以表明您当前正在这个issue上工作。并在回复的时候为自己设置一个deadline，添加至回复内容中。 在开发者列表中找到一个导师，导师会在设计与功能实现上给予即时的反馈。  创建分支  切换到fork的master分支，拉取最新代码，创建本次的分支。  git checkout master git pull upstream master git checkout -b issueNo 注意 ：PR会按照squash的方式进行merge，如果不创建新分支，本地和远程的提交记录将不能保持同步。
编码  请您在开发过程中遵循ShardingSphere的开发规范。并在准备提交pull request之前完成相应的检查。 将修改的代码push到fork库的分支上。  git add 修改代码 git commit -m &amp;#39;commit log&amp;#39; git push origin issueNo 提交PR  发送一个pull request到ShardingSphere的master分支。 接着导师做CodeReview，然后他会与您讨论一些细节（包括设计，实现，性能等）。当导师对本次修改满意后，会将提交合并到当前开发版本的分支中。 最后，恭喜您已经成为了ShardingSphere的官方贡献者！  删除分支  在导师将pull request合并到ShardingSphere的master分支中之后，您就可以将远程的分支（origin/issueNo）及与远程分支（origin/issueNo）关联的本地分支（issueNo）删除。  git checkout master git branch -d issueNo git push origin --delete issueNo 注意 为了让您的id显示在contributor列表中，别忘了以下设置：</description>
    </item>
    
    <item>
      <title>提交者指南</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/committer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/committer/</guid>
      <description>提交者提名 ShardingSphere社区遵循Apache Community’s process 来接收新的提交者。 当您积极参地与ShardingSphere社区之后，项目管理委员会和项目官方提交者会根据您的表现发起吸纳您成为官方提交者和项目管理委员会成员的流程。
流程如下：
 在 @private 邮件列表讨论并投票，由现有的PMC成员发起； 如果投票通过，对候选人发布邀请并抄送@private 邮件列表； 新提交者成员签署ICLA，申请Apache ID和邮箱； 更新提交者名单。  提交者责任  开发新功能； 代码重构； 及时和可靠的评审Pull Request； 思考和接纳新特性请求； 解答问题； 维护文档和代码示例； 改进流程和工具； 引导新的参与者融入社区。  日常工作   committer需要每天查看社区待处理的Pull Request和issue列表，指定给合适的committer，即assignee。
  assignee在被分配issue后，需要进行如下判断：
   判断是否是长期issue，如是，则标记为pending。 判断issue类型，如：bug，enhancement，discussion等。 判断Milestone，并标记。  注意
无论是否是社区issue，都必须有assignee，直到issue完成。</description>
    </item>
    
    <item>
      <title>开发规范</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/code-conduct/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/code-conduct/</guid>
      <description>以下行为准则以完全遵循Apache软件基金会行为准则为前提。
开发理念  用心 保持责任心和敬畏心，以工匠精神持续雕琢。 可读 代码无歧义，通过阅读而非调试手段浮现代码意图。 整洁 认同《重构》和《代码整洁之道》的理念，追求整洁优雅代码。 一致 代码风格、命名以及使用方式保持完全一致。 精简 极简代码，以最少的代码表达最正确的意思。高度复用，无重复代码和配置。及时删除无用代码。 抽象 层次划分清晰，概念提炼合理。保持方法、类、包以及模块处于同一抽象层级。 极致 拒绝随意，保证任何一行代码、任何一个字母、任何一个空格都有其存在价值。  代码提交行为规范  确保通过全部测试用例，确保执行./mvnw clean install可以编译和测试通过。 确保覆盖率不低于master分支。 确保使用Checkstyle检查代码，违反验证规则的需要有特殊理由。模板位置在https://github.com/apache/shardingsphere/blob/master/src/resources/checkstyle.xml，请使用checkstyle 8.8运行规则。 应尽量将设计精细化拆分；做到小幅度修改，多次数提交，但应保证提交的完整性。 确保遵守编码规范。 如果您使用IDEA，可导入推荐的Settings。  编码规范  使用linux换行符。 缩进（包含空行）和上一行保持一致。 类声明后与下面的变量或方法之间需要空一行。 不应有无意义的空行。 类、方法和变量的命名要做到顾名思义，避免使用缩写。 返回值变量使用result命名；循环中使用each命名循环变量；map中使用entry代替each。 捕获的异常名称命名为ex；捕获异常且不做任何事情，异常名称命名为ignored。 配置文件使用Spinal Case命名（一种使用-分割单词的特殊Snake Case）。 需要注释解释的代码尽量提成小方法，用方法名称解释。 equals和==条件表达式中，常量在左，变量在右；大于小于等条件表达式中，变量在左，常量在右。 除了构造器入参与全局变量名称相同的赋值语句外，避免使用this修饰符。 除了用于继承的抽象类之外，尽量将类设计为final。 嵌套循环尽量提成方法。 成员变量定义顺序以及参数传递顺序在各个类和方法中保持一致。 优先使用卫语句。 类和方法的访问权限控制为最小。 方法所用到的私有方法应紧跟该方法，如果有多个私有方法，书写私有方法应与私有方法在原方法的出现顺序相同。 方法入参和返回值不允许为null。 优先使用三目运算符代替if else的返回和赋值语句。 优先使用lombok代替构造器，getter, setter方法和log变量。 优先考虑使用LinkedList，只有在需要通过下标获取集合中元素值时再使用ArrayList。 ArrayList，HashMap等可能产生扩容的集合类型必须指定集合初始大小，避免扩容。 日志与注释一律使用英文。 注释只能包含javadoc，todo和fixme。 公开的类和方法必须有javadoc，其他类和方法以及覆盖自父类的方法无需javadoc。  单元测试规范  测试代码和生产代码需遵守相同代码规范。 单元测试需遵循AIR（Automatic, Independent, Repeatable）设计理念。  自动化（Automatic）：单元测试应全自动执行，而非交互式。禁止人工检查输出结果，不允许使用System.out，log等，必须使用断言进行验证。 独立性（Independent）：禁止单元测试用例间的互相调用，禁止依赖执行的先后次序。每个单元测试均可独立运行。 可重复执行（Repeatable）：单元测试不能受到外界环境的影响，可以重复执行。   单元测试需遵循BCDE（Border, Correct, Design, Error）设计原则。  边界值测试（Border）：通过循环边界、特殊数值、数据顺序等边界的输入，得到预期结果。 正确性测试（Correct）：通过正确的输入，得到预期结果。 合理性设计（Design）：与生产代码设计相结合，设计高质量的单元测试。 容错性测试（Error）：通过非法数据、异常流程等错误的输入，得到预期结果。   如无特殊理由，测试需全覆盖。 每个测试用例需精确断言。 准备环境的代码和测试代码分离。 只有junit Assert，hamcrest CoreMatchers，Mockito相关可以使用static import。 单数据断言，应使用assertTrue，assertFalse，assertNull和assertNotNull。 多数据断言，应使用assertThat。 精确断言，尽量不使用not，containsString断言。 测试用例的真实值应名为为actualXXX，期望值应命名为expectedXXX。 测试类和@Test标注的方法无需javadoc。  G4编码规范  公共规范  每行长度不超过200个字符，保证每一行语义完整以便于理解。   词法解析规范  每个规则一行，规则间无需空行。 规则名称使用大写字母。如果名称由多个单词组成，用下划线间隔。DataType和Symbol的规则命名以下划线结尾。与ANTLR内置变量或关键字重名的规则在结尾加下划线以示区分。 不对外暴露的规则使用fragment，fragment定义的规则需在其服务的规则之后声明。 公用规则定义放在Keyword.</description>
    </item>
    
    <item>
      <title>官方文档贡献指南</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/document-contributor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/document-contributor/</guid>
      <description>如果您想帮助贡献ShardingSphere文档或网站，我们很乐意为您提供帮助！任何人都可以贡献，无论您是刚接触项目还是已经使用ShardingSphere很长时间，无论是自我认同的开发人员、最终用户，还是那些无法忍受错别字的人，都可以对文档或者网站进行贡献。
在贡献者指南里，已经提到如何提交Issues与pull request，这里我们将要介绍如何给官方文档提交pull request。
前置条件  熟悉官方网站 熟悉GitHub 协同开发流程 熟练掌握Markdown 熟悉Hugo  Fork文档项目 Fork ShardingSphere的master分支。
目录结构说明 shardingsphere ├─docs ├─community │ ├─archetypes │ ├─content │ │ ├─users │ │ ├─contribute │ │ ├─team │ │ └─security │ ├─layouts │ ├─static │ └─themes ├─document │ ├─archetypes │ ├─content │ │ ├─downloads │ │ ├─faq │ │ ├─features │ │ │ ├─orchestration │ │ │ ├─read-write-split │ │ │ ├─sharding │ │ │ │ ├─concept │ │ │ │ ├─other-features │ │ │ │ ├─principle │ │ │ │ └─use-norms │ │ │ ├─spi │ │ │ ├─test-engine │ │ │ └─transaction │ │ │ ├─concept │ │ │ ├─function │ │ │ └─principle │ │ ├─manual │ │ │ ├─shardingsphere-jdbc │ │ │ │ ├─configuration │ │ │ │ └─usage │ │ │ ├─shardingsphere-proxy │ │ │ ├─shardingsphere-sidecar │ │ │ └─shardingsphere-ui │ │ ├─overview │ │ └─quick-start │ ├─i18n │ ├─layouts │ ├─static │ └─themes 文档基础知识 ShardingSphere文档使用Markdown编写，并使用Hugo进行处理生成html，部署于asf-site分支，源代码位于Github 。</description>
    </item>
    
    <item>
      <title>ShardingSphere发布指南</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/release/</guid>
      <description>GPG设置 安装GPG 在GnuPG官网下载安装包。 GnuPG的1.x版本和2.x版本的命令有细微差别，下列说明以GnuPG-2.1.23版本为例。
安装完成后，执行以下命令查看版本号。
gpg --version 创建key 安装完成后，执行以下命令创建key。
GnuPG-2.x可使用：
gpg --full-gen-key GnuPG-1.x可使用：
gpg --gen-key 根据提示完成key：
注意：请使用Apache mail生成GPG的Key。
gpg (GnuPG) 2.0.12; Copyright (C) 2009 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Please select what kind of key you want: (1) RSA and RSA (default) (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) Your selection?</description>
    </item>
    
    <item>
      <title>ShardingSphere-UI发布指南</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/release_ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/release_ui/</guid>
      <description>GPG设置 详情请参见发布指南。
发布Apache Maven中央仓库 设置settings.xml文件 将以下模板添加到 ~/.m2/settings.xml中，所有密码需要加密后再填入。 加密设置可参考这里。
&amp;lt;settings&amp;gt; &amp;lt;servers&amp;gt; &amp;lt;server&amp;gt; &amp;lt;id&amp;gt;apache.snapshots.https&amp;lt;/id&amp;gt; &amp;lt;username&amp;gt; &amp;lt;!-- APACHE LDAP 用户名 --&amp;gt; &amp;lt;/username&amp;gt; &amp;lt;password&amp;gt; &amp;lt;!-- APACHE LDAP 加密后的密码 --&amp;gt; &amp;lt;/password&amp;gt; &amp;lt;/server&amp;gt; &amp;lt;server&amp;gt; &amp;lt;id&amp;gt;apache.releases.https&amp;lt;/id&amp;gt; &amp;lt;username&amp;gt; &amp;lt;!-- APACHE LDAP 用户名 --&amp;gt; &amp;lt;/username&amp;gt; &amp;lt;password&amp;gt; &amp;lt;!-- APACHE LDAP 加密后的密码 --&amp;gt; &amp;lt;/password&amp;gt; &amp;lt;/server&amp;gt; &amp;lt;/servers&amp;gt; &amp;lt;/settings&amp;gt; 更新版本说明 https://github.com/apache/shardingsphere-ui/blob/master/RELEASE-NOTES.md 创建发布分支 假设从github下载的ShardingSphere源代码在~/shardingsphere-ui/目录；假设即将发布的版本为${RELEASE.VERSION}。 创建${RELEASE.VERSION}-release分支，接下来的操作都在该分支进行。
## ${name}为源码所在分支，如：master，dev-4.x git clone --branch ${name} https://github.com/apache/shardingsphere-ui.git ~/shardingsphere-ui cd ~/shardingsphere-ui/ git pull git checkout -b ${RELEASE.VERSION}-release git push origin ${RELEASE.</description>
    </item>
    
    <item>
      <title>ElasticJob发布指南</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/release-elasticjob/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/release-elasticjob/</guid>
      <description>GPG设置 详情请参见发布指南。
发布Apache Maven中央仓库 设置settings.xml文件 将以下模板添加到 ~/.m2/settings.xml中，所有密码需要加密后再填入。 加密设置可参考这里。
&amp;lt;settings&amp;gt; &amp;lt;servers&amp;gt; &amp;lt;server&amp;gt; &amp;lt;id&amp;gt;apache.snapshots.https&amp;lt;/id&amp;gt; &amp;lt;username&amp;gt; &amp;lt;!-- APACHE LDAP 用户名 --&amp;gt; &amp;lt;/username&amp;gt; &amp;lt;password&amp;gt; &amp;lt;!-- APACHE LDAP 加密后的密码 --&amp;gt; &amp;lt;/password&amp;gt; &amp;lt;/server&amp;gt; &amp;lt;server&amp;gt; &amp;lt;id&amp;gt;apache.releases.https&amp;lt;/id&amp;gt; &amp;lt;username&amp;gt; &amp;lt;!-- APACHE LDAP 用户名 --&amp;gt; &amp;lt;/username&amp;gt; &amp;lt;password&amp;gt; &amp;lt;!-- APACHE LDAP 加密后的密码 --&amp;gt; &amp;lt;/password&amp;gt; &amp;lt;/server&amp;gt; &amp;lt;/servers&amp;gt; &amp;lt;/settings&amp;gt; 更新版本说明 在Github主干上更新如下文件，并提交PR到主干：
https://github.com/apache/shardingsphere-elasticjob/blob/master/RELEASE-NOTES.md 创建发布分支 假设从github下载的ElasticJob源代码在~/elasticjob/目录；假设即将发布的版本为${RELEASE.VERSION}。 创建${RELEASE.VERSION}-release分支，接下来的操作都在该分支进行。
## ${name}为源码所在分支，如：master，dev-4.x git clone --branch ${name} https://github.com/apache/shardingsphere-elasticjob.git ~/elasticjob cd ~/elasticjob/ git pull git checkout -b ${RELEASE.VERSION}-release git push origin ${RELEASE.</description>
    </item>
    
    <item>
      <title>ElasticJob-UI发布指南</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/release-elasticjob-ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/release-elasticjob-ui/</guid>
      <description>GPG设置 详情请参见发布指南。
发布Apache Maven中央仓库 设置settings.xml文件 将以下模板添加到 ~/.m2/settings.xml中，所有密码需要加密后再填入。 加密设置可参考这里。
&amp;lt;settings&amp;gt; &amp;lt;servers&amp;gt; &amp;lt;server&amp;gt; &amp;lt;id&amp;gt;apache.snapshots.https&amp;lt;/id&amp;gt; &amp;lt;username&amp;gt; &amp;lt;!-- APACHE LDAP 用户名 --&amp;gt; &amp;lt;/username&amp;gt; &amp;lt;password&amp;gt; &amp;lt;!-- APACHE LDAP 加密后的密码 --&amp;gt; &amp;lt;/password&amp;gt; &amp;lt;/server&amp;gt; &amp;lt;server&amp;gt; &amp;lt;id&amp;gt;apache.releases.https&amp;lt;/id&amp;gt; &amp;lt;username&amp;gt; &amp;lt;!-- APACHE LDAP 用户名 --&amp;gt; &amp;lt;/username&amp;gt; &amp;lt;password&amp;gt; &amp;lt;!-- APACHE LDAP 加密后的密码 --&amp;gt; &amp;lt;/password&amp;gt; &amp;lt;/server&amp;gt; &amp;lt;/servers&amp;gt; &amp;lt;/settings&amp;gt; 更新版本说明 https://github.com/apache/shardingsphere-elasticjob-ui/blob/master/RELEASE-NOTES.md 创建发布分支 假设从github下载的ElasticJob-UI源代码在~/elasticjob-ui/目录；假设即将发布的版本为${RELEASE.VERSION}。 创建${RELEASE.VERSION}-release分支，接下来的操作都在该分支进行。
## ${name}为源码所在分支，如：master，dev-4.x git clone --branch ${name} https://github.com/apache/shardingsphere-elasticjob-ui.git ~/elasticjob-ui cd ~/elasticjob-ui/ git pull git checkout -b ${RELEASE.VERSION}-release git push origin ${RELEASE.</description>
    </item>
    
    <item>
      <title>2FA</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/2fa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/2fa/</guid>
      <description>双因素认证(2FA) 双因子验证（2FA）是指结合密码以及实物（信用卡、SMS手机、令牌或指纹等生物标志）两种条件对用户进行认证的方法。 为保证提交者账户的安全，我们需要您在GitHub上启用2FA来验证登录用户、并贡献代码。
具体内容可参考2FA。
 注意：若您不启用2FA，您将会从本项目中除名，并且无法访问我们的仓库以及来自我们私有仓库的fork仓库。
 在GitHub上启用2FA 具体操作，请参考使用TOTP启用双因素认证。
当您开启2FA验证后，您需要使用用户名/密码 + 手机认证码的方式来登录GitHub。
提示：若无法通过页面链接下载对应APP，可在手机的应用市场或是APP Store里搜索并下载Google Authenticator。
如何提交代码 当启用2FA认证后，您需要生成私有访问Token来进行git提交等操作。此时，您将使用用户名 + 私有访问Token 来代替 用户名 + 密码的方式 进行代码的提交。
具体操作，请参考创建私有Token。</description>
    </item>
    
  </channel>
</rss>