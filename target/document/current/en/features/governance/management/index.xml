<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Management on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/current/en/features/governance/management/</link>
    <description>Recent content in Management on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/current/en/features/governance/management/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Config Center</title>
      <link>https://shardingsphere.apache.org/document/current/en/features/governance/management/config-center/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/features/governance/management/config-center/</guid>
      <description>Motivation   Centralized configuration: more and more running examples have made it hard to manage separate configurations and asynchronized configurations can cause serious problems. Concentrating them in the configuration center can make the management more effective.
  Dynamic configuration: distribution after configuration modification is another important capability of configuration center. It can support dynamic switch between data sources and rule configurations.
  Structure in Configuration Center Under defined namespace config node, configuration center stores data sources, rule configurations, authentication configuration, and properties in YAML.</description>
    </item>
    
    <item>
      <title>Registry Center</title>
      <link>https://shardingsphere.apache.org/document/current/en/features/governance/management/registry-center/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/features/governance/management/registry-center/</guid>
      <description>Motivation   As config center manage configuration data, registry center hold all ephemeral status data dynamically generated in runtime(such as available proxy instances, disabled datasource instances etc).
  Registry center can disable the access to slave database and the access of application. Orchestration still has many functions(such as flow control) to be developed.
  Data Structure in Registry Center The registry center can create running node of database access object under state in defined namespace, to distinguish different database access instances, including instances and datasources nodes.</description>
    </item>
    
    <item>
      <title>Metadata Center</title>
      <link>https://shardingsphere.apache.org/document/current/en/features/governance/management/metadata-center/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/features/governance/management/metadata-center/</guid>
      <description>Motivation   Metadata is the core data of the data source used by ShardingSphere, which contains tables, columns, and indexes, etc. Metadata ensures that each component of ShardingSphere can run correctly.
  The metadata center organizes and manages the metadata in a unified manner to realize the unified loading of metadata, change notifications and data synchronization.
  Data Structure in Metadata Center The metadata center stores metadata in YAML under the metadata node of the defined namespace and orchestration node, and each logical data source is stored independently.</description>
    </item>
    
    <item>
      <title>Third-party Components</title>
      <link>https://shardingsphere.apache.org/document/current/en/features/governance/management/dependency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/features/governance/management/dependency/</guid>
      <description>Apache ShardingSphere uses SPI to load data to the config center/registry/metadata center and disable instances and databases. Currently, Apache ShardingSphere supports frequently used registry centers, Zookeeper, Etcd, Apollo and Nacos. In addition, by injecting them to ShardingSphere with SPI, users can use other third-party config/registry/metadata centers to enable databases orchestration.
    Driver Version Config Center Registry Center Metadata Center     Zookeeper Apache Curator 3.4.6 Support Support Support   Etcd jetcd v3 Support Support Support   Apollo Apollo Client 1.</description>
    </item>
    
  </channel>
</rss>