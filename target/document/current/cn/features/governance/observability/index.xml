<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>可观察性 on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/current/cn/features/governance/observability/</link>
    <description>Recent content in 可观察性 on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/current/cn/features/governance/observability/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>应用性能监控集成</title>
      <link>https://shardingsphere.apache.org/document/current/cn/features/governance/observability/apm-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/features/governance/observability/apm-integration/</guid>
      <description>背景 APM 是应用性能监控的缩写。目前 APM 的主要功能着眼于分布式系统的性能诊断，其主要功能包括调用链展示，应用拓扑分析等。
Apache ShardingSphere 并不负责如何采集、存储以及展示应用性能监控的相关数据，而是将 SQL 解析与 SQL 执行这两块数据分片的最核心的相关信息发送至应用性能监控系统，并交由其处理。 换句话说，Apache ShardingSphere 仅负责产生具有价值的数据，并通过标准协议递交至相关系统。Apache ShardingSphere 可以通过两种方式对接应用性能监控系统。
第一种方式是使用 OpenTracing API 发送性能追踪数据。面向 OpenTracing 协议的 APM 产品都可以与 Apache ShardingSphere 自动对接，比如 SkyWalking，Zipkin 和 Jaeger。 使用这种方式只需要在启动时配置 OpenTracing 协议的实现者即可。 它的优点是可以兼容所有的与 OpenTracing 协议兼容的产品作为 APM 的展现系统，如果采用公司愿意实现自己的 APM 系统，也只需要实现 OpenTracing 协议，即可自动展示 Apache ShardingSphere 的链路追踪信息。 缺点是 OpenTracing 协议发展并不稳定，较新的版本实现者较少，且协议本身过于中立，对于个性化的相关产品的实现不如原生支持强大。
第二种方式是使用 SkyWalking 的自动探针。 Apache ShardingSphere 团队与Apache SkyWalking 团队共同合作，在 SkyWalking 中实现了 Apache ShardingSphere 自动探针，可以将相关的应用性能数据自动发送到 SkyWalking 中。
使用方法 使用 OpenTracing 协议  方法1：通过读取系统参数注入APM系统提供的 Tracer 实现类  启动时添加参数</description>
    </item>
    
    <item>
      <title>度量指标监控</title>
      <link>https://shardingsphere.apache.org/document/current/cn/features/governance/observability/metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/features/governance/observability/metrics/</guid>
      <description>背景 Metrics 是一种评估系统在运行时的度量指标，通常一组度量指标可以帮助我们评估系统性能，为系统优化或业务策略给出相关的意见。 Apache ShardingSphere 旨在打造一款分布式数据库解决方案，而对于数据库来说，分析它的运行状态，连接数据，事务数，吞吐量等相关指标， 为数据库的调度，数据平滑迁移，分库分表等策略提供可视化的建议与帮助尤为重要。
方案 Apache ShardingSphere 遵循 Metrics 标准，定义了一套可插拔的 SPI 标准，它并不存储,收集,展现 Metrics 信息， 只是负责在程序中对 Metrics 进行埋点，目前默认的实现方案为: Prometheus 客户端API埋点，服务端通过 http 协议来定时抓取 Metrics 数据。
指标 目前定义了4种类型的指标
  Counter : 计数器是一个累积度量，它表示单个单调递增的计数器，其值在重新启动时只能增加或重置为零。
  Gauge : 仪表盘是一种度量标准，它表示一个可以任意上下移动的数值。
  Histogram : 直方图对观察结果(通常是请求持续时间或响应大小等)进行采样，并按可配置的桶进行计数。它还提供了所有观测值的和。
  Summary : 摘要是类似于柱状图的观察结果(通常是请求持续时间和响应大小之类的内容)。虽然它还提供了观察值的总数和所有观察值的总和，但它计算了一个滑动时间窗口上的可配置分位数。
     名称 类型 标签名称 说明     request_total Counter 无 收集 ShardingSphere 所有的请求   sql_statement_count Counter sql_type 收集执行的 SQL 类型,比如 (SELECT,UPDATE,INSERT&amp;hellip;)   channel_count Gauge 无 收集 ShardingSphere-Proxy 的连接数   requests_latency_histogram_millis Histogram 无 收集执行所有请求的迟延时间(单位:ms)   sharding_datasource Counter datasource 收集执行 SQL 语句命中的分库   sharding_table Counter table 收集执行 SQL 语句命中的分表   transaction Counter status 收集所有的事务数量    使用 在 ShardingSphere-Proxy 的 server.</description>
    </item>
    
  </channel>
</rss>