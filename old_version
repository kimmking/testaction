commit 688430f76a18871ee754173d43f8f032353bec89
Author: Haoran Meng <menghaoranss@gmail.com>
Date:   Tue Sep 1 16:27:23 2020 +0800

    Revise document for governance (#7198)

diff --git a/docs/document/content/features/governance/management/config-center.cn.md b/docs/document/content/features/governance/management/config-center.cn.md
index c5cefb324b..d63c6e1489 100644
--- a/docs/document/content/features/governance/management/config-center.cn.md
+++ b/docs/document/content/features/governance/management/config-center.cn.md
@@ -75,7 +75,7 @@ ds_1: !!org.apache.shardingsphere.governance.core.common.yaml.configYamlDataSour
     maxLifetimeMilliseconds: 1800000
 ```
 
-### config/schema/sharding_db/rule
+### config/schema/schemeName/rule
 
 规则配置，可包括数据分片、读写分离、数据加密、影子库压测、多副本等配置。
 
@@ -93,4 +93,4 @@ rules:
 
 ## 动态生效
 
-在注册中心上修改、删除、新增相关配置，会动态推送到生产环境并立即生效。
\ No newline at end of file
+在配置中心上修改、删除、新增相关配置，会动态推送到生产环境并立即生效。
\ No newline at end of file
diff --git a/docs/document/content/features/governance/management/config-center.en.md b/docs/document/content/features/governance/management/config-center.en.md
index 434f1a9e9b..50bc3a380a 100644
--- a/docs/document/content/features/governance/management/config-center.en.md
+++ b/docs/document/content/features/governance/management/config-center.en.md
@@ -75,7 +75,7 @@ ds_1: !!org.apache.shardingsphere.governance.core.common.yaml.config.YamlDataSou
     maxLifetimeMilliseconds: 1800000
 ```
 
-### config/schema/sharding_db/rule
+### config/schema/schemeName/rule
 
 Rule configurations, including sharding, read-write split, data encryption, shadow DB, multi replica configurations.
 
@@ -93,4 +93,4 @@ rules:
 
 ## Dynamic Effectiveness
 
-Modification, deletion and insertion of relevant configurations in the registry center will immediately take effect in the producing environment.
+Modification, deletion and insertion of relevant configurations in the config center will immediately take effect in the producing environment.
diff --git a/docs/document/content/features/governance/management/registry-center.cn.md b/docs/document/content/features/governance/management/registry-center.cn.md
index c6e1c9d3f7..82977fecee 100644
--- a/docs/document/content/features/governance/management/registry-center.cn.md
+++ b/docs/document/content/features/governance/management/registry-center.cn.md
@@ -11,7 +11,7 @@ weight = 2
 
 ## 注册中心数据结构
 
-注册中心在定义的命名空间的 `state` 节点下，创建数据库访问对象运行节点，用于区分不同数据库访问实例。包括 `instances` 和 `datasources` 节点。
+注册中心在定义的命名空间的 `registry` 节点下，创建数据库访问对象运行节点，用于区分不同数据库访问实例。包括 `instances` 和 `datasources` 节点。
 
 ```
 instances
@@ -19,31 +19,22 @@ instances
     ├──your_instance_ip_b@-@your_instance_pid_y
     ├──....
 datasources
-    ├──ds0
-    ├──ds1
+    ├──schema_1
+    ├      ├──ds_0
+    ├      ├──ds_1
+    ├──schema_2
+    ├      ├──ds_0
+    ├      ├──ds_1
     ├──....
 ```
 
-ShardingSphere-Proxy 支持多逻辑数据源，因此 `datasources` 子节点的名称采用 `schema_name.data_source_name` 的形式。
-
-```
-instances
-    ├──your_instance_ip_a@-@your_instance_pid_x
-    ├──your_instance_ip_b@-@your_instance_pid_y
-    ├──....
-datasources
-    ├──sharding_db.ds0
-    ├──sharding_db.ds1
-    ├──....
-```
-
-### state/instances
+### registry/instances
 
 数据库访问对象运行实例信息，子节点是当前运行实例的标识。
 运行实例标识由运行服务器的 IP 地址和 PID 构成。运行实例标识均为临时节点，当实例上线时注册，下线时自动清理。
 注册中心监控这些节点的变化来治理运行中实例对数据库的访问等。
 
-### state/datasources
+### registry/datasources
 
 可以治理读写分离从库，可动态添加删除以及禁用。
 
@@ -56,7 +47,7 @@ datasources
 Zookeeper 命令如下：
 
 ```
-[zk: localhost:2181(CONNECTED) 0] set /your_zk_namespace/your_app_name/state/instances/your_instance_ip_a@-@your_instance_pid_x DISABLED
+[zk: localhost:2181(CONNECTED) 0] set /your_zk_namespace/registry/instances/your_instance_ip_a@-@your_instance_pid_x DISABLED
 ```
 
 ### 禁用从库
@@ -66,5 +57,5 @@ Zookeeper 命令如下：
 Zookeeper 命令如下：
 
 ```
-[zk: localhost:2181(CONNECTED) 0] set /your_zk_namespace/your_app_name/state/datasources/your_slave_datasource_name DISABLED
+[zk: localhost:2181(CONNECTED) 0] set /your_zk_namespace/registry/datasources/your_schema_name/your_slave_datasource_name DISABLED
 ```
diff --git a/docs/document/content/features/governance/management/registry-center.en.md b/docs/document/content/features/governance/management/registry-center.en.md
index 65b56764a9..bd7da91939 100644
--- a/docs/document/content/features/governance/management/registry-center.en.md
+++ b/docs/document/content/features/governance/management/registry-center.en.md
@@ -7,11 +7,11 @@ weight = 2
 
 - As config center manage configuration data, registry center hold all ephemeral status data dynamically generated in runtime(such as available proxy instances, disabled datasource instances etc).
 
-- Registry center can disable the access to slave database and the access of application. Orchestration still has many functions(such as flow control) to be developed.
+- Registry center can disable the access to slave database and the access of application. Governance still has many functions(such as flow control) to be developed.
 
 ## Data Structure in Registry Center
 
-The registry center can create running node of database access object under `state` in defined namespace, to distinguish different database access instances, including `instances` and `datasources` nodes.
+The registry center can create running node of database access object under `registry` in defined namespace, to distinguish different database access instances, including `instances` and `datasources` nodes.
 
 ```
 instances
@@ -19,29 +19,22 @@ instances
     ├──your_instance_ip_b@-@your_instance_pid_y
     ├──....
 datasources
-    ├──ds0
-    ├──ds1
+    ├──schema_1
+    ├      ├──ds_0
+    ├      ├──ds_1
+    ├──schema_2
+    ├      ├──ds_0
+    ├      ├──ds_1
     ├──....
 ```
 
 ShardingSphere-Proxy can support multiple logical data sources, so `datasources` sub-nodes are named `schema_name.data_source_name`.
 
-```
-instances
-    ├──your_instance_ip_a@-@your_instance_pid_x
-    ├──your_instance_ip_b@-@your_instance_pid_y
-    ├──....
-datasources
-    ├──sharding_db.ds0
-    ├──sharding_db.ds1
-    ├──....
-```
-
-### state/instances
+### registry/instances
 
 It includes running instance information of database access object, with sub-nodes as the identifiers of currently running instance, which consist of IP and PID. Those identifiers are temporary nodes, which are registered when instances are on-line and cleared when instances are off-line. The registry center monitors the change of those nodes to govern the database access of running instances and other things.
 
-### state/datasources
+### registry/datasources
 
 It is able to orchestrate read-write split slave database, delete or disable data dynamically.
 
@@ -54,7 +47,7 @@ Write `DISABLED` (case insensitive) to `IP@-@PID` to disable that instance; dele
 Zookeeper command is as follows:
 
 ```
-[zk: localhost:2181(CONNECTED) 0] set /your_zk_namespace/your_app_name/state/instances/your_instance_ip_a@-@your_instance_pid_x DISABLED
+[zk: localhost:2181(CONNECTED) 0] set /your_zk_namespace/registry/instances/your_instance_ip_a@-@your_instance_pid_x DISABLED
 ```
 
 ### Disable Slave Database
@@ -64,5 +57,5 @@ Under read-write split scenarios, users can write `DISABLED` (case insensitive)
 Zookeeper command is as follows:
 
 ```
-[zk: localhost:2181(CONNECTED) 0] set /your_zk_namespace/your_app_name/state/datasources/your_slave_datasource_name DISABLED
+[zk: localhost:2181(CONNECTED) 0] set /your_zk_namespace/registry/datasources/your_schema_name/your_slave_datasource_name DISABLED
 ```
