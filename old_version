commit d8cbeae5e6435bc4194c796e1c3f6418d6c85407
Author: Liang Zhang <terrymanu@163.com>
Date:   Thu Nov 5 14:24:08 2020 +0800

    Update release guide (#8035)

diff --git a/docs/community/content/contribute/release-elasticjob-ui.cn.md b/docs/community/content/contribute/release-elasticjob-ui.cn.md
index 1d960129d2..60bb739c97 100644
--- a/docs/community/content/contribute/release-elasticjob-ui.cn.md
+++ b/docs/community/content/contribute/release-elasticjob-ui.cn.md
@@ -355,23 +355,13 @@ git push --delete origin ${RELEASE.VERSION}-release
 git branch -d ${RELEASE.VERSION}-release
 ```
 
-**3. 更新下载页面**
+**3. 发布 Docker (cloud-ui)**
 
-https://shardingsphere.apache.org/elasticjob/current/en/downloads/
-
-https://shardingsphere.apache.org/elasticjob/current/cn/downloads/
-
-GPG签名文件和哈希校验文件的下载连接应该使用这个前缀： `https://downloads.apache.org/shardingsphere/`
+3.1 准备工作
 
-`最新版本`中保留一个最新的版本。
-
-## 发布Docker （cloud-ui）
-
-**1. 准备工作**
+本地安装 Docker，并启动服务。
 
-本地安装Docker，并将Docker服务启动起来
-
-**2. 编译Docker镜像**
+3.2 编译 Docker 镜像
 
 ```shell
 git checkout ${RELEASE.VERSION}
@@ -379,7 +369,7 @@ cd ~/elasticjob-ui/shardingsphere-elasticjob-ui-distribution/shardingsphere-elas
 mvn clean package -Prelease,docker
 ```
 
-**3. 给本地Docker镜像打标记**
+3.3 给本地 Docker 镜像打标记
 
 通过`docker images`查看到IMAGE ID，例如为：e9ea51023687
 
@@ -388,31 +378,31 @@ docker tag e9ea51023687 apache/shardingsphere-elasticjob-cloud-ui:latest
 docker tag e9ea51023687 apache/shardingsphere-elasticjob-cloud-ui:${RELEASE.VERSION}
 ```
 
-**4. 发布Docker镜像**
+3.4 发布Docker镜像
 
 ```shell
 docker push apache/shardingsphere-elasticjob-cloud-ui:latest
 docker push apache/shardingsphere-elasticjob-cloud-ui:${RELEASE_VERSION}
 ```
 
-**5. 确认发布成功**
+3.5 确认发布成功
 
-登录[Docker Hub](https://hub.docker.com/r/apache/shardingsphere-elasticjob-cloud-ui/)查看是否有发布的镜像
+登录 [Docker Hub](https://hub.docker.com/r/apache/shardingsphere-elasticjob-cloud-ui/) 查看是否有发布的镜像
 
-## 发布Docker （lite-ui）
+**4. 发布 Docker (lite-ui)**
 
-**1. 准备工作**
+4.1 准备工作
 
-本地安装Docker，并将Docker服务启动起来
+本地安装 Docker，并启动服务。
 
-**2. 编译Docker镜像**
+4.2 编译 Docker 镜像
 
 ```shell
 cd ~/elasticjob-ui/shardingsphere-elasticjob-ui-distribution/shardingsphere-elasticjob-lite-ui-bin-distribution/
 mvn clean package -Prelease,docker
 ```
 
-**3. 给本地Docker镜像打标记**
+4.3 给本地 Docker 镜像打标记
 
 通过`docker images`查看到IMAGE ID，例如为：e9ea51023687
 
@@ -421,24 +411,38 @@ docker tag e9ea51023687 apache/shardingsphere-elasticjob-lite-ui:latest
 docker tag e9ea51023687 apache/shardingsphere-elasticjob-lite-ui:${RELEASE.VERSION}
 ```
 
-**4. 发布Docker镜像**
+4.4 发布Docker镜像
 
 ```shell
 docker push apache/shardingsphere-elasticjob-lite-ui:latest
 docker push apache/shardingsphere-elasticjob-lite-ui:${RELEASE_VERSION}
 ```
 
-**5. 确认发布成功**
+4.5 确认发布成功
 
-登录[Docker Hub](https://hub.docker.com/r/apache/shardingsphere-elasticjob-lite-ui/)查看是否有发布的镜像
+登录 [Docker Hub](https://hub.docker.com/r/apache/shardingsphere-elasticjob-lite-ui/) 查看是否有发布的镜像
 
-## GitHub版本发布
+**5. GitHub 版本发布**
 
-在[GitHub Releases](https://github.com/apache/shardingsphere-elasticjob-ui/releases)页面的`shardingsphere-elasticjob-ui-${RELEASE_VERSION}`版本上点击`Edit`
+在 [GitHub Releases](https://github.com/apache/shardingsphere-elasticjob-ui/releases) 页面的 `shardingsphere-elasticjob-ui-${RELEASE_VERSION}` 版本上点击 `Edit`
 
 编辑版本号及版本说明，并点击`Publish release`
 
-## 发送邮件到`dev@shardingsphere.apache.org`和`announce@apache.org`通知完成版本发布
+**6. 更新下载页面**
+
+等待并确认新的发布版本同步至 Apache 镜像后，更新如下页面：
+
+https://shardingsphere.apache.org/elasticjob/current/en/downloads/
+
+https://shardingsphere.apache.org/elasticjob/current/cn/downloads/
+
+GPG签名文件和哈希校验文件的下载连接应该使用这个前缀： `https://downloads.apache.org/shardingsphere/`
+
+`最新版本`中保留一个最新的版本。
+
+**7. 邮件通知版本发布完成**
+
+发送邮件到`dev@shardingsphere.apache.org`和`announce@apache.org`通知完成版本发布
 
 通知邮件模板：
 
diff --git a/docs/community/content/contribute/release-elasticjob-ui.en.md b/docs/community/content/contribute/release-elasticjob-ui.en.md
index e246791bf5..776afb219a 100644
--- a/docs/community/content/contribute/release-elasticjob-ui.en.md
+++ b/docs/community/content/contribute/release-elasticjob-ui.en.md
@@ -362,23 +362,13 @@ git push --delete origin ${RELEASE.VERSION}-release
 git branch -d ${RELEASE.VERSION}-release
 ```
 
-**3. Update the download page**
+**3. Docker Release (cloud-ui)**
 
-https://shardingsphere.apache.org/elasticjob/current/en/downloads/
-
-https://shardingsphere.apache.org/elasticjob/current/cn/downloads/
-
-GPG signatures and hashes (SHA* etc) should use URL start with `https://downloads.apache.org/shardingsphere/`
+3.1 Preparation
 
-Keep one latest versions in `Latest releases`.
-
-## Docker Release (cloud-ui)
-
-**1. Preparation**
+Install and start docker service
 
-Install docker locally and start the docker service
-
-**2. Compile Docker Image**
+3.2 Compile Docker Image
 
 ```shell
 git checkout ${RELEASE.VERSION}
@@ -386,7 +376,7 @@ cd ~/elasticjob-ui/shardingsphere-elasticjob-ui-distribution/shardingsphere-elas
 mvn clean package -Prelease,docker
 ```
 
-**3. Tag the local Docker Image**
+3.3 Tag the local Docker Image
 
 Check the image ID through `docker images`, for example: e9ea51023687
 
@@ -395,31 +385,31 @@ docker tag e9ea51023687 apache/shardingsphere-elasticjob-cloud-ui:latest
 docker tag e9ea51023687 apache/shardingsphere-elasticjob-cloud-ui:${RELEASE.VERSION}
 ```
 
-**4. Publish Docker Image**
+3.4 Publish Docker Image
 
 ```shell
 docker push apache/shardingsphere-elasticjob-cloud-ui:latest
 docker push apache/shardingsphere-elasticjob-cloud-ui:${RELEASE_VERSION}
 ```
 
-**5. Confirm the successful release**
+3.5 Confirm the successful release
 
 Login [Docker Hub](https://hub.docker.com/r/apache/shardingsphere-elasticjob-cloud-ui/) to check whether there are published images
 
-## Docker Release (lite-ui)
+**4. Docker Release (lite-ui)**
 
-**1. Preparation**
+4.1 Preparation
 
-Install docker locally and start the docker service
+Install and start docker service
 
-**2. Compile Docker Image**
+4.2 Compile Docker Image
 
 ```shell
 cd ~/elasticjob-ui/shardingsphere-elasticjob-ui-distribution/shardingsphere-elasticjob-lite-ui-bin-distribution/
 mvn clean package -Prelease,docker
 ```
 
-**3. Tag the local Docker Image**
+4.3 Tag the local Docker Image
 
 Check the image ID through `docker images`, for example: e9ea51023687
 
@@ -428,24 +418,36 @@ docker tag e9ea51023687 apache/shardingsphere-elasticjob-lite-ui:latest
 docker tag e9ea51023687 apache/shardingsphere-elasticjob-lite-ui:${RELEASE.VERSION}
 ```
 
-**4. Publish Docker Image**
+4.4 Publish Docker Image
 
 ```shell
 docker push apache/shardingsphere-elasticjob-lite-ui:latest
 docker push apache/shardingsphere-elasticjob-lite-ui:${RELEASE_VERSION}
 ```
 
-**5. Confirm the successful release**
+4.5 Confirm the successful release
 
 Login [Docker Hub](https://hub.docker.com/r/apache/shardingsphere-elasticjob-lite-ui/) to check whether there are published images
 
-## Publish release in GitHub
+**5. Publish release in GitHub**
 
 Click `Edit` in [GitHub Releases](https://github.com/apache/shardingsphere-elasticjob-ui/releases)'s `shardingsphere-elasticjob-ui-${RELEASE_VERSION}` version
 
 Edit version number and release notes, click `Publish release`
 
-## Send e-mail to `dev@shardingsphere.apache.org` and `announce@apache.org` to announce the release is finished
+**6. Update the download page**
+
+https://shardingsphere.apache.org/elasticjob/current/en/downloads/
+
+https://shardingsphere.apache.org/elasticjob/current/cn/downloads/
+
+GPG signatures and hashes (SHA* etc) should use URL start with `https://downloads.apache.org/shardingsphere/`
+
+Keep one latest versions in `Latest releases`.
+
+**7. Announce release completed by email**
+
+Send e-mail to `dev@shardingsphere.apache.org` and `announce@apache.org` to announce the release is finished
 
 Announcement e-mail template:
 
diff --git a/docs/community/content/contribute/release-elasticjob.cn.md b/docs/community/content/contribute/release-elasticjob.cn.md
index 9e8fd4ed5d..18ffc62314 100644
--- a/docs/community/content/contribute/release-elasticjob.cn.md
+++ b/docs/community/content/contribute/release-elasticjob.cn.md
@@ -371,23 +371,13 @@ git push --delete origin ${RELEASE.VERSION}-release
 git branch -d ${RELEASE.VERSION}-release
 ```
 
-**4. 更新下载页面**
+**4. 发布 Docker**
 
-https://shardingsphere.apache.org/elasticjob/current/en/downloads/
-
-https://shardingsphere.apache.org/elasticjob/current/cn/downloads/
+4.1 准备工作
 
-GPG签名文件和哈希校验文件的下载连接应该使用这个前缀： `https://downloads.apache.org/shardingsphere/`
-
-`最新版本`中保留一个最新的版本。
+本地安装 Docker，并启动服务。
 
-## 发布Docker
-
-**1. 准备工作**
-
-本地安装Docker，并将Docker服务启动起来
-
-**2. 编译Docker镜像**
+4.2 编译 Docker 镜像
 
 ```shell
 git checkout ${RELEASE.VERSION}
@@ -395,7 +385,7 @@ cd ~/elasticjob/elasticjob-distribution/elasticjob-cloud-scheduler-distribution/
 mvn clean package -Prelease,docker
 ```
 
-**3. 给本地Docker镜像打标记**
+4.3 给本地 Docker 镜像打标记
 
 通过`docker images`查看到IMAGE ID，例如为：e9ea51023687
 
@@ -404,24 +394,38 @@ docker tag e9ea51023687 apache/shardingsphere-elasticjob-cloud-scheduler:latest
 docker tag e9ea51023687 apache/shardingsphere-elasticjob-cloud-scheduler:${RELEASE.VERSION}
 ```
 
-**4. 发布Docker镜像**
+4.4 发布 Docker 镜像
 
 ```shell
 docker push apache/shardingsphere-elasticjob-cloud-scheduler:latest
 docker push apache/shardingsphere-elasticjob-cloud-scheduler:${RELEASE_VERSION}
 ```
 
-**5. 确认发布成功**
+4.5 确认发布成功
 
-登录[Docker Hub](https://hub.docker.com/r/apache/shardingsphere-elasticjob-cloud-scheduler/)查看是否有发布的镜像
+登录 [Docker Hub](https://hub.docker.com/r/apache/shardingsphere-elasticjob-cloud-scheduler/) 查看是否有发布的镜像
 
-## GitHub版本发布
+**5. GitHub版本发布**
 
-在[GitHub Releases](https://github.com/apache/shardingsphere-elasticjob/releases)页面的`${RELEASE_VERSION}`版本上点击`Edit`
+在 [GitHub Releases](https://github.com/apache/shardingsphere-elasticjob/releases) 页面的 `${RELEASE_VERSION}` 版本上点击 `Edit`
 
 编辑版本号及版本说明，并点击`Publish release`
 
-## 发送邮件到`dev@shardingsphere.apache.org`和`announce@apache.org`通知完成版本发布
+**6. 更新下载页面**
+
+等待并确认新的发布版本同步至 Apache 镜像后，更新如下页面：
+
+https://shardingsphere.apache.org/elasticjob/current/en/downloads/
+
+https://shardingsphere.apache.org/elasticjob/current/cn/downloads/
+
+GPG签名文件和哈希校验文件的下载连接应该使用这个前缀：`https://downloads.apache.org/shardingsphere/`
+
+`最新版本`中保留一个最新的版本。
+
+**7. 邮件通知版本发布完成**
+
+发送邮件到`dev@shardingsphere.apache.org`和`announce@apache.org`通知完成版本发布
 
 通知邮件模板：
 
diff --git a/docs/community/content/contribute/release-elasticjob.en.md b/docs/community/content/contribute/release-elasticjob.en.md
index 0170f2525f..8c2f4a345d 100644
--- a/docs/community/content/contribute/release-elasticjob.en.md
+++ b/docs/community/content/contribute/release-elasticjob.en.md
@@ -374,23 +374,13 @@ git push --delete origin ${RELEASE.VERSION}-release
 git branch -d ${RELEASE.VERSION}-release
 ```
 
-**4. Update the download page**
+**4. Docker Release**
 
-https://shardingsphere.apache.org/elasticjob/current/en/downloads/
-
-https://shardingsphere.apache.org/elasticjob/current/cn/downloads/
-
-GPG signatures and hashes (SHA* etc) should use URL start with `https://downloads.apache.org/shardingsphere/`
+4.1 Preparation
 
-Keep one latest versions in `Latest releases`.
-
-## Docker Release
-
-**1. Preparation**
+Install and start docker service
 
-Install docker locally and start the docker service
-
-**2. Compile Docker Image**
+4.2 Compile Docker Image
 
 ```shell
 git checkout ${RELEASE.VERSION}
@@ -398,7 +388,7 @@ cd ~/elasticjob/elasticjob-distribution/elasticjob-cloud-scheduler-distribution/
 mvn clean package -Prelease,docker
 ```
 
-**3. Tag the local Docker Image**
+4.3 Tag the local Docker Image
 
 Check the image ID through `docker images`, for example: e9ea51023687
 
@@ -407,24 +397,36 @@ docker tag e9ea51023687 apache/shardingsphere-elasticjob-cloud-scheduler:latest
 docker tag e9ea51023687 apache/shardingsphere-elasticjob-cloud-scheduler:${RELEASE.VERSION}
 ```
 
-**4. Publish Docker Image**
+4.4 Publish Docker Image
 
 ```shell
 docker push apache/shardingsphere-elasticjob-cloud-scheduler:latest
 docker push apache/shardingsphere-elasticjob-cloud-scheduler:${RELEASE_VERSION}
 ```
 
-**5. Confirm the successful release**
+4.5 Confirm the successful release
 
 Login [Docker Hub](https://hub.docker.com/r/apache/shardingsphere-elasticjob-cloud-scheduler/) to check whether there are published images
 
-## Publish release in GitHub
+**5. Publish release in GitHub**
 
 Click `Edit` in [GitHub Releases](https://github.com/apache/shardingsphere-elasticjob/releases)'s `${RELEASE_VERSION}` version
 
 Edit version number and release notes, click `Publish release`
 
-## Send e-mail to `dev@shardingsphere.apache.org` and `announce@apache.org` to announce the release is finished
+**6. Update the download page**
+
+https://shardingsphere.apache.org/elasticjob/current/en/downloads/
+
+https://shardingsphere.apache.org/elasticjob/current/cn/downloads/
+
+GPG signatures and hashes (SHA* etc) should use URL start with `https://downloads.apache.org/shardingsphere/`
+
+Keep one latest versions in `Latest releases`.
+
+**7. Announce release completed by email**
+
+Send e-mail to `dev@shardingsphere.apache.org` and `announce@apache.org` to announce the release is finished
 
 Announcement e-mail template:
 
diff --git a/docs/community/content/contribute/release.cn.md b/docs/community/content/contribute/release.cn.md
index 0b52bb608d..18be35f98a 100644
--- a/docs/community/content/contribute/release.cn.md
+++ b/docs/community/content/contribute/release.cn.md
@@ -463,29 +463,19 @@ git push --delete origin ${RELEASE.VERSION}-release
 git branch -d ${RELEASE.VERSION}-release
 ```
 
-**4. 修改README文件**
+**4. 修改 README 文件**
 
 将`README.md`和`README_ZH.md`里的`${PREVIOUS.RELEASE.VERSION}`修改为`${RELEASE.VERSION}`
 
 将`MySQLServerInfo.java`中的`SERVER_VERSION`从`${RELEASE.VERSION}`修改为`${NEXT.RELEASE.VERSION}`
 
-**5. 更新下载页面**
+**5. 发布 Docker**
 
-https://shardingsphere.apache.org/document/current/en/downloads/
-
-https://shardingsphere.apache.org/document/current/cn/downloads/
+5.1 准备工作
 
-GPG签名文件和哈希校验文件的下载连接应该使用这个前缀： `https://downloads.apache.org/shardingsphere/`
-
-`最新版本`中保留一个最新的版本。Incubator阶段历史版本会自动归档到[Archive repository](https://archive.apache.org/dist/incubator/shardingsphere/)
+本地安装 Docker，并启动服务。
 
-## 发布Docker
-
-**1. 准备工作**
-
-本地安装Docker，并将Docker服务启动起来
-
-**2. 编译Docker镜像**
+5.2 编译 Docker 镜像
 
 ```shell
 git checkout ${RELEASE.VERSION}
@@ -493,33 +483,47 @@ cd ~/shardingsphere/shardingsphere-distribution/shardingsphere-proxy-distributio
 mvn clean package -Prelease,docker
 ```
 
-**3. 给本地Docker镜像打标记**
+5.3 给本地 Docker 镜像打标记
 
-通过`docker images`查看到IMAGE ID，例如为：e9ea51023687
+通过`docker images`查看到 IMAGE ID，例如为：e9ea51023687
 
 ```shell
 docker tag e9ea51023687 apache/sharding-proxy:latest
 docker tag e9ea51023687 apache/sharding-proxy:${RELEASE.VERSION}
 ```
 
-**4. 发布Docker镜像**
+5.4 发布 Docker 镜像
 
 ```shell
 docker push apache/sharding-proxy:latest
 docker push apache/sharding-proxy:${RELEASE_VERSION}
 ```
 
-**5. 确认发布成功**
+5.5 确认发布成功
+
+登录 [Docker Hub](https://hub.docker.com/r/apache/sharding-proxy/) 查看是否有发布的镜像
 
-登录[Docker Hub](https://hub.docker.com/r/apache/sharding-proxy/)查看是否有发布的镜像
+**6. GitHub版本发布**
 
-## GitHub版本发布
+在 [GitHub Releases](https://github.com/apache/shardingsphere/releases) 页面的 `${RELEASE_VERSION}` 版本上点击 `Edit`
 
-在[GitHub Releases](https://github.com/apache/shardingsphere/releases)页面的`${RELEASE_VERSION}`版本上点击`Edit`
+编辑版本号及版本说明，并点击 `Publish release`
+
+**7. 更新下载页面**
+
+等待并确认新的发布版本同步至 Apache 镜像后，更新如下页面：
+
+https://shardingsphere.apache.org/document/current/en/downloads/
+
+https://shardingsphere.apache.org/document/current/cn/downloads/
+
+GPG签名文件和哈希校验文件的下载连接应该使用这个前缀：`https://downloads.apache.org/shardingsphere/`
+
+`最新版本`中保留一个最新的版本。Incubator阶段历史版本会自动归档到[Archive repository](https://archive.apache.org/dist/incubator/shardingsphere/)
 
-编辑版本号及版本说明，并点击`Publish release`
+**8. 邮件通知版本发布完成**
 
-## 发送邮件到`dev@shardingsphere.apache.org`和`announce@apache.org`通知完成版本发布
+发送邮件到`dev@shardingsphere.apache.org`和`announce@apache.org`通知完成版本发布
 
 通知邮件模板：
 
diff --git a/docs/community/content/contribute/release.en.md b/docs/community/content/contribute/release.en.md
index 90945ae1e3..f34f563b9a 100644
--- a/docs/community/content/contribute/release.en.md
+++ b/docs/community/content/contribute/release.en.md
@@ -473,22 +473,13 @@ Update `${PREVIOUS.RELEASE.VERSION}` to `${RELEASE.VERSION}` in README.md and RE
 
 Update `${RELEASE.VERSION}` to `${NEXT.RELEASE.VERSION}` for `SERVER_VERSION` in `MySQLServerInfo.java`
 
-**5. Update the download page**
+**5. Docker Release**
 
-https://shardingsphere.apache.org/document/current/en/downloads/
+5.1 Preparation
 
-https://shardingsphere.apache.org/document/current/cn/downloads/
+Install and start docker service
 
-GPG signatures and hashes (SHA* etc) should use URL start with `https://downloads.apache.org/shardingsphere/`
-
-Keep one latest versions in `Latest releases`. Incubating stage versions will be archived automatically in [Archive repository](https://archive.apache.org/dist/incubator/shardingsphere/)
-
-## Docker Release
-**1. Preparation**
-
-Install docker locally and start the docker service
-
-**2. Compile Docker Image**
+5.2 Compile Docker Image
 
 ```shell
 git checkout ${RELEASE.VERSION}
@@ -496,7 +487,7 @@ cd ~/shardingsphere/shardingsphere-distribution/shardingsphere-proxy-distributio
 mvn clean package -Prelease,docker
 ```
 
-**3. Tag the local Docker Image**
+5.3 Tag the local Docker Image
 
 Check the image ID through `docker images`, for example: e9ea51023687
 
@@ -505,24 +496,36 @@ docker tag e9ea51023687 apache/sharding-proxy:latest
 docker tag e9ea51023687 apache/sharding-proxy:${RELEASE.VERSION}
 ```
 
-**4. Publish Docker Image**
+5.4 Publish Docker Image
 
 ```shell
 docker push apache/sharding-proxy:latest
 docker push apache/sharding-proxy:${RELEASE_VERSION}
 ```
 
-**5. Confirm the successful release**
+5.5 Confirm the successful release
 
 Login [Docker Hub](https://hub.docker.com/r/apache/sharding-proxy/) to check whether there are published images
 
-## Publish release in GitHub
+**6. Publish release in GitHub**
 
 Click `Edit` in [GitHub Releases](https://github.com/apache/shardingsphere/releases)'s `${RELEASE_VERSION}` version
 
 Edit version number and release notes, click `Publish release`
 
-## Send e-mail to `dev@shardingsphere.apache.org` and `announce@apache.org` to announce the release is finished
+**7. Update the download page**
+
+https://shardingsphere.apache.org/document/current/en/downloads/
+
+https://shardingsphere.apache.org/document/current/cn/downloads/
+
+GPG signatures and hashes (SHA* etc) should use URL start with `https://downloads.apache.org/shardingsphere/`
+
+Keep one latest versions in `Latest releases`. Incubating stage versions will be archived automatically in [Archive repository](https://archive.apache.org/dist/incubator/shardingsphere/)
+
+**8. Announce release completed by email**
+
+Send e-mail to `dev@shardingsphere.apache.org` and `announce@apache.org` to announce the release is finished
 
 Announcement e-mail template:
 
diff --git a/docs/community/content/contribute/release_ui.cn.md b/docs/community/content/contribute/release_ui.cn.md
index 1d698c6763..c75b5bf916 100644
--- a/docs/community/content/contribute/release_ui.cn.md
+++ b/docs/community/content/contribute/release_ui.cn.md
@@ -352,7 +352,15 @@ git push --delete origin ${RELEASE.VERSION}-release
 git branch -d ${RELEASE.VERSION}-release
 ```
 
-**3. 更新下载页面**
+**3. GitHub 版本发布**
+
+在 [GitHub Releases](https://github.com/apache/shardingsphere-ui/releases) 页面的 `shardingsphere-ui-${RELEASE_VERSION}` 版本上点击 `Edit`
+
+编辑版本号及版本说明，并点击 `Publish release`
+
+**4. 更新下载页面**
+
+等待并确认新的发布版本同步至 Apache 镜像后，更新如下页面：
 
 https://shardingsphere.apache.org/document/current/en/downloads/
 
@@ -362,11 +370,7 @@ GPG签名文件和哈希校验文件的下载连接应该使用这个前缀： `
 
 `最新版本`中保留一个最新的版本。Incubator阶段历史版本会自动归档到[Archive repository](https://archive.apache.org/dist/incubator/shardingsphere/)
 
-## GitHub版本发布
-
-在[GitHub Releases](https://github.com/apache/shardingsphere-ui/releases)页面的`shardingsphere-ui-${RELEASE_VERSION}`版本上点击`Edit`
-
-编辑版本号及版本说明，并点击`Publish release`
+**5. 邮件通知版本发布完成**
 
 ## 发送邮件到`dev@shardingsphere.apache.org`和`announce@apache.org`通知完成版本发布
 
diff --git a/docs/community/content/contribute/release_ui.en.md b/docs/community/content/contribute/release_ui.en.md
index 0f185df14b..7e200f9c91 100644
--- a/docs/community/content/contribute/release_ui.en.md
+++ b/docs/community/content/contribute/release_ui.en.md
@@ -356,7 +356,13 @@ git push --delete origin ${RELEASE.VERSION}-release
 git branch -d ${RELEASE.VERSION}-release
 ```
 
-**3. Update the download page**
+**3. Publish release in GitHub**
+
+Click `Edit` in [GitHub Releases](https://github.com/apache/shardingsphere-ui/releases)'s `shardingsphere-ui-${RELEASE_VERSION}` version
+
+Edit version number and release notes, click `Publish release`
+
+**4. Update the download page**
 
 https://shardingsphere.apache.org/document/current/en/downloads/
 
@@ -366,13 +372,9 @@ GPG signatures and hashes (SHA* etc) should use URL start with `https://download
 
 Keep one latest versions in `Latest releases`. Incubating stage versions will be archived automatically in [Archive repository](https://archive.apache.org/dist/incubator/shardingsphere/)
 
-## Publish release in GitHub
-
-Click `Edit` in [GitHub Releases](https://github.com/apache/shardingsphere-ui/releases)'s `shardingsphere-ui-${RELEASE_VERSION}` version
-
-Edit version number and release notes, click `Publish release`
+**5. Announce release completed by email**
 
-## Send e-mail to `dev@shardingsphere.apache.org` and `announce@apache.org` to announce the release is finished
+Send e-mail to `dev@shardingsphere.apache.org` and `announce@apache.org` to announce the release is finished
 
 Announcement e-mail template:
 
