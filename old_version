commit 82e5f038b9cffb1a371c9fbd3c3cd24d5dffcfd5
Author: Liang Zhang <terrymanu@163.com>
Date:   Wed Oct 28 17:04:04 2020 +0800

    Rename module name from primary-replica-replication to replica-query (#7943)
    
    * Update doc for SQLParserFacade
    
    * Rename module name from primary-replica-replication to replica-query
    
    * Rename primary-replica-replication to replica-query
    
    * Rename Primary-Replica Replication to replica query
    
    * Rename primary_replica_replication to replica_query
    
    * Rename primary replica replication to replica query
    
    * Rename PrimaryReplicaReplication to ReplicaQuery
    
    * Rename read-write-split to replica-query

diff --git a/docs/blog/content/material/proxy.en.md b/docs/blog/content/material/proxy.en.md
index eaf0d02c82..40cd67895c 100644
--- a/docs/blog/content/material/proxy.en.md
+++ b/docs/blog/content/material/proxy.en.md
@@ -36,7 +36,7 @@ Comparison with Sharding-JDBC & Sharding-Sidecar:
 
 ![](https://shardingsphere.apache.org/blog/img/comparsion_en.jpg)
 
-They can work individually and cooperate each other, which achieve same purpose through different architecture and point of penetration. Its core functions based on same implementation, such as data sharding, primary-replica replication and base transaction. 
+They can work individually and cooperate each other, which achieve same purpose through different architecture and point of penetration. Its core functions based on same implementation, such as data sharding, replica query and base transaction. 
 
 For instance, Sharding-JDBC highly supports many kinds of ORM framework for Java development technology stack scenarios. It's quite convenient to import data sharding ability to your system. DBA retrieves and manages data by deploying a Sharding-Proxy instance.
 
diff --git a/docs/community/content/contribute/document-contributor.cn.md b/docs/community/content/contribute/document-contributor.cn.md
index a2fd572430..0878ace18a 100644
--- a/docs/community/content/contribute/document-contributor.cn.md
+++ b/docs/community/content/contribute/document-contributor.cn.md
@@ -44,8 +44,8 @@ shardingsphere
   │  │  │  ├─encrypt
   │  │  │  ├─governance
   │  │  │  ├─pluggable-architecture
-  │  │  │  ├─primary-replica-replication
-  │  │  │  ├─replica
+  │  │  │  ├─replica-query
+  │  │  │  ├─consensus-replica
   │  │  │  ├─scaling
   │  │  │  ├─shadow
   │  │  │  ├─sharding
diff --git a/docs/community/content/contribute/document-contributor.en.md b/docs/community/content/contribute/document-contributor.en.md
index 7f8650220d..64e094debc 100644
--- a/docs/community/content/contribute/document-contributor.en.md
+++ b/docs/community/content/contribute/document-contributor.en.md
@@ -43,8 +43,8 @@ shardingsphere
   │  │  │  ├─encrypt
   │  │  │  ├─governance
   │  │  │  ├─pluggable-architecture
-  │  │  │  ├─primary-replica-replication
-  │  │  │  ├─replica
+  │  │  │  ├─replica-query
+  │  │  │  ├─consensus-replica
   │  │  │  ├─scaling
   │  │  │  ├─shadow
   │  │  │  ├─sharding
diff --git a/docs/document/content/dev-manual/configuration.cn.md b/docs/document/content/dev-manual/configuration.cn.md
index cc10299a8b..1a9a7918f9 100644
--- a/docs/document/content/dev-manual/configuration.cn.md
+++ b/docs/document/content/dev-manual/configuration.cn.md
@@ -7,31 +7,31 @@ chapter = true
 
 ## ShardingSphereRuleBuilder
 
-| *SPI 名称*                | *详细说明*                               |
-| ------------------------- | -------------------------------------- |
-| ShardingSphereRuleBuilder | 用于将用户配置转化为规则对象               |
-
-| *已知实现类*                          | *详细说明*                                      |
-| ------------------------------------ | ---------------------------------------------- |
-| ShardingRuleBuilder                  | 用于将分片用户配置转化为分片规则对象               |
-| PrimaryReplicaReplicationRuleBuilder | 用于将读写分离用户配置转化为读写分离规则对象        |
-| ConsensusReplicationRuleBuilder      | 用于将强一致多副本用户配置转化为强一致多副本规则对象 |
-| EncryptRuleBuilder                   | 用于将加密用户配置转化为加密规则对象               |
-| ShadowRuleBuilder                    | 用于将影子库用户配置转化为影子库规则对象           |
+| *SPI 名称*                       | *详细说明*                                     |
+| ------------------------------- | --------------------------------------------- |
+| ShardingSphereRuleBuilder       | 用于将用户配置转化为规则对象                      |
+
+| *已知实现类*                     | *详细说明*                                      |
+| ------------------------------- | ---------------------------------------------- |
+| ShardingRuleBuilder             | 用于将分片用户配置转化为分片规则对象               |
+| ReplicaQueryRuleBuilder         | 用于将读写分离用户配置转化为读写分离规则对象        |
+| ConsensusReplicationRuleBuilder | 用于将强一致多副本用户配置转化为强一致多副本规则对象 |
+| EncryptRuleBuilder              | 用于将加密用户配置转化为加密规则对象               |
+| ShadowRuleBuilder               | 用于将影子库用户配置转化为影子库规则对象           |
 
 ## YamlRuleConfigurationSwapper
 
-| *SPI 名称*                              | *详细说明*                                   |
-| --------------------------------------- | ------------------------------------------ |
-| YamlRuleConfigurationSwapper            | 用于将 YAML 配置转化为标准用户配置             |
-
-| *已知实现类*                                           | *详细说明*                                             |
-| ----------------------------------------------------- | ----------------------------------------------------- |
-| ShardingRuleConfigurationYamlSwapper                  | 用于将分片的 YAML 配置转化为分片标准配置                  |
-| PrimaryReplicaReplicationRuleConfigurationYamlSwapper | 用于将读写分离的 YAML 配置转化为读写分离标准配置           |
-| ConsensusReplicationRuleConfigurationYamlSwapper      | 用于将强一致多副本的 YAML 分片配置转化为强一致多副本标准配置 |
-| EncryptRuleConfigurationYamlSwapper                   | 用于将加密的 YAML 分片配置转化为加密标准配置               |
-| ShadowRuleConfigurationYamlSwapper                    | 用于将影子库的 YAML 分片配置转化为影子库标准配置           |
+| *SPI 名称*                                      | *详细说明*                                   |
+| ----------------------------------------------- | ------------------------------------------ |
+| YamlRuleConfigurationSwapper                    | 用于将 YAML 配置转化为标准用户配置             |
+
+| *已知实现类*                                      | *详细说明*                                             |
+| ------------------------------------------------ | ----------------------------------------------------- |
+| ShardingRuleConfigurationYamlSwapper             | 用于将分片的 YAML 配置转化为分片标准配置                  |
+| ReplicaQueryRuleConfigurationYamlSwapper         | 用于将读写分离的 YAML 配置转化为读写分离标准配置           |
+| ConsensusReplicationRuleConfigurationYamlSwapper | 用于将强一致多副本的 YAML 分片配置转化为强一致多副本标准配置 |
+| EncryptRuleConfigurationYamlSwapper              | 用于将加密的 YAML 分片配置转化为加密标准配置               |
+| ShadowRuleConfigurationYamlSwapper               | 用于将影子库的 YAML 分片配置转化为影子库标准配置           |
 
 ## ShardingSphereYamlConstruct
 
diff --git a/docs/document/content/dev-manual/configuration.en.md b/docs/document/content/dev-manual/configuration.en.md
index 8e42e38786..b8642670b6 100644
--- a/docs/document/content/dev-manual/configuration.en.md
+++ b/docs/document/content/dev-manual/configuration.en.md
@@ -7,31 +7,31 @@ chapter = true
 
 ## ShardingSphereRuleBuilder
 
-| *SPI Name*                | *Description*                                                                       |
-| ------------------------- | ----------------------------------------------------------------------------------- |
-| ShardingSphereRuleBuilder | Used to convert user configurations to rule objects                                 |
-
-| *Implementation Class*               | *Description*                                                                                               |
-| ------------------------------------ | ----------------------------------------------------------------------------------------------------------- |
-| ShardingRuleBuilder                  | Used to convert user sharding configurations to sharding rule objects                                       |
-| PrimaryReplicaReplicationRuleBuilder | Used to convert user primary-replica replication configurations to primary-replica replication rule objects |
-| ConsensusReplicationRuleBuilder      | Used to convert user consensus replication configurations to consensus replication rule objects             |
-| EncryptRuleBuilder                   | Used to convert user encryption configurations to encryption rule objects                                   |
-| ShadowRuleBuilder                    | Used to convert user shadow database configurations to shadow database rule objects                         |
+| *SPI Name*                      | *Description*                                                                                               |
+| ------------------------------- | ----------------------------------------------------------------------------------------------------------- |
+| ShardingSphereRuleBuilder       | Used to convert user configurations to rule objects                                                         |
+
+| *Implementation Class*          | *Description*                                                                                               |
+| ------------------------------- | ----------------------------------------------------------------------------------------------------------- |
+| ShardingRuleBuilder             | Used to convert user sharding configurations to sharding rule objects                                       |
+| ReplicaQueryRuleBuilder         | Used to convert user replica query configurations to replica query rule objects |
+| ConsensusReplicationRuleBuilder | Used to convert user consensus replication configurations to consensus replication rule objects             |
+| EncryptRuleBuilder              | Used to convert user encryption configurations to encryption rule objects                                   |
+| ShadowRuleBuilder               | Used to convert user shadow database configurations to shadow database rule objects                         |
 
 ## YamlRuleConfigurationSwapper
 
-| *SPI Name*                              | *Description*                                                                                |
-| --------------------------------------- | -------------------------------------------------------------------------------------------- |
-| YamlRuleConfigurationSwapper            | Used to convert YAML configuration to standard user configuration                            |
-
-| *Implementation Class*                                | *Description*                                                                                                        |
-| ----------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- |
-| ShardingRuleConfigurationYamlSwapper                  | Used to convert YAML sharding configuration to standard sharding configuration                                       |
-| PrimaryReplicaReplicationRuleConfigurationYamlSwapper | Used to convert YAML primary-replica replication configuration to standard primary-replica replication configuration |
-| ConsensusReplicationRuleConfigurationYamlSwapper      | Used to convert YAML consensus replication configuration to standard consensus replication configuration             |
-| EncryptRuleConfigurationYamlSwapper                   | Used to convert YAML encryption configuration to standard encryption configuration                                   |
-| ShadowRuleConfigurationYamlSwapper                    | Used to convert YAML shadow database configuration to standard shadow database configuration                         |
+| *SPI Name*                                       | *Description*                                                                                            |
+| ------------------------------------------------ | -------------------------------------------------------------------------------------------------------- |
+| YamlRuleConfigurationSwapper                     | Used to convert YAML configuration to standard user configuration                                        |
+
+| *Implementation Class*                           | *Description*                                                                                            |
+| ------------------------------------------------ | -------------------------------------------------------------------------------------------------------- |
+| ShardingRuleConfigurationYamlSwapper             | Used to convert YAML sharding configuration to standard sharding configuration                           |
+| ReplicaQueryRuleConfigurationYamlSwapper         | Used to convert YAML replica query configuration to standard replica query configuration                 |
+| ConsensusReplicationRuleConfigurationYamlSwapper | Used to convert YAML consensus replication configuration to standard consensus replication configuration |
+| EncryptRuleConfigurationYamlSwapper              | Used to convert YAML encryption configuration to standard encryption configuration                       |
+| ShadowRuleConfigurationYamlSwapper               | Used to convert YAML shadow database configuration to standard shadow database configuration             |
 
 ## ShardingSphereYamlConstruct
 
diff --git a/docs/document/content/dev-manual/kernel.cn.md b/docs/document/content/dev-manual/kernel.cn.md
index bf1218436d..e3563c28cb 100644
--- a/docs/document/content/dev-manual/kernel.cn.md
+++ b/docs/document/content/dev-manual/kernel.cn.md
@@ -45,16 +45,16 @@ chapter = true
 
 ## SQLRouter
 
-| *SPI 名称*                | *详细说明*              |
-| ------------------------- | --------------------- |
-| SQLRouter                 | 用于处理路由结果        |
-
-| *已知实现类*                        | *详细说明*                |
-| ---------------------------------- | ------------------------ |
-| ShardingSQLRouter                  | 用于处理分片路由结果       |
-| PrimaryReplicaReplicationSQLRouter | 用于处理读写分离路由结果    |
-| ConsensusReplicationSQLRouter      | 用于处理强一致多副本路由结果 |
-| ShadowSQLRouter                    | 用于处理影子库路由结果      |
+| *SPI 名称*                   | *详细说明*                 |
+| ---------------------------- | ------------------------- |
+| SQLRouter                    | 用于处理路由结果            |
+
+| *已知实现类*                   | *详细说明*                |
+| ----------------------------- | ------------------------ |
+| ShardingSQLRouter             | 用于处理分片路由结果       |
+| ReplicaQuerySQLRouter         | 用于处理读写分离路由结果    |
+| ConsensusReplicationSQLRouter | 用于处理强一致多副本路由结果 |
+| ShadowSQLRouter               | 用于处理影子库路由结果      |
 
 ## SQLRewriteContextDecorator
 
diff --git a/docs/document/content/dev-manual/kernel.en.md b/docs/document/content/dev-manual/kernel.en.md
index 6f5857f6a5..0acd352567 100644
--- a/docs/document/content/dev-manual/kernel.en.md
+++ b/docs/document/content/dev-manual/kernel.en.md
@@ -45,16 +45,16 @@ chapter = true
 
 ## SQLRouter
 
-| *SPI Name*           | *Description*                                   |
-| -------------------- | ----------------------------------------------- |
-| SQLRouter            | Used to process routing results                 |
-
-| *Implementation Class*             | *Description*                                               |
-| ---------------------------------- | ----------------------------------------------------------- |
-| ShardingSQLRouter                  | Used to process sharding routing results                    |
-| PrimaryReplicaReplicationSQLRouter | Used to process primary-replica replication routing results |
-| ConsensusReplicationSQLRouter      | Used to process consensus replication routing results       |
-| ShadowRouteSQLRouter               | Used to process shadow database routing results             |
+| *SPI Name*                    | *Description*                                         |
+| ----------------------------- | ----------------------------------------------------- |
+| SQLRouter                     | Used to process routing results                       |
+
+| *Implementation Class*        | *Description*                                         |
+| ----------------------------- | ----------------------------------------------------- |
+| ShardingSQLRouter             | Used to process sharding routing results              |
+| ReplicaQuerySQLRouter         | Used to process replica query routing results         |
+| ConsensusReplicationSQLRouter | Used to process consensus replication routing results |
+| ShadowRouteSQLRouter          | Used to process shadow database routing results       |
 
 ## SQLRewriteContextDecorator
 
diff --git a/docs/document/content/dev-manual/primary-replica-replication.cn.md b/docs/document/content/dev-manual/replica-query.cn.md
similarity index 100%
rename from docs/document/content/dev-manual/primary-replica-replication.cn.md
rename to docs/document/content/dev-manual/replica-query.cn.md
diff --git a/docs/document/content/dev-manual/primary-replica-replication.en.md b/docs/document/content/dev-manual/replica-query.en.md
similarity index 95%
rename from docs/document/content/dev-manual/primary-replica-replication.en.md
rename to docs/document/content/dev-manual/replica-query.en.md
index cbb52855c1..5282fc3f18 100644
--- a/docs/document/content/dev-manual/primary-replica-replication.en.md
+++ b/docs/document/content/dev-manual/replica-query.en.md
@@ -1,6 +1,6 @@
 +++
 pre = "<b>5.5. </b>"
-title = "Primary-Replica Replication"
+title = "Replica Query"
 weight = 5
 chapter = true
 +++
diff --git a/docs/document/content/faq/_index.cn.md b/docs/document/content/faq/_index.cn.md
index 76f61a1923..ca91357b95 100644
--- a/docs/document/content/faq/_index.cn.md
+++ b/docs/document/content/faq/_index.cn.md
@@ -27,7 +27,7 @@ ShardingSphere使用lombok实现极简代码。关于更多使用和安装细节
 Spring命名空间使用规范并未强制要求将xsd文件部署至公网地址，但考虑到部分用户的需求，我们也将相关xsd文件部署至ShardingSphere官网。
 
 实际上 shardingsphere-jdbc-spring-namespace 的 jar 包中 META-INF\spring.schemas 配置了 xsd 文件的位置：
-META-INF\namespace\sharding.xsd 和 META-INF\namespace\primary-replica-replication.xsd，只需确保 jar 包中该文件存在即可。
+META-INF\namespace\sharding.xsd 和 META-INF\namespace\replica-query.xsd，只需确保 jar 包中该文件存在即可。
 
 ## 4. Cloud not resolve placeholder ... in string value ...异常的解决方法?
 
diff --git a/docs/document/content/faq/_index.en.md b/docs/document/content/faq/_index.en.md
index 4baa62c74b..4ff796bfab 100644
--- a/docs/document/content/faq/_index.en.md
+++ b/docs/document/content/faq/_index.en.md
@@ -26,7 +26,7 @@ Answer:
 The use norm of Spring Namespace does not require to deploy xsd files to the official website. But considering some users' needs, we will deploy them to ShardingSphere's official website.
 
 Actually, META-INF\spring.schemas in the jar package of shardingsphere-jdbc-spring-namespace has been configured with the position of xsd files: 
-META-INF\namespace\sharding.xsd and META-INF\namespace\primary-replica-replication.xsd, so you only need to make sure that the file is in the jar package.
+META-INF\namespace\sharding.xsd and META-INF\namespace\replica-query.xsd, so you only need to make sure that the file is in the jar package.
 
 ## 4. How to solve `Cloud not resolve placeholder … in string value …` error?
 
diff --git a/docs/document/content/features/encrypt/principle.en.md b/docs/document/content/features/encrypt/principle.en.md
index 7f15799332..1213ef171d 100644
--- a/docs/document/content/features/encrypt/principle.en.md
+++ b/docs/document/content/features/encrypt/principle.en.md
@@ -131,7 +131,7 @@ Such a simple and rough way, based on historical experience, will definitely not
 
 Then another relatively safe approach is to rebuild a pre-release environment exactly like the production environment, 
 and then encrypt the **Inventory plaintext data** of the production environment through the relevant migration and washing tools and store it in the pre-release environment. 
-The **Increment data** is encrypted by tools such as MySQL primary-replica replication and the business party ’s own development, 
+The **Increment data** is encrypted by tools such as MySQL replica query and the business party ’s own development, 
 encrypted and stored in the database of the pre-release environment, and then the refactored code can be deployed to the pre-release environment. 
 In this way, the production environment is a set of environment for **modified/queries with plain text as the core**; 
 the pre-release environment is a set of **encrypt/decrypt queries modified with ciphertext as the core**. 
diff --git a/docs/document/content/features/governance/management/config-center.cn.md b/docs/document/content/features/governance/management/config-center.cn.md
index 3e47aa6283..ec4dba9c9b 100644
--- a/docs/document/content/features/governance/management/config-center.cn.md
+++ b/docs/document/content/features/governance/management/config-center.cn.md
@@ -87,7 +87,7 @@ rules:
 - !SHARDING
   xxx
   
-- !PRIMARY_REPLICA_REPLICATION
+- !REPLICA_QUERY
   xxx
   
 - !ENCRYPT
diff --git a/docs/document/content/features/governance/management/config-center.en.md b/docs/document/content/features/governance/management/config-center.en.md
index 08d03c51df..0bac859845 100644
--- a/docs/document/content/features/governance/management/config-center.en.md
+++ b/docs/document/content/features/governance/management/config-center.en.md
@@ -80,14 +80,14 @@ dataSources:
 
 ### /schemas/${schemeName}/rule
 
-Rule configurations, including sharding, primary-replica replication, data encryption, shadow DB, consensus replication configurations.
+Rule configurations, including sharding, replica query, data encryption, shadow DB, consensus replication configurations.
 
 ```yaml
 rules:
 - !SHARDING
   xxx
   
-- !PRIMARY_REPLICA_REPLICATION
+- !REPLICA_QUERY
   xxx
   
 - !ENCRYPT
diff --git a/docs/document/content/features/governance/management/registry-center.en.md b/docs/document/content/features/governance/management/registry-center.en.md
index 6fbca2e991..893cfcc752 100644
--- a/docs/document/content/features/governance/management/registry-center.en.md
+++ b/docs/document/content/features/governance/management/registry-center.en.md
@@ -52,7 +52,7 @@ Zookeeper command is as follows:
 
 ### Disable Replica Database
 
-Under primary-replica replication scenarios, users can write `DISABLED` (case insensitive) to sub-nodes of data source name to disable replica database sources. Delete `DISABLED` or the node to enable it.
+Under replica query scenarios, users can write `DISABLED` (case insensitive) to sub-nodes of data source name to disable replica database sources. Delete `DISABLED` or the node to enable it.
 
 Zookeeper command is as follows:
 
diff --git a/docs/document/content/features/pluggable-architecture/_index.en.md b/docs/document/content/features/pluggable-architecture/_index.en.md
index 296c40bd6d..75b4f2bc5e 100644
--- a/docs/document/content/features/pluggable-architecture/_index.en.md
+++ b/docs/document/content/features/pluggable-architecture/_index.en.md
@@ -17,7 +17,7 @@ It needs to make each module decouple to independent and imperceptible to each o
 Design an architecture to completely isolate each function, not only can stimulate the enthusiasm of the open source community, but also can guarantee the quality of the project.
 
 Apache ShardingSphere begin to focus on pluggable architecture from version 5.x, features can be embedded into project flexibility.
-Currently, the features such as data sharding, primary-replica replication, consensus replication, data encrypt, shadow test, and SQL dialects / database protocols such as MySQL, PostgreSQL, SQLServer, Oracle supported are all weaved by plugins.
+Currently, the features such as data sharding, replica query, consensus replication, data encrypt, shadow test, and SQL dialects / database protocols such as MySQL, PostgreSQL, SQLServer, Oracle supported are all weaved by plugins.
 There are lots of SPI extensions for Apache ShardingSphere now and increase continuously.
 
 ## Goal
diff --git a/docs/document/content/features/primary-replica-replication/_index.en.md b/docs/document/content/features/primary-replica-replication/_index.en.md
deleted file mode 100644
index c9ef2d5ac9..0000000000
--- a/docs/document/content/features/primary-replica-replication/_index.en.md
+++ /dev/null
@@ -1,28 +0,0 @@
-+++
-pre = "<b>3.3. </b>"
-title = "Primary-Replica Replication"
-weight = 3
-chapter = true
-+++
-
-## Background
-
-With increasing system TPS, database capacity has faced great bottleneck effect. For the application system with massive concurrence read operations but less write operations in the same time, we can divide the database into a primary database and a replica database. The primary database is responsible for the addition, deletion and modification of transactions, while the replica database is responsible for queries. It can significantly improve the query performance of the whole system by effectively avoiding line locks caused by data renewal.
-
-One primary database with multiple replica databases can further enhance system processing capacity by distributing queries evenly into multiple data replicas. Multiple primary databases with multiple replica databases can enhance not only system throughput but also system availability. Therefore, the system can still function normally, even though any database is down or physical disk is destroyed.
-
-Different from the horizontal sharding that separates data to all nodes according to sharding keys, primary-replica replication routes read operations and write operations separately to the primary database and the replica database according to SQL meaning analysis.
-
-![Primary-replica replication](https://shardingsphere.apache.org/document/current/img/read-write-split/read-write-split.png)
-
-Data in primary-replica replication split nodes is consistent, whereas that in horizontal shards is not. The combined use of horizontal sharding and primary-replica replication will effectively enhance the system performance.
-
-## Challenges
-
-Though primary-replica replication can enhance system throughput and availability, it also brings inconsistent data, including that between multiple primary databases and between primary databases and replica databases. What's more, it also brings the same problem as data sharding, complicating app developer and operator's maintenance and operation. The following picture has shown the complex topological relations between applications and database groups when sharding table and database used together with primary-replica replication.
-
-![Sharding + Primary-Replica Replication](https://shardingsphere.apache.org/document/current/img/read-write-split/sharding-read-write-split.png)
-
-## Goal
-
-**The main design goal of the primary-replica replication modular of ShardingSphere is to try to reduce the influence of primary-replica replication, in order to let users use primary-replica replication database group like one database.**
\ No newline at end of file
diff --git a/docs/document/content/features/primary-replica-replication/_index.cn.md b/docs/document/content/features/replica-query/_index.cn.md
similarity index 94%
rename from docs/document/content/features/primary-replica-replication/_index.cn.md
rename to docs/document/content/features/replica-query/_index.cn.md
index 8f8e56e624..559bfade15 100644
--- a/docs/document/content/features/primary-replica-replication/_index.cn.md
+++ b/docs/document/content/features/replica-query/_index.cn.md
@@ -15,7 +15,7 @@ chapter = true
 
 与将数据根据分片键打散至各个数据节点的水平分片不同，读写分离则是根据SQL语义的分析，将读操作和写操作分别路由至主库与从库。
 
-![读写分离](https://shardingsphere.apache.org/document/current/img/read-write-split/read-write-split.png)
+![读写分离](https://shardingsphere.apache.org/document/current/img/replica-query/replica-query-standalone.png)
 
 读写分离的数据节点中的数据内容是一致的，而水平分片的每个数据节点的数据内容却并不相同。将水平分片和读写分离联合使用，能够更加有效的提升系统性能。
 
@@ -26,7 +26,7 @@ chapter = true
 并且，读写分离也带来了与数据分片同样的问题，它同样会使得应用开发和运维人员对数据库的操作和运维变得更加复杂。
 下图展现了将分库分表与读写分离一同使用时，应用程序与数据库集群之间的复杂拓扑关系。
 
-![数据分片 + 读写分离](https://shardingsphere.apache.org/document/current/img/read-write-split/sharding-read-write-split.png)
+![数据分片 + 读写分离](https://shardingsphere.apache.org/document/current/img/replica-query/sharding-and-replica-query.png)
 
 ## 目标
 
diff --git a/docs/document/content/features/replica-query/_index.en.md b/docs/document/content/features/replica-query/_index.en.md
new file mode 100644
index 0000000000..4bf7455af2
--- /dev/null
+++ b/docs/document/content/features/replica-query/_index.en.md
@@ -0,0 +1,28 @@
++++
+pre = "<b>3.3. </b>"
+title = "Replica query"
+weight = 3
+chapter = true
++++
+
+## Background
+
+With increasing system TPS, database capacity has faced great bottleneck effect. For the application system with massive concurrence read operations but less write operations in the same time, we can divide the database into a primary database and a replica database. The primary database is responsible for the addition, deletion and modification of transactions, while the replica database is responsible for queries. It can significantly improve the query performance of the whole system by effectively avoiding line locks caused by data renewal.
+
+One primary database with multiple replica databases can further enhance system processing capacity by distributing queries evenly into multiple data replicas. Multiple primary databases with multiple replica databases can enhance not only system throughput but also system availability. Therefore, the system can still function normally, even though any database is down or physical disk is destroyed.
+
+Different from the horizontal sharding that separates data to all nodes according to sharding keys, replica query routes read operations and write operations separately to the primary database and the replica database according to SQL meaning analysis.
+
+![Query from Replica](https://shardingsphere.apache.org/document/current/img/replica-query/replica-query-standalone.png)
+
+Data in replica query split nodes is consistent, whereas that in horizontal shards is not. The combined use of horizontal sharding and replica query will effectively enhance the system performance.
+
+## Challenges
+
+Though replica query can enhance system throughput and availability, it also brings inconsistent data, including that between multiple primary databases and between primary databases and replica databases. What's more, it also brings the same problem as data sharding, complicating app developer and operator's maintenance and operation. The following picture has shown the complex topological relations between applications and database groups when sharding table and database used together with replica query.
+
+![Sharding + Replica query](https://shardingsphere.apache.org/document/current/img/replica-query/sharding-and-replica-query.png)
+
+## Goal
+
+**The main design goal of the replica query modular of ShardingSphere is to try to reduce the influence of replica query, in order to let users use replica query database group like one database.**
\ No newline at end of file
diff --git a/docs/document/content/features/primary-replica-replication/concept.cn.md b/docs/document/content/features/replica-query/concept.cn.md
similarity index 100%
rename from docs/document/content/features/primary-replica-replication/concept.cn.md
rename to docs/document/content/features/replica-query/concept.cn.md
diff --git a/docs/document/content/features/primary-replica-replication/concept.en.md b/docs/document/content/features/replica-query/concept.en.md
similarity index 78%
rename from docs/document/content/features/primary-replica-replication/concept.en.md
rename to docs/document/content/features/replica-query/concept.en.md
index 1053bcdb36..d849e3d1f3 100644
--- a/docs/document/content/features/primary-replica-replication/concept.en.md
+++ b/docs/document/content/features/replica-query/concept.en.md
@@ -12,10 +12,10 @@ It refers to the database used in data insertion, update and deletion. It only s
 
 It refers to the database used in data query. It supports multiple replica databases.
 
-## Primary replica Replication
+## Primary Replica Replication
 
 It refers to the operation to asynchronously replicate data from the primary database to the replica database. 
-Because of primary-replica replication asynchronization, there may be short-time data inconsistency between them.  
+Because of replica query asynchronization, there may be short-time data inconsistency between them.  
 
 ## Load Balance Strategy
 
diff --git a/docs/document/content/features/primary-replica-replication/use-norms.cn.md b/docs/document/content/features/replica-query/use-norms.cn.md
similarity index 100%
rename from docs/document/content/features/primary-replica-replication/use-norms.cn.md
rename to docs/document/content/features/replica-query/use-norms.cn.md
diff --git a/docs/document/content/features/primary-replica-replication/use-norms.en.md b/docs/document/content/features/replica-query/use-norms.en.md
similarity index 61%
rename from docs/document/content/features/primary-replica-replication/use-norms.en.md
rename to docs/document/content/features/replica-query/use-norms.en.md
index ed66a2bd83..b6be3a8f3c 100644
--- a/docs/document/content/features/primary-replica-replication/use-norms.en.md
+++ b/docs/document/content/features/replica-query/use-norms.en.md
@@ -6,8 +6,8 @@ weight = 2
 
 ## Supported Items
 
-* Provide the primary-replica replication configuration of one primary database with multiple replica databases, which can be used alone or with sharding table and database;
-* Support SQL pass-through in independent use of primary-replica replication;
+* Provide the replica query configuration of one primary database with multiple replica databases, which can be used alone or with sharding table and database;
+* Support SQL pass-through in independent use of replica query;
 * If there is write operation in the same thread and database connection, all the following read operations are from the primary database to ensure data consistency;
 * Forcible primary database route based on SQL Hint;
 
@@ -17,4 +17,4 @@ weight = 2
 * Data inconsistency caused by replication delay between databases;
 * Double or multiple primary databases to provide write operation;
 * The data for transaction across primary and replica nodes are inconsistent. 
-In the primary-replica replication model, the primary nodes need to be used for both reading and writing in the transaction.
+In the replica query model, the primary nodes need to be used for both reading and writing in the transaction.
diff --git a/docs/document/content/features/sharding/_index.en.md b/docs/document/content/features/sharding/_index.en.md
index c610b2d8eb..ce2ea36faa 100644
--- a/docs/document/content/features/sharding/_index.en.md
+++ b/docs/document/content/features/sharding/_index.en.md
@@ -11,13 +11,13 @@ The traditional solution that stores all the data in one concentrated node has h
 
 In performance, the relational database mostly uses B+ tree index. When the data amount exceeds the threshold, deeper index will increase the disk IO access number, and thereby, weaken the performance of query. In the same time, high concurrency requests also make the centralized database to be the greatest limitation of the system.
 
-In availability, capacity can be expanded at a relatively low cost and any extent with stateless service, which can make all the pressure, at last, fall on the database. But the single data node or simple primary-replica replication structure has been harder and harder to take these pressures. Therefore, database availability has become the key to the whole system.
+In availability, capacity can be expanded at a relatively low cost and any extent with stateless service, which can make all the pressure, at last, fall on the database. But the single data node or simple replica query structure has been harder and harder to take these pressures. Therefore, database availability has become the key to the whole system.
 
 From the aspect of operation costs, when the data in a database instance has reached above the threshold, DBA’s operation pressure will also increase. The time cost of data backup and data recovery will be more uncontrollable with increasing amount of data. Generally, it is a relatively reasonable range for the data in single database case to be within 1TB.
 
 Under the circumstance that traditional relational databases cannot satisfy the requirement of the Internet, there are more and more attempts to store the data in native distributed NoSQL. But its incompatibility with SQL and imperfection in ecosystem block it from defeating the relational database in the competition, so the relational database still holds an unshakable position.
 
-Sharding refers to splitting the data in one database and storing them in multiple tables and databases according to some certain standard, so that the performance and availability can be improved. Both methods can effectively avoid the query limitation caused by data exceeding affordable threshold. What’s more, database sharding can also effectively disperse TPS. Table sharding, though cannot ease the database pressure, can provide possibilities to transfer distributed transactions to local transactions, since cross-database upgrades are once involved, distributed transactions can turn pretty tricky sometimes. The use of multiple primary-replica replication sharding method can effectively avoid the data concentrating on one node and increase the architecture availability.
+Sharding refers to splitting the data in one database and storing them in multiple tables and databases according to some certain standard, so that the performance and availability can be improved. Both methods can effectively avoid the query limitation caused by data exceeding affordable threshold. What’s more, database sharding can also effectively disperse TPS. Table sharding, though cannot ease the database pressure, can provide possibilities to transfer distributed transactions to local transactions, since cross-database upgrades are once involved, distributed transactions can turn pretty tricky sometimes. The use of multiple replica query sharding method can effectively avoid the data concentrating on one node and increase the architecture availability.
 
 Splitting data through database sharding and table sharding is an effective method to deal with high TPS and mass amount data system, because it can keep the data amount lower than the threshold and evacuate the traffic. 
 Sharding method can be divided into vertical sharding and horizontal sharding.
diff --git a/docs/document/content/features/sharding/concept/configuration.en.md b/docs/document/content/features/sharding/concept/configuration.en.md
index 5fd4eee369..906ec537c3 100644
--- a/docs/document/content/features/sharding/concept/configuration.en.md
+++ b/docs/document/content/features/sharding/concept/configuration.en.md
@@ -5,7 +5,7 @@ weight = 3
 
 ## Sharding Rule
 
-The main entrance for Sharding rules includes the configurations of data source, tables, binding tables and primary-replica replication.
+The main entrance for Sharding rules includes the configurations of data source, tables, binding tables and replica query.
 
 ## Data Sources Configuration
 
diff --git a/docs/document/content/features/sharding/principle/execute.en.md b/docs/document/content/features/sharding/principle/execute.en.md
index 31c8e9593d..7ba9a8ccf0 100644
--- a/docs/document/content/features/sharding/principle/execute.en.md
+++ b/docs/document/content/features/sharding/principle/execute.en.md
@@ -70,7 +70,7 @@ For example, suppose one query needs to acquire two database connections from a
 To avoid the deadlock, ShardingSphere will go through synchronous processing when acquiring database connection. When creating execution units, it acquires all the database connections that this SQL requires for once with atomic method and reduces the possibility of acquiring only part of the resources. Due to the high operation frequency, locking the connection each time when acquiring it can decrease ShardingSphere's concurrency. Therefore, it has improved two aspects here:
 
 1. Avoid the setting that locking only takes one database connection each time. Because under this kind of circumstance, two requests waiting for each other will not happen, so there is no need for locking. 
-Most OLTP operations use sharding keys to route to the only data node, which will make the system in a totally unlocked state, thereby improve the concurrency efficiency further. In addition to routing to a single shard, primary-replica replication also belongs to this category.
+Most OLTP operations use sharding keys to route to the only data node, which will make the system in a totally unlocked state, thereby improve the concurrency efficiency further. In addition to routing to a single shard, replica query also belongs to this category.
 
 2. Only aim at MEMORY_STRICTLY mode to lock resources. When using CONNECTION_STRICTLY mode, all the query result sets will release database connection resources after loading them to the memory, so deadlock wait will not appear.
 
diff --git a/docs/document/content/features/test-engine/_index.cn.md b/docs/document/content/features/test-engine/_index.cn.md
index a03d3f9e20..32fec84f83 100644
--- a/docs/document/content/features/test-engine/_index.cn.md
+++ b/docs/document/content/features/test-engine/_index.cn.md
@@ -17,4 +17,4 @@ SQL解析单元测试全面覆盖SQL占位符和字面量维度。整合测试
 >
 >SQL-TYPE : 是 DAL，DCL，DDL，DML，DQL，TCL 中的某一个或者集合
 >
->SHARDING-TYPE : 是 db，dbtbl_with_primary_replica_replication，primary_replica_replication，tbl 中的某一个或者集合
+>SHARDING-TYPE : 是 db，dbtbl_with_replica_query，replica_query，tbl 中的某一个或者集合
diff --git a/docs/document/content/features/test-engine/_index.en.md b/docs/document/content/features/test-engine/_index.en.md
index 41ff152bc2..45b3d0209b 100644
--- a/docs/document/content/features/test-engine/_index.en.md
+++ b/docs/document/content/features/test-engine/_index.en.md
@@ -11,7 +11,7 @@ each engine is suit for H2、MySQL、PostgreSQL、SQLServer and Oracle.
 To make the test engine more easy to get start, all test engines in shardingsphere are designed to modify the configuration files to execute all assertions without any **Java code** modification.
 
 The SQL parsing unit test covers both SQL placeholder and literal dimension. 
-Integration test can be further divided into two dimensions of strategy and JDBC; the former one includes strategies as Sharding, table Sharding, database Sharding, and primary-replica replication while the latter one includes `Statement` and `PreparedStatement`.
+Integration test can be further divided into two dimensions of strategy and JDBC; the former one includes strategies as Sharding, table Sharding, database Sharding, and replica query while the latter one includes `Statement` and `PreparedStatement`.
 
 Therefore, one SQL can drive 5 kinds of database parsing * 2 kinds of parameter transmission modes + 5 kinds of databases * 5 kinds of Sharding strategies * 2 kinds of JDBC operation modes = 60 test cases, to enable ShardingSphere to achieve the pursuit of high quality.
 
@@ -19,4 +19,4 @@ Therefore, one SQL can drive 5 kinds of database parsing * 2 kinds of parameter
 >
 >SQL-TYPE : is one of or collection of dal,dcl，ddl，dml，dql，tcl
 >
->SHARDING-TYPE : is one of or collection of db，dbtbl_with_primary_replica_replication，primary_replica_replication，tbl
+>SHARDING-TYPE : is one of or collection of db，dbtbl_with_replica_query，replica_query，tbl
diff --git a/docs/document/content/features/test-engine/integration-test-engine.cn.md b/docs/document/content/features/test-engine/integration-test-engine.cn.md
index 31664fca38..801de5a3fb 100644
--- a/docs/document/content/features/test-engine/integration-test-engine.cn.md
+++ b/docs/document/content/features/test-engine/integration-test-engine.cn.md
@@ -33,7 +33,7 @@ Junit 中的 `Parameterized` 会聚合起所有的测试数据，并将测试数
 run.additional.cases=false
 
 # 分片策略，可指定多种策略
-sharding.rule.type=db,tbl,dbtbl_with_primary_replica_replication,primary_replica_replication
+sharding.rule.type=db,tbl,dbtbl_with_replica_query,replica_query
 
 # 要测试的数据库，可以指定多种数据库(H2,MySQL,Oracle,SQLServer,PostgreSQL)
 databases=MySQL,PostgreSQL
diff --git a/docs/document/content/features/test-engine/integration-test-engine.en.md b/docs/document/content/features/test-engine/integration-test-engine.en.md
index b1e3438349..d134cc7eba 100644
--- a/docs/document/content/features/test-engine/integration-test-engine.en.md
+++ b/docs/document/content/features/test-engine/integration-test-engine.en.md
@@ -32,7 +32,7 @@ Firstly, setup configuration file `/shardingsphere-test-suite/src/test/resources
 run.additional.cases=false
 
 # sharding rule, could define multiple rules
-sharding.rule.type=db,tbl,dbtbl_with_primary_replica_replication,primary_replica_replication
+sharding.rule.type=db,tbl,dbtbl_with_replica_query_,replica_query_
 
 # database type, could define multiple databases(H2,MySQL,Oracle,SQLServer,PostgreSQL)
 databases=MySQL,PostgreSQL
diff --git a/docs/document/content/features/test-engine/performance-test.cn.md b/docs/document/content/features/test-engine/performance-test.cn.md
index a454f62be0..ae01e242c6 100644
--- a/docs/document/content/features/test-engine/performance-test.cn.md
+++ b/docs/document/content/features/test-engine/performance-test.cn.md
@@ -130,7 +130,7 @@ dataSources:
     idleTimeoutMilliseconds: 60000
     maxLifetimeMilliseconds: 1800000
     maxPoolSize: 200
-primaryReplicaReplicationRule:
+replicaQueryRule:
   name: pr_ds
   primaryDataSourceName: primary_ds
   replicaDataSourceNames:
@@ -227,7 +227,7 @@ shardingRule:
   defaultDataSourceName: primary_ds_1
   defaultTableStrategy:
     none:
-  primaryReplicaReplicationRules:
+  replicaQueryRules:
     pr_ds_0:
       primaryDataSourceName: primary_ds_0
       replicaDataSourceNames:
diff --git a/docs/document/content/features/test-engine/performance-test.en.md b/docs/document/content/features/test-engine/performance-test.en.md
index 2ace021271..59ae08518e 100644
--- a/docs/document/content/features/test-engine/performance-test.en.md
+++ b/docs/document/content/features/test-engine/performance-test.en.md
@@ -6,7 +6,7 @@ weight = 5
 
 ## Target
 
-The performance of ShardingSphere-JDBC, ShardingSphere-Proxy and MySQL would be compared here. INSERT & UPDATE & DELETE which regarded as a set of associated operation and SELECT which focus on sharding optimization are used to evaluate performance for the basic scenarios (single route, primary-replica replication & encrypt & sharding, full route). While another set of associated operation, INSERT & SELECT & DELETE, is used to evaluate performance for primary-replica replication.
+The performance of ShardingSphere-JDBC, ShardingSphere-Proxy and MySQL would be compared here. INSERT & UPDATE & DELETE which regarded as a set of associated operation and SELECT which focus on sharding optimization are used to evaluate performance for the basic scenarios (single route, replica query & encrypt & sharding, full route). While another set of associated operation, INSERT & SELECT & DELETE, is used to evaluate performance for replica query.
 To achieve the result better, these tests are performed with jmeter which based on a certain amount of data with 20 concurrent threads for 30 minutes, and one MySQL has been deployed on one machine, while the scenario of MySQL used for comparison is deployed on one machine with one instance.
 
 ## Test Scenarios
@@ -16,12 +16,12 @@ To achieve the result better, these tests are performed with jmeter which based
 On the basis of one thousand data volume, four databases that are deployed on the same machine and each contains 1024 tables with `id` used for database sharding and `k` used for table sharding are designed for this scenario, single route select sql statement is chosen here.
 While as a comparison, MySQL runs with INSERT & UPDATE & DELETE statement and single route select sql statement on the basis of one thousand data volume.
 
-### Primary-Replica Replication
+### Replica Query
 
 One primary database and one replica database, which are deployed on different machines, are designed for this scenario based on ten thousand data volume.
 While as a comparison, MySQL runs with INSERT & SELECT & DELETE sql statement on the basis of ten thousand data volume.
 
-### Primary-Replica Replication & Encrypt & Sharding
+### Replica Query & Encrypt & Sharding
 
 On the basis of one thousand data volume, four databases that are deployed on different machines and each contains 1024 tables with `id` used for database sharding, `k` used for table sharding, `c` encrypted with aes and  `pad` encrypted with md5 are designed for this scenario, single route select sql statement is chosen here.
 While as a comparison, MySQL runs with INSERT & UPDATE & DELETE statement and single route select sql statement on the basis of one thousand data volume.
@@ -109,7 +109,7 @@ shardingRule:
       none:
 ```
 
-#### Primary-Replica Replication Configuration
+#### Replica Query Configuration
 
 ```yaml
 schemaName: sharding_db
@@ -131,14 +131,14 @@ dataSources:
     idleTimeoutMilliseconds: 60000
     maxLifetimeMilliseconds: 1800000
     maxPoolSize: 200
-primaryReplicaReplicationRule:
+replicaQueryRule:
   name: pr_ds
   primaryDataSourceName: primary_ds
   replicaDataSourceNames:
     - replica_ds_0
 ```
 
-#### Primary-Replica Replication & Encrypt & Sharding Configuration
+#### Replica Query & Encrypt & Sharding Configuration
 
 ```yaml
 schemaName: sharding_db
@@ -228,7 +228,7 @@ shardingRule:
   defaultDataSourceName: primary_ds_1
   defaultTableStrategy:
     none:
-  primaryReplicaReplicationRules:
+  replicaQueryRules:
     pr_ds_0:
       primaryDataSourceName: primary_ds_0
       replicaDataSourceNames:
diff --git a/docs/document/content/overview/_index.en.md b/docs/document/content/overview/_index.en.md
index 2322fe6f01..27f4636e1f 100644
--- a/docs/document/content/overview/_index.en.md
+++ b/docs/document/content/overview/_index.en.md
@@ -18,7 +18,7 @@ Aiming at reasonably making full use of the computation and storage capacity of
 As the cornerstone of many enterprises, relational database still takes a huge market share. Therefore, at current stage, we prefer to focus on its increment instead of a total overturn.
 
 Apache ShardingSphere begin to focus on pluggable architecture from version 5.x, features can be embedded into project flexibility.
-Currently, the features such as data sharding, primary-replica replication, consensus replication, data encrypt, shadow test, and SQL dialects / database protocols such as MySQL, PostgreSQL, SQLServer, Oracle supported are all weaved by plugins.
+Currently, the features such as data sharding, replica query, consensus replication, data encrypt, shadow test, and SQL dialects / database protocols such as MySQL, PostgreSQL, SQLServer, Oracle supported are all weaved by plugins.
 Developers can customize their own ShardingSphere just like building lego blocks. There are lots of SPI extensions for Apache ShardingSphere now and increase continuously.
 
 ShardingSphere became an [Apache](https://apache.org/index.html#projects-list) Top Level Project on April 16 2020.
@@ -104,7 +104,7 @@ Architects can adjust the system architecture to the most applicable one to curr
 ### Data Sharding
 
 * Database sharding & Table sharding
-* Primary-replica replication
+* Replica query
 * Sharding strategy customization
 * Centre-less Distributed primary key
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/_index.en.md
index 15348656d2..344e0071c7 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/_index.en.md
@@ -11,4 +11,4 @@ through which developers can quickly and clearly understand the functions provid
 This chapter is a configuration manual for ShardingSphere-JDBC, which can also be referred to as a dictionary if necessary.
 
 ShardingSphere-JDBC has provided 4 kinds of configuration methods for different situations. 
-By configuration, application developers can flexibly use data sharding, primary-replica replication, consensus replication, data encryption, shadow database or the combination of them.
+By configuration, application developers can flexibly use data sharding, replica query, consensus replication, data encryption, shadow database or the combination of them.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/primary-replica-replication.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/replica-query.cn.md
similarity index 72%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/primary-replica-replication.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/replica-query.cn.md
index 68def1d5b4..739b529a29 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/primary-replica-replication.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/replica-query.cn.md
@@ -5,18 +5,18 @@ weight = 2
 
 ## 配置入口
 
-类名称：PrimaryReplicaReplicationRuleConfiguration
+类名称：ReplicaQueryRuleConfiguration
 
 可配置属性：
 
-| *名称*             | *数据类型*                                                         | *说明*            |
-| ----------------- | ------------------------------------------------------------------ | ----------------- |
-| dataSources (+)   | Collection\<PrimaryReplicaReplicationDataSourceRuleConfiguration\> | 主从数据源配置      |
-| loadBalancers (*) | Map\<String, ShardingSphereAlgorithmConfiguration\>                | 从库负载均衡算法配置 |
+| *名称*             | *数据类型*                                             | *说明*            |
+| ----------------- | ----------------------------------------------------- | ----------------- |
+| dataSources (+)   | Collection\<ReplicaQueryDataSourceRuleConfiguration\> | 主从数据源配置      |
+| loadBalancers (*) | Map\<String, ShardingSphereAlgorithmConfiguration\>   | 从库负载均衡算法配置 |
 
 ## 主从数据源配置
 
-类名称：PrimaryReplicaReplicationDataSourceRuleConfiguration
+类名称：ReplicaQueryDataSourceRuleConfiguration
 
 可配置属性：
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/primary-replica-replication.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/replica-query.en.md
similarity index 59%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/primary-replica-replication.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/replica-query.en.md
index 36add84a13..ef2f9b6f6a 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/primary-replica-replication.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/replica-query.en.md
@@ -1,28 +1,28 @@
 +++
-title = "Primary-Replica Replication"
+title = "Replica Query"
 weight = 2
 +++
 
 ## Root Configuration
 
-Class name: PrimaryReplicaReplicationRuleConfiguration
+Class name: ReplicaQueryRuleConfiguration
 
 Attributes:
 
-| *Name*            | *DataType*                                                         | *Description*                                                        |
-| ----------------- | ------------------------------------------------------------------ | -------------------------------------------------------------------- |
-| dataSources (+)   | Collection\<PrimaryReplicaReplicationDataSourceRuleConfiguration\> | Data sources of primary and replicas                                 |
-| loadBalancers (*) | Map\<String, ShardingSphereAlgorithmConfiguration\>                | Load balance algorithm name and configurations of replica data sources |
+| *Name*            | *DataType*                                            | *Description*                                                          |
+| ----------------- | ----------------------------------------------------- | ---------------------------------------------------------------------- |
+| dataSources (+)   | Collection\<ReplicaQueryDataSourceRuleConfiguration\> | Data sources of primary and replicas                                   |
+| loadBalancers (*) | Map\<String, ShardingSphereAlgorithmConfiguration\>   | Load balance algorithm name and configurations of replica data sources |
 
-## Primary-Replica Replication Data Source Configuration
+## Replica Query Data Source Configuration
 
-Class name: PrimaryReplicaReplicationDataSourceRuleConfiguration
+Class name: ReplicaQueryDataSourceRuleConfiguration
 
 Attributes:
 
 | *Name*                     | *DataType*           | *Description*                                  | *Default Value*                    |
 | -------------------------- | -------------------- | ---------------------------------------------- | ---------------------------------- |
-| name                       | String               | Primary-replica replication data source name   | -                                  |
+| name                       | String               | Replica query data source name                 | -                                  |
 | primaryDataSourceName      | String               | Primary sources source name                    | -                                  |
 | replicaDataSourceNames (+) | Collection\<String\> | Replica sources source name list               | -                                  |
 | loadBalancerName (?)       | String               | Load balance algorithm name of replica sources | Round robin load balance algorithm |
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/primary-replica-replication.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/primary-replica-replication.cn.md
deleted file mode 100644
index 59035ed544..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/primary-replica-replication.cn.md
+++ /dev/null
@@ -1,20 +0,0 @@
-+++
-title = "读写分离"
-weight = 2
-+++
-
-## 配置项说明
-
-```properties
-spring.shardingsphere.datasource.names= # 省略数据源配置
-
-spring.shardingsphere.rules.primary-replica-replication.data-sources.<primary-replica-replication-data-source-name>.primary-data-source-name= # 主数据源名称
-spring.shardingsphere.rules.primary-replica-replication.data-sources.<primary-replica-replication-data-source-name>.replica-data-source-names= # 从数据源名称，多个从数据源用逗号分隔
-spring.shardingsphere.rules.primary-replica-replication.data-sources.<primary-replica-replication-data-source-name>.load-balancer-name= # 负载均衡算法名称
-
-# 负载均衡算法配置
-spring.shardingsphere.rules.primary-replica-replication.load-balancers.<load-balance-algorithm-name>.type= # 负载均衡算法类型
-spring.shardingsphere.rules.primary-replica-replication.load-balancers.<load-balance-algorithm-name>.props.xxx= # 负载均衡算法属性配置
-```
-
-算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/primary-replica-replication.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/primary-replica-replication.en.md
deleted file mode 100644
index 6265b2c031..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/primary-replica-replication.en.md
+++ /dev/null
@@ -1,20 +0,0 @@
-+++
-title = "Primary-Replica Replication"
-weight = 2
-+++
-
-## Configuration Item Explanation
-
-```properties
-spring.shardingsphere.datasource.names= # Omit data source configuration
-
-spring.shardingsphere.rules.primary-replica-replication.data-sources.<primary-replica-replication-data-source-name>.primary-data-source-name= # Primary data source name
-spring.shardingsphere.rules.primary-replica-replication.data-sources.<primary-replica-replication-data-source-name>.replica-data-source-names= # Replica data source names, multiple data source names separated with comma
-spring.shardingsphere.rules.primary-replica-replication.data-sources.<primary-replica-replication-data-source-name>.load-balancer-name= # Load balance algorithm name
-
-# Load balance algorithm configuration
-spring.shardingsphere.rules.primary-replica-replication.load-balancers.<load-balance-algorithm-name>.type= # Load balance algorithm type
-spring.shardingsphere.rules.primary-replica-replication.load-balancers.<load-balance-algorithm-name>.props.xxx= # Load balance algorithm properties
-```
-
-Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance) for more details about type of algorithm.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/replica-query.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/replica-query.cn.md
new file mode 100644
index 0000000000..ef61350cd3
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/replica-query.cn.md
@@ -0,0 +1,20 @@
++++
+title = "读写分离"
+weight = 2
++++
+
+## 配置项说明
+
+```properties
+spring.shardingsphere.datasource.names= # 省略数据源配置
+
+spring.shardingsphere.rules.replica-query.data-sources.<replica-query-data-source-name>.primary-data-source-name= # 主数据源名称
+spring.shardingsphere.rules.replica-query.data-sources.<replica-query-data-source-name>.replica-data-source-names= # 从数据源名称，多个从数据源用逗号分隔
+spring.shardingsphere.rules.replica-query.data-sources.<replica-query-data-source-name>.load-balancer-name= # 负载均衡算法名称
+
+# 负载均衡算法配置
+spring.shardingsphere.rules.replica-query.load-balancers.<load-balance-algorithm-name>.type= # 负载均衡算法类型
+spring.shardingsphere.rules.replica-query.load-balancers.<load-balance-algorithm-name>.props.xxx= # 负载均衡算法属性配置
+```
+
+算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/replica-query.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/replica-query.en.md
new file mode 100644
index 0000000000..3b6f2eca41
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/replica-query.en.md
@@ -0,0 +1,20 @@
++++
+title = "Replica Query"
+weight = 2
++++
+
+## Configuration Item Explanation
+
+```properties
+spring.shardingsphere.datasource.names= # Omit data source configuration
+
+spring.shardingsphere.rules.replica-query.data-sources.<replica-query-data-source-name>.primary-data-source-name= # Primary data source name
+spring.shardingsphere.rules.replica-query.data-sources.<replica-query-data-source-name>.replica-data-source-names= # Replica data source names, multiple data source names separated with comma
+spring.shardingsphere.rules.replica-query.data-sources.<replica-query-data-source-name>.load-balancer-name= # Load balance algorithm name
+
+# Load balance algorithm configuration
+spring.shardingsphere.rules.replica-query.load-balancers.<load-balance-algorithm-name>.type= # Load balance algorithm type
+spring.shardingsphere.rules.replica-query.load-balancers.<load-balance-algorithm-name>.props.xxx= # Load balance algorithm properties
+```
+
+Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance) for more details about type of algorithm.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/primary-replica-replication.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/replica-query.cn.md
similarity index 79%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/primary-replica-replication.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/replica-query.cn.md
index 13c2d124f1..5c82ae194d 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/primary-replica-replication.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/replica-query.cn.md
@@ -5,16 +5,16 @@ weight = 2
 
 ## 配置项说明
 
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/primary-replica-replication/primary-replica-replication-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/primary-replica-replication/primary-replica-replication-5.0.0.xsd)
+命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/replica-query/replica-query-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/replica-query/replica-query-5.0.0.xsd)
 
-\<primary-replica-replication:rule />
+\<replica-query:rule />
 
 | *名称*                | *类型* | *说明*           |
 | -------------------- | ------ | --------------- |
 | id                   | 属性   | Spring Bean Id   |
 | data-source-rule (+) | 标签   | 读写分离数据源规则配置 |
 
-\<primary-replica-replication:data-source-rule />
+\<replica-query:data-source-rule />
 
 | *名称*                     | *类型* | *说明*                          |
 | -------------------------- | ----- | ------------------------------- |
@@ -24,7 +24,7 @@ weight = 2
 | load-balance-algorithm-ref | 属性  | 负载均衡算法名称                   |
 
 
-\<primary-replica-replication:load-balance-algorithm />
+\<replica-query:load-balance-algorithm />
 
 | *名称*    | *类型* | *说明*            |
 | --------- | ----- | ----------------- |
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/primary-replica-replication.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/replica-query.en.md
similarity index 72%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/primary-replica-replication.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/replica-query.en.md
index 09a36fcbba..89fc775bd3 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/primary-replica-replication.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/replica-query.en.md
@@ -1,20 +1,20 @@
 +++
-title = "Primary-Replica Replication"
+title = "Replica Query"
 weight = 2
 +++
 
 ## Configuration Item Explanation
 
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/primary-replica-replication/primary-replica-replication-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/primary-replica-replication/primary-replica-replication-5.0.0.xsd)
+Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/replica-query/replica-query-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/replica-query/replica-query-5.0.0.xsd)
 
-\<primary-replica-replication:rule />
+\<replica-query:rule />
 
-| *Name*               | *Type*    | *Description*                                              |
-| -------------------- | --------- | ---------------------------------------------------------- |
-| id                   | Attribute | Spring Bean Id                                             |
-| data-source-rule (+) | Tag       | Primary-replica replication data source rule configuration |
+| *Name*               | *Type*    | *Description*                                |
+| -------------------- | --------- | -------------------------------------------- |
+| id                   | Attribute | Spring Bean Id                               |
+| data-source-rule (+) | Tag       | Replica query data source rule configuration |
 
-\<primary-replica-replication:data-source-rule />
+\<replica-query:data-source-rule />
 
 | *Name*                     | *Type*     | *Description*                                                              |
 | -------------------------- | ---------- | -------------------------------------------------------------------------- |
@@ -23,7 +23,7 @@ Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/primary-repli
 | replica-data-source-names  | Attribute  | Replica data source names, multiple data source names separated with comma |
 | load-balance-algorithm-ref | Attribute  | Load balance algorithm name                                                |
 
-\<primary-replica-replication:load-balance-algorithm />
+\<replica-query:load-balance-algorithm />
 
 | *Name*    | *Type*     | *Description*                     |
 | --------- | ---------- | --------------------------------- |
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.en.md
index f700909dc1..a12e2a27e1 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.en.md
@@ -62,7 +62,7 @@ try (
 ### Data Source Configuration
 
 It is divided into single data source configuration and multi data source configuration.
-Single data source configuration used for data encryption rules; and multi data source configuration used for fragmentation, primary-replica replication and other rules.
+Single data source configuration used for data encryption rules; and multi data source configuration used for fragmentation, replica query and other rules.
 If features such as encryption and sharding are used in combination, a multi data source configuration should be used.
 
 #### Single Data Source Configuration
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/primary-replica-replication.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/replica-query.cn.md
similarity index 96%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/primary-replica-replication.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/replica-query.cn.md
index e135684940..42accc45ba 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/primary-replica-replication.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/replica-query.cn.md
@@ -9,7 +9,7 @@ weight = 2
 dataSources: # 省略数据源配置
 
 rules:
-- !PRIMARY_REPLICA_REPLICATION
+- !REPLICA_QUERY
   dataSources:
     <data-source-name> (+): # 读写分离逻辑数据源名称
       primaryDataSourceName: # 主库数据源名称
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/primary-replica-replication.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/replica-query.en.md
similarity index 83%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/primary-replica-replication.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/replica-query.en.md
index 552740cf95..82c89e6b37 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/primary-replica-replication.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/replica-query.en.md
@@ -1,5 +1,5 @@
 +++
-title = "Primary-Replica Replication"
+title = "Replica Query"
 weight = 2
 +++
 
@@ -9,9 +9,9 @@ weight = 2
 dataSource: # Omit data source configuration
 
 rules:
-- !PRIMARY_REPLICA_REPLICATION
+- !REPLICA_QUERY
   dataSources:
-    <data-source-name> (+): # Logic data source name of primary-replica replication
+    <data-source-name> (+): # Logic data source name of replica query
       primaryDataSourceName: # Primary data source name
       replicaDataSourceNames: 
         - <replica-data-source-name> (+) # Replica data source name
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace.cn.md
index 7a13b6bf3d..874509ac4b 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace.cn.md
@@ -45,7 +45,7 @@ weight = 4
      <governance:reg-center id="regCenter" type="Zookeeper" server-lists="localhost:2181" />
      <governance:config-center id="configCenter" type="ZooKeeper" server-lists="localhost:2182" />
      <governance:data-source id="shardingDatabasesTablesDataSource" data-source-names="demo_ds_0, demo_ds_1" reg-center-ref="regCenter" config-center-ref="configCenter" rule-refs="shardingRule" overwrite="true" />
-     <governance:data-source id="primaryReplicaReplicationDataSource" data-source-names="demo_primary_ds, demo_replica_ds_0, demo_replica_ds_1" reg-center-ref="regCenter" config-center-ref="configCenter" rule-refs="primaryReplicaRule" overwrite="true" />
+     <governance:data-source id="replicaQueryDataSource" data-source-names="demo_primary_ds, demo_replica_ds_0, demo_replica_ds_1" reg-center-ref="regCenter" config-center-ref="configCenter" rule-refs="replicaQueryRule" overwrite="true" />
      <governance:data-source id="encryptDataSource" data-source-names="demo_ds" reg-center-ref="regCenter" config-center-ref="configCenter" rule-refs="encryptRule" overwrite="true" >
         <props>
             <prop key="query-with-cipher-column">true</prop>
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/sharding/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/sharding/_index.en.md
index 3ac5b24922..e1bab0282a 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/sharding/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/sharding/_index.en.md
@@ -6,7 +6,7 @@ chapter = true
 
 Data sharding is the basic capability of Apache ShardingSphere. 
 This section uses data sharding as an example.
-The usage of functions such as primary-replica replication, consensus replication, data encryption, shadow database is completely consistent with data sharding, as long as the corresponding rules are configured. 
+The usage of functions such as replica query, consensus replication, data encryption, shadow database is completely consistent with data sharding, as long as the corresponding rules are configured. 
 Multiple rules can be appended.
 
 Please refer to [Configuration Manual](/en/user-manual/shardingsphere-jdbc/configuration/) for more details.
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/configuration/_index.en.md b/docs/document/content/user-manual/shardingsphere-proxy/configuration/_index.en.md
index 500a23ab09..3038b9a139 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/configuration/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/configuration/_index.en.md
@@ -10,6 +10,6 @@ through which developer can quickly and clearly understand the functions provide
 This chapter is a configuration manual for ShardingSphere-Proxy, which can also be referred to as a dictionary if necessary.
 
 ShardingSphere-Proxy only provided YAML configuration. 
-By configuration, application developers can flexibly use data sharding, primary-replica replication, consensus replication, data encryption, shadow database or the combination of them.
+By configuration, application developers can flexibly use data sharding, replica query, consensus replication, data encryption, shadow database or the combination of them.
 
 Rule configuration keeps consist with YAML configuration of ShardingSphere-JDBC.
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/configuration/authentication.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/configuration/authentication.cn.md
index 0ddebf94cd..81c9793b8d 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/configuration/authentication.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/configuration/authentication.cn.md
@@ -13,5 +13,5 @@ authentication:
       password: root # 自定义用户名
     sharding: # 自定义用户名
       password: sharding # 自定义用户名
-      authorizedSchemas: sharding_db, primary_replica_replication_db # 该用户授权可访问的数据库，多个用逗号分隔。缺省将拥有 root 权限，可访问全部数据库。
+      authorizedSchemas: sharding_db, replica_query_db # 该用户授权可访问的数据库，多个用逗号分隔。缺省将拥有 root 权限，可访问全部数据库。
 ```
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/configuration/authentication.en.md b/docs/document/content/user-manual/shardingsphere-proxy/configuration/authentication.en.md
index 5a04a207a0..3b20bf88b5 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/configuration/authentication.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/configuration/authentication.en.md
@@ -12,5 +12,5 @@ authentication:
       password: root # Self-defined password
     sharding: # Self-defined username
       password: sharding # Self-defined password
-      authorizedSchemas: sharding_db, primary_replica_replication_db # Schemas authorized to this user, please use commas to connect multiple schemas. Default authorized schemas is all of the schemas.
+      authorizedSchemas: sharding_db, replica_query_db # Schemas authorized to this user, please use commas to connect multiple schemas. Default authorized schemas is all of the schemas.
 ```
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/usage/startup.en.md b/docs/document/content/user-manual/shardingsphere-proxy/usage/startup.en.md
index f519adc31e..e52cc7d6a9 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/usage/startup.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/usage/startup.en.md
@@ -7,7 +7,7 @@ weight = 1
 
 1. Download the latest version of ShardingSphere-Proxy.
 1. If users use docker, they can implement `docker pull shardingsphere/shardingsphere-proxy` to get the clone. Please refer to [Docker Clone](/en/user-manual/shardingsphere-proxy/docker/) for more details.
-1. After the decompression, revise `conf/server.yaml` and documents begin with `config-` prefix, `conf/config-xxx.yaml` for example, to configure sharding rules and primary-replica replication rules. Please refer to [Configuration Manual](/en/user-manual/shardingsphere-proxy/configuration/) for the configuration method.
+1. After the decompression, revise `conf/server.yaml` and documents begin with `config-` prefix, `conf/config-xxx.yaml` for example, to configure sharding rules and replica query rules. Please refer to [Configuration Manual](/en/user-manual/shardingsphere-proxy/configuration/) for the configuration method.
 1. Please run `bin/start.sh` for Linux operating system; run `bin/start.bat` for Windows operating system to start ShardingSphere-Proxy. To configure start port and document location, please refer to [Quick Start](/en/quick-start/shardingsphere-proxy-quick-start/).
 
 ## Using PostgreSQL
diff --git a/docs/document/content/user-manual/shardingsphere-ui/usage/rule-config.en.md b/docs/document/content/user-manual/shardingsphere-ui/usage/rule-config.en.md
index a8e977435b..5044ee654e 100644
--- a/docs/document/content/user-manual/shardingsphere-ui/usage/rule-config.en.md
+++ b/docs/document/content/user-manual/shardingsphere-ui/usage/rule-config.en.md
@@ -5,7 +5,7 @@ weight = 3
 
 ## Rule Config
 
-+ After added and activated a registry center, the configuration of all data sources in the current active registry center can be obtained, including data sharding, primary-replica replication, properties, and so on.
++ After added and activated a registry center, the configuration of all data sources in the current active registry center can be obtained, including data sharding, replica query, properties, and so on.
 
 + The configuration can be modified by the YAML format.
 
diff --git a/docs/document/static/img/read-write-split/read-write-split.png b/docs/document/static/img/replica-query/replica-query-standalone.png
similarity index 100%
rename from docs/document/static/img/read-write-split/read-write-split.png
rename to docs/document/static/img/replica-query/replica-query-standalone.png
diff --git a/docs/document/static/img/read-write-split/sharding-read-write-split.png b/docs/document/static/img/replica-query/sharding-and-replica-query.png
similarity index 100%
rename from docs/document/static/img/read-write-split/sharding-read-write-split.png
rename to docs/document/static/img/replica-query/sharding-and-replica-query.png
