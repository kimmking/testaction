commit 49362c016d8c3737f93a5f8fa1bf568a6835ec0e
Author: Juan Pan(Trista) <panjuan@apache.org>
Date:   Sun Sep 27 18:05:11 2020 +0800

    Update sharding doc (#7625)

diff --git a/docs/document/content/features/sharding/concept/sharding.cn.md b/docs/document/content/features/sharding/concept/sharding.cn.md
index 744f8cf9a0..80931b9ffe 100644
--- a/docs/document/content/features/sharding/concept/sharding.cn.md
+++ b/docs/document/content/features/sharding/concept/sharding.cn.md
@@ -17,13 +17,9 @@ SQL 中如果无分片字段，将执行全路由，性能较差。
 目前提供4种分片算法。
 由于分片算法和业务实现紧密相关，因此并未提供内置分片算法，而是通过分片策略将各种场景提炼出来，提供更高层级的抽象，并提供接口让应用开发者自行实现分片算法。
 
-- 精确分片算法
+- 标准分片算法
 
-对应 PreciseShardingAlgorithm，用于处理使用单一键作为分片键的 `=` 与 `IN` 进行分片的场景。需要配合 StandardShardingStrategy 使用。
-
-- 范围分片算法
-
-对应 RangeShardingAlgorithm，用于处理使用单一键作为分片键的 `BETWEEN AND`、`>`、`<`、`>=`、`<=`进行分片的场景。需要配合 StandardShardingStrategy 使用。
+对应 StandardShardingAlgorithm，用于处理使用单一键作为分片键的 `=`、`IN`、`BETWEEN AND`、`>`、`<`、`>=`、`<=`进行分片的场景。需要配合 StandardShardingStrategy 使用。
 
 - 复合分片算法
 
@@ -49,12 +45,6 @@ RangeShardingAlgorithm 是可选的，用于处理 `BETWEEN AND`, `>`, `<`, `>=`
 对应 ComplexShardingStrategy。复合分片策略。提供对 SQL 语句中的 `=`, `>`, `<`, `>=`, `<=`, `IN` 和 `BETWEEN AND` 的分片操作支持。
 ComplexShardingStrategy 支持多分片键，由于多分片键之间的关系复杂，因此并未进行过多的封装，而是直接将分片键值组合以及分片操作符透传至分片算法，完全由应用开发者实现，提供最大的灵活度。
 
-- 行表达式分片策略
-
-对应 InlineShardingStrategy。使用 Groovy 的表达式，提供对 SQL 语句中的 `=` 和 `IN` 的分片操作支持，只支持单分片键。
-对于简单的分片算法，可以通过简单的配置使用，从而避免繁琐的 Java 代码开发，如: `t_user_$->{u_id % 8}` 表示 `t_user` 表根据 `u_id` 模 8，而分成 8 张表，表名称为 `t_user_0` 到 `t_user_7`。
-详情请参见[行表达式](/cn/features/sharding/concept/inline-expression/)。
-
 - Hint分片策略
 
 对应 HintShardingStrategy。通过 Hint 指定分片值而非从 SQL 中提取分片值的方式进行分片的策略。
diff --git a/docs/document/content/features/sharding/concept/sharding.en.md b/docs/document/content/features/sharding/concept/sharding.en.md
index f1c489a645..d7be050589 100644
--- a/docs/document/content/features/sharding/concept/sharding.en.md
+++ b/docs/document/content/features/sharding/concept/sharding.en.md
@@ -19,13 +19,9 @@ Currently, 4 kinds of sharding algorithms are available.
 Since the sharding algorithm and business achievement are closely related, it extracts all kinds of scenarios by sharding strategies, instead of providing built-in sharding algorithms. 
 Therefore, it can provide higher abstraction and the interface for developers to implement sharding algorithm by themselves.
 
-- Precise Sharding Algorithm
+- Standard Sharding Algorithm
 
-`PreciseShardingAlgorithm` is to process the sharding case in which single sharding keys `=` and `IN` are used; `StandardShardingStrategy` needs to be used together.
-
-- Range Sharding Algorithm
-
-`RangeShardingAlgorithm` is to process the sharding case in which single sharding key `BETWEEN AND`、`>`、`<`、`>=`、`<=` is used; `StandardShardingStrategy` needs to be used together.
+`StandardShardingAlgorithm` is to process the sharding case in which single sharding keys `=`, `IN`, `BETWEEN AND`, `>`, `<`, `>=`, `<=` are used; `StandardShardingStrategy` needs to be used together.
 
 - Complex Keys Sharding Algorithm
 
@@ -55,13 +51,6 @@ Only sharding key + sharding algorithm, i.e., the sharding strategy, can be used
 `ComplexShardingStrategy` supports multiple sharding keys, but since their relationships are so complex that there is not too much encapsulation, 
 the combination of sharding keys and sharding operators are in the algorithm interface and achieved by developers with the most flexibility.
 
-- Inline Sharding Strategy
-
-With Groovy expressions, `InlineShardingStrategy` provides single-key support for the sharding operation of `=` and `IN` in SQL. 
-Simple sharding algorithms can be used through a simple configuration to avoid laborious Java code developments. 
-For example, `t_user_$->{u_id % 8}` means table t_user is divided into 8 tables according to u_id, with table names from `t_user_0` to `t_user_7`.
-Please refer to [Inline Expression](/en/features/sharding/concept/inline-expression/) for more details.
-
 - Hint Sharding Strategy
 
 `HintShardingStrategy` refers to the sharding strategy which get sharding values by hint rather than extracted from SQL.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding.cn.md
index 1e75adbcb7..a6cdb70d44 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding.cn.md
@@ -65,6 +65,10 @@ Apache ShardingSphere 内置的标准分片算法实现类包括：
 
 ### 行表达式分片算法
 
+使用 Groovy 的表达式，提供对 SQL 语句中的 `=` 和 `IN` 的分片操作支持，只支持单分片键。
+对于简单的分片算法，可以通过简单的配置使用，从而避免繁琐的 Java 代码开发，如: `t_user_$->{u_id % 8}` 表示 `t_user` 表根据 `u_id` 模 8，而分成 8 张表，表名称为 `t_user_0` 到 `t_user_7`。
+详情请参见[行表达式](/cn/features/sharding/concept/inline-expression/)。
+
 类型：INLINE
 
 可配置属性：
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding.en.md
index 6967b4c272..5bb22f49df 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding.en.md
@@ -65,6 +65,11 @@ Apache ShardingSphere built-in standard sharding algorithm are:
 
 ### Inline Sharding Algorithm
 
+With Groovy expressions, `InlineShardingStrategy` provides single-key support for the sharding operation of `=` and `IN` in SQL. 
+Simple sharding algorithms can be used through a simple configuration to avoid laborious Java code developments. 
+For example, `t_user_$->{u_id % 8}` means table t_user is divided into 8 tables according to u_id, with table names from `t_user_0` to `t_user_7`.
+Please refer to [Inline Expression](/en/features/sharding/concept/inline-expression/) for more details.
+
 Type: INLINE
 
 Attributes:
