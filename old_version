commit 5987a982d41e8ea83583496fefba876749dcc267
Author: Liang Zhang <terrymanu@163.com>
Date:   Fri Sep 25 06:56:48 2020 +0800

    Rename primary-replica replication for doc (#7593)
    
    * Rename ms to primary_replica_replication
    
    * Rename master-slave to primary-replica-replication
    
    * Rename masterslave to primary replica replication
    
    * Rename master slave to primary replica replication
    
    * Rename master slave to primary replica replication
    
    * Rename master slave to primary replica replication
    
    * rename read-write-split to primary-replica replication

diff --git a/docs/blog/content/material/alpha.en.md b/docs/blog/content/material/alpha.en.md
index b903a99cd1..c3055e23d4 100644
--- a/docs/blog/content/material/alpha.en.md
+++ b/docs/blog/content/material/alpha.en.md
@@ -10,7 +10,7 @@ Within a few months ElasticJob as the subproject of Apache ShardingSphere has fi
 ### Background
 ElasticJob (https://github.com/apache/shardingsphere-elasticjob) is a distributed scheduling solution for internet ecology and massive tasks. ElasticJob consisting of two separate subprojects, ElasticJob-Lite and ElasticJob-Cloud. It was born in 2015, at that time the industry had outstanding job scheduling library such as QuartZ, but lacked of exploration at distributed field. The lack of distributed scheduling cloud platform products has caused ElasticJob to attract attention from the beginning. It effectively makes up for the shortcomings of operations in the distributed field, and provides a one-stop automated operation and maintenance management and control terminal. Each product uses a unified operation API. Developers only need to develop once and deploy at will.
 
-In the technology selection for ElasticJob, it chose to stand on the shoulders of giants instead of reinvent the wheel. It perfectly combines the standard job scheduling library QuartZ, , and ZooKeeper, a weapon for distributed coordination, to quickly and stably build a new concept of distributed scheduling framework.
+In the technology selection for ElasticJob, it chose to stand on the shoulders of giants instead of reinvent the wheel. It perfectly combines the standard job scheduling library QuartZ, and ZooKeeper, a weapon for distributed coordination, to quickly and stably build a new concept of distributed scheduling framework.
 
 ### ElasticJob scheduling model
 The scheduling model of ElasticJob is divided into in-process scheduling ElasticJob-Lite, which supports thread-level scheduling, and ElasticJob-Cloud, which supports process-level scheduling.
@@ -27,7 +27,7 @@ The architecture diagram is shown below:
 
 ![](https://shardingsphere.apache.org/blog/img/alpha1.jpg)
 
-It can be seen from the figure that the distributed job node of ElasticJob-Lite obtains the master node through election, and shards through the master node. After the fragmentation is completed, the master node and the slave node are the same, and both execute tasks in a self-scheduled manner. 
+It can be seen from the figure that the distributed job node of ElasticJob-Lite obtains the master node through election, and shards through the master node. After the fragmentation is completed, the master node and the replica node are the same, and both execute tasks in a self-scheduled manner. 
 
 **Process level scheduling**
 
diff --git a/docs/blog/content/material/proxy.en.md b/docs/blog/content/material/proxy.en.md
index 4d2e91e878..eaf0d02c82 100644
--- a/docs/blog/content/material/proxy.en.md
+++ b/docs/blog/content/material/proxy.en.md
@@ -36,7 +36,7 @@ Comparison with Sharding-JDBC & Sharding-Sidecar:
 
 ![](https://shardingsphere.apache.org/blog/img/comparsion_en.jpg)
 
-They can work individually and cooperate each other, which achieve same purpose through different architecture and point of penetration. Its core functions are based on same implementation, such as data sharding, read-write splitting and base transaction. 
+They can work individually and cooperate each other, which achieve same purpose through different architecture and point of penetration. Its core functions based on same implementation, such as data sharding, primary-replica replication and base transaction. 
 
 For instance, Sharding-JDBC highly supports many kinds of ORM framework for Java development technology stack scenarios. It's quite convenient to import data sharding ability to your system. DBA retrieves and manages data by deploying a Sharding-Proxy instance.
 
@@ -50,7 +50,7 @@ The whole architecture can be divided into three components: Frontend, Core-modu
 
 *   Core-module: After getting decoded command of MySQL, it starts to parse/rewrite/route/conflate SQL through Sharding-Core.
    
-*   Backend:  it's interacted with real database by Hikari pool of BIO. Its performance declines on condition of one master more slaves or large scale to database cluster in the way of BIO, so we will provide way of NIO to connect real database in the future.
+*   Backend:  it's interacted with real database by Hikari pool of BIO. Its performance declines on condition of one primary more replicas or large scale to database cluster in the way of BIO, so we will provide way of NIO to connect real database in the future.
   
 
 ![](https://shardingsphere.apache.org/blog/img/proxy_architecture1_en.jpg)
diff --git a/docs/community/content/contribute/document-contributor.cn.md b/docs/community/content/contribute/document-contributor.cn.md
index 09111fdb68..6f298ee15a 100644
--- a/docs/community/content/contribute/document-contributor.cn.md
+++ b/docs/community/content/contribute/document-contributor.cn.md
@@ -44,7 +44,7 @@ shardingsphere
   │  │  │  ├─encrypt
   │  │  │  ├─governance
   │  │  │  ├─pluggable-architecture
-  │  │  │  ├─read-write-split
+  │  │  │  ├─primary-replica-replication
   │  │  │  ├─replica
   │  │  │  ├─scaling
   │  │  │  ├─shadow
diff --git a/docs/community/content/contribute/document-contributor.en.md b/docs/community/content/contribute/document-contributor.en.md
index 2eef187ffa..bf83ead81b 100644
--- a/docs/community/content/contribute/document-contributor.en.md
+++ b/docs/community/content/contribute/document-contributor.en.md
@@ -43,7 +43,7 @@ shardingsphere
   │  │  │  ├─encrypt
   │  │  │  ├─governance
   │  │  │  ├─pluggable-architecture
-  │  │  │  ├─read-write-split
+  │  │  │  ├─primary-replica-replication
   │  │  │  ├─replica
   │  │  │  ├─scaling
   │  │  │  ├─shadow
diff --git a/docs/document/content/dev-manual/configuration.cn.md b/docs/document/content/dev-manual/configuration.cn.md
index 2033e7c4a3..cc10299a8b 100644
--- a/docs/document/content/dev-manual/configuration.cn.md
+++ b/docs/document/content/dev-manual/configuration.cn.md
@@ -11,13 +11,13 @@ chapter = true
 | ------------------------- | -------------------------------------- |
 | ShardingSphereRuleBuilder | 用于将用户配置转化为规则对象               |
 
-| *已知实现类*                    | *详细说明*                                      |
-| ------------------------------ | ---------------------------------------------- |
-| ShardingRuleBuilder            | 用于将分片用户配置转化为分片规则对象               |
-| MasterSlaveRuleBuilder         | 用于将读写分离用户配置转化为读写分离规则对象        |
-| ConsensusReplicationRuleBuilder| 用于将强一致多副本用户配置转化为强一致多副本规则对象 |
-| EncryptRuleBuilder             | 用于将加密用户配置转化为加密规则对象               |
-| ShadowRuleBuilder              | 用于将影子库用户配置转化为影子库规则对象           |
+| *已知实现类*                          | *详细说明*                                      |
+| ------------------------------------ | ---------------------------------------------- |
+| ShardingRuleBuilder                  | 用于将分片用户配置转化为分片规则对象               |
+| PrimaryReplicaReplicationRuleBuilder | 用于将读写分离用户配置转化为读写分离规则对象        |
+| ConsensusReplicationRuleBuilder      | 用于将强一致多副本用户配置转化为强一致多副本规则对象 |
+| EncryptRuleBuilder                   | 用于将加密用户配置转化为加密规则对象               |
+| ShadowRuleBuilder                    | 用于将影子库用户配置转化为影子库规则对象           |
 
 ## YamlRuleConfigurationSwapper
 
@@ -25,13 +25,13 @@ chapter = true
 | --------------------------------------- | ------------------------------------------ |
 | YamlRuleConfigurationSwapper            | 用于将 YAML 配置转化为标准用户配置             |
 
-| *已知实现类*                                      | *详细说明*                                             |
-| ------------------------------------------------ | ----------------------------------------------------- |
-| ShardingRuleConfigurationYamlSwapper             | 用于将分片的 YAML 配置转化为分片标准配置                  |
-| MasterSlaveRuleConfigurationYamlSwapper          | 用于将读写分离的 YAML 配置转化为读写分离标准配置           |
-| ConsensusReplicationRuleConfigurationYamlSwapper | 用于将强一致多副本的 YAML 分片配置转化为强一致多副本标准配置 |
-| EncryptRuleConfigurationYamlSwapper              | 用于将加密的 YAML 分片配置转化为加密标准配置               |
-| ShadowRuleConfigurationYamlSwapper               | 用于将影子库的 YAML 分片配置转化为影子库标准配置           |
+| *已知实现类*                                           | *详细说明*                                             |
+| ----------------------------------------------------- | ----------------------------------------------------- |
+| ShardingRuleConfigurationYamlSwapper                  | 用于将分片的 YAML 配置转化为分片标准配置                  |
+| PrimaryReplicaReplicationRuleConfigurationYamlSwapper | 用于将读写分离的 YAML 配置转化为读写分离标准配置           |
+| ConsensusReplicationRuleConfigurationYamlSwapper      | 用于将强一致多副本的 YAML 分片配置转化为强一致多副本标准配置 |
+| EncryptRuleConfigurationYamlSwapper                   | 用于将加密的 YAML 分片配置转化为加密标准配置               |
+| ShadowRuleConfigurationYamlSwapper                    | 用于将影子库的 YAML 分片配置转化为影子库标准配置           |
 
 ## ShardingSphereYamlConstruct
 
diff --git a/docs/document/content/dev-manual/configuration.en.md b/docs/document/content/dev-manual/configuration.en.md
index 4db191edef..8e42e38786 100644
--- a/docs/document/content/dev-manual/configuration.en.md
+++ b/docs/document/content/dev-manual/configuration.en.md
@@ -11,13 +11,13 @@ chapter = true
 | ------------------------- | ----------------------------------------------------------------------------------- |
 | ShardingSphereRuleBuilder | Used to convert user configurations to rule objects                                 |
 
-| *Implementation Class*          | *Description*                                                                                   |
-| ------------------------------- | ----------------------------------------------------------------------------------------------- |
-| ShardingRuleBuilder             | Used to convert user sharding configurations to sharding rule objects                           |
-| MasterSlaveRuleBuilder          | Used to convert user master-slave configurations to master-slave rule objects                   |
-| ConsensusReplicationRuleBuilder | Used to convert user consensus replication configurations to consensus replication rule objects |
-| EncryptRuleBuilder              | Used to convert user encryption configurations to encryption rule objects                       |
-| ShadowRuleBuilder               | Used to convert user shadow database configurations to shadow database rule objects             |
+| *Implementation Class*               | *Description*                                                                                               |
+| ------------------------------------ | ----------------------------------------------------------------------------------------------------------- |
+| ShardingRuleBuilder                  | Used to convert user sharding configurations to sharding rule objects                                       |
+| PrimaryReplicaReplicationRuleBuilder | Used to convert user primary-replica replication configurations to primary-replica replication rule objects |
+| ConsensusReplicationRuleBuilder      | Used to convert user consensus replication configurations to consensus replication rule objects             |
+| EncryptRuleBuilder                   | Used to convert user encryption configurations to encryption rule objects                                   |
+| ShadowRuleBuilder                    | Used to convert user shadow database configurations to shadow database rule objects                         |
 
 ## YamlRuleConfigurationSwapper
 
@@ -25,13 +25,13 @@ chapter = true
 | --------------------------------------- | -------------------------------------------------------------------------------------------- |
 | YamlRuleConfigurationSwapper            | Used to convert YAML configuration to standard user configuration                            |
 
-| *Implementation Class*                           | *Description*                                                                                            |
-| ------------------------------------------------ | -------------------------------------------------------------------------------------------------------- |
-| ShardingRuleConfigurationYamlSwapper             | Used to convert YAML sharding configuration to standard sharding configuration                           |
-| MasterSlaveRuleConfigurationYamlSwapper          | Used to convert YAML master-slave configuration to standard master-slave configuration                   |
-| ConsensusReplicationRuleConfigurationYamlSwapper | Used to convert YAML consensus replication configuration to standard consensus replication configuration |
-| EncryptRuleConfigurationYamlSwapper              | Used to convert YAML encryption configuration to standard encryption configuration                       |
-| ShadowRuleConfigurationYamlSwapper               | Used to convert YAML shadow database configuration to standard shadow database configuration             |
+| *Implementation Class*                                | *Description*                                                                                                        |
+| ----------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- |
+| ShardingRuleConfigurationYamlSwapper                  | Used to convert YAML sharding configuration to standard sharding configuration                                       |
+| PrimaryReplicaReplicationRuleConfigurationYamlSwapper | Used to convert YAML primary-replica replication configuration to standard primary-replica replication configuration |
+| ConsensusReplicationRuleConfigurationYamlSwapper      | Used to convert YAML consensus replication configuration to standard consensus replication configuration             |
+| EncryptRuleConfigurationYamlSwapper                   | Used to convert YAML encryption configuration to standard encryption configuration                                   |
+| ShadowRuleConfigurationYamlSwapper                    | Used to convert YAML shadow database configuration to standard shadow database configuration                         |
 
 ## ShardingSphereYamlConstruct
 
diff --git a/docs/document/content/dev-manual/kernel.cn.md b/docs/document/content/dev-manual/kernel.cn.md
index 90024105b5..6d70bef9d9 100644
--- a/docs/document/content/dev-manual/kernel.cn.md
+++ b/docs/document/content/dev-manual/kernel.cn.md
@@ -49,12 +49,12 @@ chapter = true
 | ------------------------- | --------------------- |
 | RouteDecorator            | 用于处理路由结果        |
 
-| *已知实现类*                        | *详细说明*                |
-| ---------------------------------- | ------------------------ |
-| ShardingRouteDecorator             | 用于处理分片路由结果       |
-| MasterSlaveRouteDecorator          | 用于处理读写分离路由结果    |
-| ConsensusReplicationRouteDecorator | 用于处理强一致多副本路由结果 |
-| ShadowRouteDecorator               | 用于处理影子库路由结果      |
+| *已知实现类*                             | *详细说明*                |
+| --------------------------------------- | ------------------------ |
+| ShardingRouteDecorator                  | 用于处理分片路由结果       |
+| PrimaryReplicaReplicationRouteDecorator | 用于处理读写分离路由结果    |
+| ConsensusReplicationRouteDecorator      | 用于处理强一致多副本路由结果 |
+| ShadowRouteDecorator                    | 用于处理影子库路由结果      |
 
 ## SQLRewriteContextDecorator
 
diff --git a/docs/document/content/dev-manual/kernel.en.md b/docs/document/content/dev-manual/kernel.en.md
index ecd7f7327b..e8ffdc1200 100644
--- a/docs/document/content/dev-manual/kernel.en.md
+++ b/docs/document/content/dev-manual/kernel.en.md
@@ -49,12 +49,12 @@ chapter = true
 | ------------------------- | ----------------------------------------------- |
 | RouteDecorator            | Used to process routing results                 |
 
-| *Implementation Class*             | *Description*                                         |
-| ---------------------------------- | ----------------------------------------------------- |
-| ShardingRouteDecorator             | Used to process sharding routing results              |
-| MasterSlaveRouteDecorator          | Used to process master-slave routing results          |
-| ConsensusReplicationRouteDecorator | Used to process consensus replication routing results |
-| ShadowRouteDecorator               | Used to process shadow database routing results       |
+| *Implementation Class*                  | *Description*                                               |
+| --------------------------------------- | ----------------------------------------------------------- |
+| ShardingRouteDecorator                  | Used to process sharding routing results                    |
+| PrimaryReplicaReplicationRouteDecorator | Used to process primary-replica replication routing results |
+| ConsensusReplicationRouteDecorator      | Used to process consensus replication routing results       |
+| ShadowRouteDecorator                    | Used to process shadow database routing results             |
 
 ## SQLRewriteContextDecorator
 
diff --git a/docs/document/content/dev-manual/master-slave.en.md b/docs/document/content/dev-manual/master-slave.en.md
deleted file mode 100644
index cc3c8c87e4..0000000000
--- a/docs/document/content/dev-manual/master-slave.en.md
+++ /dev/null
@@ -1,17 +0,0 @@
-+++
-pre = "<b>5.5. </b>"
-title = "Master-Slave"
-weight = 5
-chapter = true
-+++
-
-## MasterSlaveLoadBalanceAlgorithm
-
-| *SPI Name*                                | *Description*                                         |
-| ----------------------------------------- | ----------------------------------------------------- |
-| MasterSlaveLoadBalanceAlgorithm           | Load balance algorithm of slave databases             |
-
-| *Implementation Class*                    | *Description*                                         |
-| ----------------------------------------- | ----------------------------------------------------- |
-| RoundRobinMasterSlaveLoadBalanceAlgorithm | Round robin load balance algorithm of slave databases |
-| RandomMasterSlaveLoadBalanceAlgorithm     | Random load balance algorithm of slave databases      |
diff --git a/docs/document/content/dev-manual/master-slave.cn.md b/docs/document/content/dev-manual/primary-replica-replication.cn.md
similarity index 66%
rename from docs/document/content/dev-manual/master-slave.cn.md
rename to docs/document/content/dev-manual/primary-replica-replication.cn.md
index f8f46f18da..195b78d22e 100644
--- a/docs/document/content/dev-manual/master-slave.cn.md
+++ b/docs/document/content/dev-manual/primary-replica-replication.cn.md
@@ -5,13 +5,13 @@ weight = 5
 chapter = true
 +++
 
-## MasterSlaveLoadBalanceAlgorithm
+## ReplicaLoadBalanceAlgorithm
 
 | *SPI 名称*                                 | *详细说明*              |
 | ----------------------------------------- | ----------------------- |
-| MasterSlaveLoadBalanceAlgorithm           | 读库负载均衡算法          |
+| ReplicaLoadBalanceAlgorithm               | 读库负载均衡算法          |
 
 | *已知实现类*                               | *详细说明*               |
 | ----------------------------------------- | ----------------------- |
-| RoundRobinMasterSlaveLoadBalanceAlgorithm | 基于轮询的读库负载均衡算法 |
-| RandomMasterSlaveLoadBalanceAlgorithm     | 基于随机的读库负载均衡算法 |
+| RoundRobinReplicaLoadBalanceAlgorithm     | 基于轮询的读库负载均衡算法 |
+| RandomReplicaLoadBalanceAlgorithm         | 基于随机的读库负载均衡算法 |
diff --git a/docs/document/content/dev-manual/primary-replica-replication.en.md b/docs/document/content/dev-manual/primary-replica-replication.en.md
new file mode 100644
index 0000000000..cbb52855c1
--- /dev/null
+++ b/docs/document/content/dev-manual/primary-replica-replication.en.md
@@ -0,0 +1,17 @@
++++
+pre = "<b>5.5. </b>"
+title = "Primary-Replica Replication"
+weight = 5
+chapter = true
++++
+
+## ReplicaLoadBalanceAlgorithm
+
+| *SPI Name*                            | *Description*                                           |
+| ------------------------------------- | ------------------------------------------------------- |
+| ReplicaLoadBalanceAlgorithm           | Load balance algorithm of replica databases             |
+
+| *Implementation Class*                | *Description*                                           |
+| ------------------------------------- | ------------------------------------------------------- |
+| RoundRobinReplicaLoadBalanceAlgorithm | Round robin load balance algorithm of replica databases |
+| RandomReplicaLoadBalanceAlgorithm     | Random load balance algorithm of replica databases      |
diff --git a/docs/document/content/faq/_index.cn.md b/docs/document/content/faq/_index.cn.md
index 8c586a85ca..7d2bdcaf85 100644
--- a/docs/document/content/faq/_index.cn.md
+++ b/docs/document/content/faq/_index.cn.md
@@ -26,7 +26,8 @@ ShardingSphere使用lombok实现极简代码。关于更多使用和安装细节
 
 Spring命名空间使用规范并未强制要求将xsd文件部署至公网地址，但考虑到部分用户的需求，我们也将相关xsd文件部署至ShardingSphere官网。
 
-实际上shardingsphere-jdbc-spring-namespace的jar包中META-INF\spring.schemas配置了xsd文件的位置：META-INF\namespace\sharding.xsd和META-INF\namespace\master-slave.xsd，只需确保jar包中该文件存在即可。
+实际上 shardingsphere-jdbc-spring-namespace 的 jar 包中 META-INF\spring.schemas 配置了 xsd 文件的位置：
+META-INF\namespace\sharding.xsd 和 META-INF\namespace\primary-replica-replication.xsd，只需确保 jar 包中该文件存在即可。
 
 ## 4. Cloud not resolve placeholder ... in string value ...异常的解决方法?
 
diff --git a/docs/document/content/faq/_index.en.md b/docs/document/content/faq/_index.en.md
index 778b406d0f..282317f498 100644
--- a/docs/document/content/faq/_index.en.md
+++ b/docs/document/content/faq/_index.en.md
@@ -25,7 +25,8 @@ Answer:
 
 The use norm of Spring Namespace does not require to deploy xsd files to the official website. But considering some users' needs, we will deploy them to ShardingSphere's official website.
 
-Actually, META-INF\spring.schemas in the jar package of shardingsphere-jdbc-spring-namespace has been configured with the position of xsd files: META-INF\namespace\sharding.xsd and META-INF\namespace\master-slave.xsd, so you only need to make sure that the file is in the jar package.
+Actually, META-INF\spring.schemas in the jar package of shardingsphere-jdbc-spring-namespace has been configured with the position of xsd files: 
+META-INF\namespace\sharding.xsd and META-INF\namespace\primary-replica-replication.xsd, so you only need to make sure that the file is in the jar package.
 
 ## 4. How to solve `Cloud not resolve placeholder … in string value …` error?
 
diff --git a/docs/document/content/features/encrypt/principle.en.md b/docs/document/content/features/encrypt/principle.en.md
index f2363606f5..7f15799332 100644
--- a/docs/document/content/features/encrypt/principle.en.md
+++ b/docs/document/content/features/encrypt/principle.en.md
@@ -131,7 +131,7 @@ Such a simple and rough way, based on historical experience, will definitely not
 
 Then another relatively safe approach is to rebuild a pre-release environment exactly like the production environment, 
 and then encrypt the **Inventory plaintext data** of the production environment through the relevant migration and washing tools and store it in the pre-release environment. 
-The **Increment data** is encrypted by tools such as MySQL master-slave replication and the business party ’s own development, 
+The **Increment data** is encrypted by tools such as MySQL primary-replica replication and the business party ’s own development, 
 encrypted and stored in the database of the pre-release environment, and then the refactored code can be deployed to the pre-release environment. 
 In this way, the production environment is a set of environment for **modified/queries with plain text as the core**; 
 the pre-release environment is a set of **encrypt/decrypt queries modified with ciphertext as the core**. 
diff --git a/docs/document/content/features/encrypt/use-norms.en.md b/docs/document/content/features/encrypt/use-norms.en.md
index 4f3331e638..b8e769d058 100644
--- a/docs/document/content/features/encrypt/use-norms.en.md
+++ b/docs/document/content/features/encrypt/use-norms.en.md
@@ -13,6 +13,6 @@ weight = 3
 ## Unsupported Items
 
 * Users need to deal with the original inventory data and wash numbers in the database;
-* Use encryption function + sub-library sub-table function, some special SQL is not supported, please refer to [SQL specification]( https://shardingsphere.apache.org/document/current/en/features/sharding/use-norms/sql/);
+* Use encryption function + sub-database sub-table function, some special SQL is not supported, please refer to [SQL specification]( https://shardingsphere.apache.org/document/current/en/features/sharding/use-norms/sql/);
 * Encryption fields cannot support comparison operations, such as: greater than less than, ORDER BY, BETWEEN, LIKE, etc;
 * Encryption fields cannot support calculation operations, such as AVG, SUM, and calculation expressions.
diff --git a/docs/document/content/features/governance/management/config-center.cn.md b/docs/document/content/features/governance/management/config-center.cn.md
index df95f54778..3e47aa6283 100644
--- a/docs/document/content/features/governance/management/config-center.cn.md
+++ b/docs/document/content/features/governance/management/config-center.cn.md
@@ -87,7 +87,7 @@ rules:
 - !SHARDING
   xxx
   
-- !MASTERSLAVE
+- !PRIMARY_REPLICA_REPLICATION
   xxx
   
 - !ENCRYPT
diff --git a/docs/document/content/features/governance/management/config-center.en.md b/docs/document/content/features/governance/management/config-center.en.md
index 498a0b0b36..08d03c51df 100644
--- a/docs/document/content/features/governance/management/config-center.en.md
+++ b/docs/document/content/features/governance/management/config-center.en.md
@@ -80,14 +80,14 @@ dataSources:
 
 ### /schemas/${schemeName}/rule
 
-Rule configurations, including sharding, read-write split, data encryption, shadow DB, consensus replication configurations.
+Rule configurations, including sharding, primary-replica replication, data encryption, shadow DB, consensus replication configurations.
 
 ```yaml
 rules:
 - !SHARDING
   xxx
   
-- !MASTERSLAVE
+- !PRIMARY_REPLICA_REPLICATION
   xxx
   
 - !ENCRYPT
diff --git a/docs/document/content/features/governance/management/registry-center.en.md b/docs/document/content/features/governance/management/registry-center.en.md
index 62e6f81077..6fbca2e991 100644
--- a/docs/document/content/features/governance/management/registry-center.en.md
+++ b/docs/document/content/features/governance/management/registry-center.en.md
@@ -7,7 +7,7 @@ weight = 2
 
 - As config center manage configuration data, registry center hold all ephemeral status data dynamically generated in runtime(such as available proxy instances, disabled datasource instances etc).
 
-- Registry center can disable the access to slave database and the access of application. Governance still has many functions(such as flow control) to be developed.
+- Registry center can disable the access to replica database and the access of application. Governance still has many functions(such as flow control) to be developed.
 
 ## Data Structure in Registry Center
 
@@ -36,7 +36,7 @@ It includes running instance information of database access object, with sub-nod
 
 ### /states/datanodes
 
-It is able to orchestrate read-write split slave database, delete or disable data dynamically.
+It is able to orchestrate replica database, delete or disable data dynamically.
 
 ## Operation Guide
 
@@ -50,9 +50,9 @@ Zookeeper command is as follows:
 [zk: localhost:2181(CONNECTED) 0] set /${your_zk_namespace}/states/proxynodes/${your_instance_ip_a}@${your_instance_pid_x}@${UUID} DISABLED
 ```
 
-### Disable Slave Database
+### Disable Replica Database
 
-Under read-write split scenarios, users can write `DISABLED` (case insensitive) to sub-nodes of data source name to disable slave database sources. Delete `DISABLED` or the node to enable it.
+Under primary-replica replication scenarios, users can write `DISABLED` (case insensitive) to sub-nodes of data source name to disable replica database sources. Delete `DISABLED` or the node to enable it.
 
 Zookeeper command is as follows:
 
diff --git a/docs/document/content/features/pluggable-architecture/_index.en.md b/docs/document/content/features/pluggable-architecture/_index.en.md
index 8b1ef95fab..296c40bd6d 100644
--- a/docs/document/content/features/pluggable-architecture/_index.en.md
+++ b/docs/document/content/features/pluggable-architecture/_index.en.md
@@ -17,7 +17,7 @@ It needs to make each module decouple to independent and imperceptible to each o
 Design an architecture to completely isolate each function, not only can stimulate the enthusiasm of the open source community, but also can guarantee the quality of the project.
 
 Apache ShardingSphere begin to focus on pluggable architecture from version 5.x, features can be embedded into project flexibility.
-Currently, the features such as data sharding, read-write splitting, consensus replication, data encrypt, shadow test, and SQL dialects / database protocols such as MySQL, PostgreSQL, SQLServer, Oracle supported are all weaved by plugins.
+Currently, the features such as data sharding, primary-replica replication, consensus replication, data encrypt, shadow test, and SQL dialects / database protocols such as MySQL, PostgreSQL, SQLServer, Oracle supported are all weaved by plugins.
 There are lots of SPI extensions for Apache ShardingSphere now and increase continuously.
 
 ## Goal
diff --git a/docs/document/content/features/read-write-split/_index.cn.md b/docs/document/content/features/primary-replica-replication/_index.cn.md
similarity index 100%
rename from docs/document/content/features/read-write-split/_index.cn.md
rename to docs/document/content/features/primary-replica-replication/_index.cn.md
diff --git a/docs/document/content/features/primary-replica-replication/_index.en.md b/docs/document/content/features/primary-replica-replication/_index.en.md
new file mode 100644
index 0000000000..c9ef2d5ac9
--- /dev/null
+++ b/docs/document/content/features/primary-replica-replication/_index.en.md
@@ -0,0 +1,28 @@
++++
+pre = "<b>3.3. </b>"
+title = "Primary-Replica Replication"
+weight = 3
+chapter = true
++++
+
+## Background
+
+With increasing system TPS, database capacity has faced great bottleneck effect. For the application system with massive concurrence read operations but less write operations in the same time, we can divide the database into a primary database and a replica database. The primary database is responsible for the addition, deletion and modification of transactions, while the replica database is responsible for queries. It can significantly improve the query performance of the whole system by effectively avoiding line locks caused by data renewal.
+
+One primary database with multiple replica databases can further enhance system processing capacity by distributing queries evenly into multiple data replicas. Multiple primary databases with multiple replica databases can enhance not only system throughput but also system availability. Therefore, the system can still function normally, even though any database is down or physical disk is destroyed.
+
+Different from the horizontal sharding that separates data to all nodes according to sharding keys, primary-replica replication routes read operations and write operations separately to the primary database and the replica database according to SQL meaning analysis.
+
+![Primary-replica replication](https://shardingsphere.apache.org/document/current/img/read-write-split/read-write-split.png)
+
+Data in primary-replica replication split nodes is consistent, whereas that in horizontal shards is not. The combined use of horizontal sharding and primary-replica replication will effectively enhance the system performance.
+
+## Challenges
+
+Though primary-replica replication can enhance system throughput and availability, it also brings inconsistent data, including that between multiple primary databases and between primary databases and replica databases. What's more, it also brings the same problem as data sharding, complicating app developer and operator's maintenance and operation. The following picture has shown the complex topological relations between applications and database groups when sharding table and database used together with primary-replica replication.
+
+![Sharding + Primary-Replica Replication](https://shardingsphere.apache.org/document/current/img/read-write-split/sharding-read-write-split.png)
+
+## Goal
+
+**The main design goal of the primary-replica replication modular of ShardingSphere is to try to reduce the influence of primary-replica replication, in order to let users use primary-replica replication database group like one database.**
\ No newline at end of file
diff --git a/docs/document/content/features/read-write-split/concept.cn.md b/docs/document/content/features/primary-replica-replication/concept.cn.md
similarity index 100%
rename from docs/document/content/features/read-write-split/concept.cn.md
rename to docs/document/content/features/primary-replica-replication/concept.cn.md
diff --git a/docs/document/content/features/primary-replica-replication/concept.en.md b/docs/document/content/features/primary-replica-replication/concept.en.md
new file mode 100644
index 0000000000..1053bcdb36
--- /dev/null
+++ b/docs/document/content/features/primary-replica-replication/concept.en.md
@@ -0,0 +1,22 @@
++++
+pre = "<b>3.3.1. </b>"
+title = "Core Concept"
+weight = 1
++++
+
+## Primary Database
+
+It refers to the database used in data insertion, update and deletion. It only supports single primary database for now.
+
+## Replica Database
+
+It refers to the database used in data query. It supports multiple replica databases.
+
+## Primary replica Replication
+
+It refers to the operation to asynchronously replicate data from the primary database to the replica database. 
+Because of primary-replica replication asynchronization, there may be short-time data inconsistency between them.  
+
+## Load Balance Strategy
+
+Through this strategy, queries are separated to different replica databases.
diff --git a/docs/document/content/features/read-write-split/use-norms.cn.md b/docs/document/content/features/primary-replica-replication/use-norms.cn.md
similarity index 100%
rename from docs/document/content/features/read-write-split/use-norms.cn.md
rename to docs/document/content/features/primary-replica-replication/use-norms.cn.md
diff --git a/docs/document/content/features/primary-replica-replication/use-norms.en.md b/docs/document/content/features/primary-replica-replication/use-norms.en.md
new file mode 100644
index 0000000000..ed66a2bd83
--- /dev/null
+++ b/docs/document/content/features/primary-replica-replication/use-norms.en.md
@@ -0,0 +1,20 @@
++++
+pre = "<b>3.3.2. </b>"
+title = "Use Norms"
+weight = 2
++++
+
+## Supported Items
+
+* Provide the primary-replica replication configuration of one primary database with multiple replica databases, which can be used alone or with sharding table and database;
+* Support SQL pass-through in independent use of primary-replica replication;
+* If there is write operation in the same thread and database connection, all the following read operations are from the primary database to ensure data consistency;
+* Forcible primary database route based on SQL Hint;
+
+## Unsupported Items
+
+* Data replication between the primary and the replica databases;
+* Data inconsistency caused by replication delay between databases;
+* Double or multiple primary databases to provide write operation;
+* The data for transaction across primary and replica nodes are inconsistent. 
+In the primary-replica replication model, the primary nodes need to be used for both reading and writing in the transaction.
diff --git a/docs/document/content/features/read-write-split/_index.en.md b/docs/document/content/features/read-write-split/_index.en.md
deleted file mode 100644
index 5a46dacc33..0000000000
--- a/docs/document/content/features/read-write-split/_index.en.md
+++ /dev/null
@@ -1,28 +0,0 @@
-+++
-pre = "<b>3.3. </b>"
-title = "Read-write splitting"
-weight = 3
-chapter = true
-+++
-
-## Background
-
-With increasing system TPS, database capacity has faced great bottleneck effect. For the application system with massive concurrence read operations but less write operations in the same time, we can divide the database into a master database and a slave database. The master database is responsible for the addition, deletion and modification of transactions, while the slave database is responsible for queries. It can significantly improve the query performance of the whole system by effectively avoiding line locks caused by data renewal.
-
-One master database with multiple slave databases can further enhance system processing capacity by distributing queries evenly into multiple data replicas. Multiple master databases with multiple slave databases can enhance not only system throughput but also system availability. Therefore, the system can still function normally, even though any database is down or physical disk is destroyed.
-
-Different from the horizontal sharding that separates data to all nodes according to sharding keys, read-write split routes read operations and write operations separately to the master database and the slave database according to SQL meaning analysis.
-
-![Read-write split](https://shardingsphere.apache.org/document/current/img/read-write-split/read-write-split.png)
-
-Data in read-write split nodes is consistent, whereas that in horizontal shards is not. The combined use of horizontal sharding and read-write split will effectively enhance the system performance.
-
-## Challenges
-
-Though read-write split can enhance system throughput and availability, it also brings inconsistent data, including that between multiple master databases and between master databases and slave databases. What's more, it also brings the same problem as data sharding, complicating app developer and operator's maintenance and operation. The following picture has shown the complex topological relations between applications and database groups when sharding table and database are used together with read-write split.
-
-![Sharding + Read-write split](https://shardingsphere.apache.org/document/current/img/read-write-split/sharding-read-write-split.png)
-
-## Goal
-
-**The main design goal of the read-write split modular of ShardingSphere is to try to reduce the influence of read-write split, in order to let users use master-slave database group like one database.**
\ No newline at end of file
diff --git a/docs/document/content/features/read-write-split/concept.en.md b/docs/document/content/features/read-write-split/concept.en.md
deleted file mode 100644
index 60736bf81e..0000000000
--- a/docs/document/content/features/read-write-split/concept.en.md
+++ /dev/null
@@ -1,21 +0,0 @@
-+++
-pre = "<b>3.3.1. </b>"
-title = "Core Concept"
-weight = 1
-+++
-
-## Master Database
-
-It refers to the database used in data insertion, update and deletion. It only supports single master database for now.
-
-## Slave Database
-
-It refers to the database used in data query. It supports multiple slave databases.
-
-## Master-Slave Replication
-
-It refers to the operation to asynchronously replicate data from the master database to the slave database. Because of master-slave asynchronization, there may be short-time data inconsistency between them.  
-
-## Load Balance Strategy
-
-Through this strategy, queries are separated to different slave databases.
\ No newline at end of file
diff --git a/docs/document/content/features/read-write-split/use-norms.en.md b/docs/document/content/features/read-write-split/use-norms.en.md
deleted file mode 100644
index 34f657c913..0000000000
--- a/docs/document/content/features/read-write-split/use-norms.en.md
+++ /dev/null
@@ -1,19 +0,0 @@
-+++
-pre = "<b>3.3.2. </b>"
-title = "Use Norms"
-weight = 2
-+++
-
-## Supported Items
-
-* Provide the read-write split configuration of one master database with multiple slave databases, which can be used alone or with sharding table and database;
-* Support SQL pass-through in independent use of read-write split;
-* If there is write operation in the same thread and database connection, all the following read operations are from the master database to ensure data consistency;
-* Forcible master database route based on SQL Hint;
-
-## Unsupported Items
-
-* Data replication between the master and the slave database;
-* Data inconsistency caused by replication delay between databases;
-* Double or multiple master databases to provide write operation;
-* The data for transaction across Master and Slave nodes are inconsistent. In the Master-Slave replication model, the master nodes need to be used for both reading and writing in the transaction.
diff --git a/docs/document/content/features/sharding/_index.en.md b/docs/document/content/features/sharding/_index.en.md
index 7dc896dfa8..c610b2d8eb 100644
--- a/docs/document/content/features/sharding/_index.en.md
+++ b/docs/document/content/features/sharding/_index.en.md
@@ -11,13 +11,13 @@ The traditional solution that stores all the data in one concentrated node has h
 
 In performance, the relational database mostly uses B+ tree index. When the data amount exceeds the threshold, deeper index will increase the disk IO access number, and thereby, weaken the performance of query. In the same time, high concurrency requests also make the centralized database to be the greatest limitation of the system.
 
-In availability, capacity can be expanded at a relatively low cost and any extent with stateless service, which can make all the pressure, at last, fall on the database. But the single data node or simple master-slave structure has been harder and harder to take these pressures. Therefore, database availability has become the key to the whole system.
+In availability, capacity can be expanded at a relatively low cost and any extent with stateless service, which can make all the pressure, at last, fall on the database. But the single data node or simple primary-replica replication structure has been harder and harder to take these pressures. Therefore, database availability has become the key to the whole system.
 
 From the aspect of operation costs, when the data in a database instance has reached above the threshold, DBA’s operation pressure will also increase. The time cost of data backup and data recovery will be more uncontrollable with increasing amount of data. Generally, it is a relatively reasonable range for the data in single database case to be within 1TB.
 
 Under the circumstance that traditional relational databases cannot satisfy the requirement of the Internet, there are more and more attempts to store the data in native distributed NoSQL. But its incompatibility with SQL and imperfection in ecosystem block it from defeating the relational database in the competition, so the relational database still holds an unshakable position.
 
-Sharding refers to splitting the data in one database and storing them in multiple tables and databases according to some certain standard, so that the performance and availability can be improved. Both methods can effectively avoid the query limitation caused by data exceeding affordable threshold. What’s more, database sharding can also effectively disperse TPS. Table sharding, though cannot ease the database pressure, can provide possibilities to transfer distributed transactions to local transactions, since cross-database upgrades are once involved, distributed transactions can turn pretty tricky sometimes. The use of multiple master-slave sharding method can effectively avoid the data concentrating on one node and increase the architecture availability.
+Sharding refers to splitting the data in one database and storing them in multiple tables and databases according to some certain standard, so that the performance and availability can be improved. Both methods can effectively avoid the query limitation caused by data exceeding affordable threshold. What’s more, database sharding can also effectively disperse TPS. Table sharding, though cannot ease the database pressure, can provide possibilities to transfer distributed transactions to local transactions, since cross-database upgrades are once involved, distributed transactions can turn pretty tricky sometimes. The use of multiple primary-replica replication sharding method can effectively avoid the data concentrating on one node and increase the architecture availability.
 
 Splitting data through database sharding and table sharding is an effective method to deal with high TPS and mass amount data system, because it can keep the data amount lower than the threshold and evacuate the traffic. 
 Sharding method can be divided into vertical sharding and horizontal sharding.
diff --git a/docs/document/content/features/sharding/concept/configuration.en.md b/docs/document/content/features/sharding/concept/configuration.en.md
index 0d20c0e7a6..5fd4eee369 100644
--- a/docs/document/content/features/sharding/concept/configuration.en.md
+++ b/docs/document/content/features/sharding/concept/configuration.en.md
@@ -5,7 +5,7 @@ weight = 3
 
 ## Sharding Rule
 
-The main entrance for Sharding rules includes the configurations of data source, tables, binding tables and read-write split.
+The main entrance for Sharding rules includes the configurations of data source, tables, binding tables and primary-replica replication.
 
 ## Data Sources Configuration
 
diff --git a/docs/document/content/features/sharding/principle/execute.en.md b/docs/document/content/features/sharding/principle/execute.en.md
index 8184c3845a..31c8e9593d 100644
--- a/docs/document/content/features/sharding/principle/execute.en.md
+++ b/docs/document/content/features/sharding/principle/execute.en.md
@@ -70,7 +70,7 @@ For example, suppose one query needs to acquire two database connections from a
 To avoid the deadlock, ShardingSphere will go through synchronous processing when acquiring database connection. When creating execution units, it acquires all the database connections that this SQL requires for once with atomic method and reduces the possibility of acquiring only part of the resources. Due to the high operation frequency, locking the connection each time when acquiring it can decrease ShardingSphere's concurrency. Therefore, it has improved two aspects here:
 
 1. Avoid the setting that locking only takes one database connection each time. Because under this kind of circumstance, two requests waiting for each other will not happen, so there is no need for locking. 
-Most OLTP operations use sharding keys to route to the only data node, which will make the system in a totally unlocked state, thereby improve the concurrency efficiency further. In addition to routing to a single shard, read-write split also belongs to this category.
+Most OLTP operations use sharding keys to route to the only data node, which will make the system in a totally unlocked state, thereby improve the concurrency efficiency further. In addition to routing to a single shard, primary-replica replication also belongs to this category.
 
 2. Only aim at MEMORY_STRICTLY mode to lock resources. When using CONNECTION_STRICTLY mode, all the query result sets will release database connection resources after loading them to the memory, so deadlock wait will not appear.
 
diff --git a/docs/document/content/features/test-engine/_index.cn.md b/docs/document/content/features/test-engine/_index.cn.md
index 1afb495ceb..a03d3f9e20 100644
--- a/docs/document/content/features/test-engine/_index.cn.md
+++ b/docs/document/content/features/test-engine/_index.cn.md
@@ -17,4 +17,4 @@ SQL解析单元测试全面覆盖SQL占位符和字面量维度。整合测试
 >
 >SQL-TYPE : 是 DAL，DCL，DDL，DML，DQL，TCL 中的某一个或者集合
 >
->SHARDING-TYPE : 是 db，dbtbl_with_masterslave，masterslave，tbl 中的某一个或者集合
+>SHARDING-TYPE : 是 db，dbtbl_with_primary_replica_replication，primary_replica_replication，tbl 中的某一个或者集合
diff --git a/docs/document/content/features/test-engine/_index.en.md b/docs/document/content/features/test-engine/_index.en.md
index adb8574186..41ff152bc2 100644
--- a/docs/document/content/features/test-engine/_index.en.md
+++ b/docs/document/content/features/test-engine/_index.en.md
@@ -11,7 +11,7 @@ each engine is suit for H2、MySQL、PostgreSQL、SQLServer and Oracle.
 To make the test engine more easy to get start, all test engines in shardingsphere are designed to modify the configuration files to execute all assertions without any **Java code** modification.
 
 The SQL parsing unit test covers both SQL placeholder and literal dimension. 
-Integration test can be further divided into two dimensions of strategy and JDBC; the former one includes strategies as Sharding, table Sharding, database Sharding, and read-write split while the latter one includes `Statement` and `PreparedStatement`.
+Integration test can be further divided into two dimensions of strategy and JDBC; the former one includes strategies as Sharding, table Sharding, database Sharding, and primary-replica replication while the latter one includes `Statement` and `PreparedStatement`.
 
 Therefore, one SQL can drive 5 kinds of database parsing * 2 kinds of parameter transmission modes + 5 kinds of databases * 5 kinds of Sharding strategies * 2 kinds of JDBC operation modes = 60 test cases, to enable ShardingSphere to achieve the pursuit of high quality.
 
@@ -19,4 +19,4 @@ Therefore, one SQL can drive 5 kinds of database parsing * 2 kinds of parameter
 >
 >SQL-TYPE : is one of or collection of dal,dcl，ddl，dml，dql，tcl
 >
->SHARDING-TYPE : is one of or collection of db，dbtbl_with_masterslave，masterslave，tbl
+>SHARDING-TYPE : is one of or collection of db，dbtbl_with_primary_replica_replication，primary_replica_replication，tbl
diff --git a/docs/document/content/features/test-engine/integration-test-engine.cn.md b/docs/document/content/features/test-engine/integration-test-engine.cn.md
index ac5196a8e9..764a0e5b44 100644
--- a/docs/document/content/features/test-engine/integration-test-engine.cn.md
+++ b/docs/document/content/features/test-engine/integration-test-engine.cn.md
@@ -33,7 +33,7 @@ Junit 中的 `Parameterized` 会聚合起所有的测试数据，并将测试数
 run.additional.cases=false
 
 # 分片策略，可指定多种策略
-sharding.rule.type=db,tbl,dbtbl_with_masterslave,masterslave
+sharding.rule.type=db,tbl,dbtbl_with_primary_replica_replication,primary_replica_replication
 
 # 要测试的数据库，可以指定多种数据库(H2,MySQL,Oracle,SQLServer,PostgreSQL)
 databases=MySQL,PostgreSQL
diff --git a/docs/document/content/features/test-engine/integration-test-engine.en.md b/docs/document/content/features/test-engine/integration-test-engine.en.md
index ee001bf0ce..63e79ff690 100644
--- a/docs/document/content/features/test-engine/integration-test-engine.en.md
+++ b/docs/document/content/features/test-engine/integration-test-engine.en.md
@@ -32,7 +32,7 @@ Firstly, setup configuration file `/shardingsphere-test-suite/src/test/resources
 run.additional.cases=false
 
 # sharding rule, could define multiple rules
-sharding.rule.type=db,tbl,dbtbl_with_masterslave,masterslave
+sharding.rule.type=db,tbl,dbtbl_with_primary_replica_replication,primary_replica_replication
 
 # database type, could define multiple databases(H2,MySQL,Oracle,SQLServer,PostgreSQL)
 databases=MySQL,PostgreSQL
diff --git a/docs/document/content/features/test-engine/performance-test.cn.md b/docs/document/content/features/test-engine/performance-test.cn.md
index 39bf3499d2..a454f62be0 100644
--- a/docs/document/content/features/test-engine/performance-test.cn.md
+++ b/docs/document/content/features/test-engine/performance-test.cn.md
@@ -130,10 +130,10 @@ dataSources:
     idleTimeoutMilliseconds: 60000
     maxLifetimeMilliseconds: 1800000
     maxPoolSize: 200
-masterSlaveRule:
+primaryReplicaReplicationRule:
   name: pr_ds
-  masterDataSourceName: primary_ds
-  slaveDataSourceNames:
+  primaryDataSourceName: primary_ds
+  replicaDataSourceNames:
     - replica_ds_0
 ```
 
@@ -227,25 +227,25 @@ shardingRule:
   defaultDataSourceName: primary_ds_1
   defaultTableStrategy:
     none:
-  masterSlaveRules:
+  primaryReplicaReplicationRules:
     pr_ds_0:
-      masterDataSourceName: primary_ds_0
-      slaveDataSourceNames:
+      primaryDataSourceName: primary_ds_0
+      replicaDataSourceNames:
         - replica_ds_0
       loadBalanceAlgorithmType: ROUND_ROBIN
     pr_ds_1:
-      masterDataSourceName: primary_ds_1
-      slaveDataSourceNames:
+      primaryDataSourceName: primary_ds_1
+      replicaDataSourceNames:
         - replica_ds_1
       loadBalanceAlgorithmType: ROUND_ROBIN
     pr_ds_2:
-      masterDataSourceName: primary_ds_2
-      slaveDataSourceNames:
+      primaryDataSourceName: primary_ds_2
+      replicaDataSourceNames:
         - replica_ds_2
       loadBalanceAlgorithmType: ROUND_ROBIN
     pr_ds_3:
-      masterDataSourceName: primary_ds_3
-      slaveDataSourceNames:
+      primaryDataSourceName: primary_ds_3
+      replicaDataSourceNames:
         - replica_ds_3
       loadBalanceAlgorithmType: ROUND_ROBIN
 encryptRule:
diff --git a/docs/document/content/features/test-engine/performance-test.en.md b/docs/document/content/features/test-engine/performance-test.en.md
index 66721a02bb..2ace021271 100644
--- a/docs/document/content/features/test-engine/performance-test.en.md
+++ b/docs/document/content/features/test-engine/performance-test.en.md
@@ -6,22 +6,22 @@ weight = 5
 
 ## Target
 
-The performance of ShardingSphere-JDBC，ShardingSphere-Proxy and MySQL would be compared here. INSERT & UPDATE & DELETE which regarded as a set of associated operation and SELECT which focus on sharding optimization are used to evaluate performance for the basic scenarios (single route, master slave & encrypt & sharding, full route). While another set of associated operation, INSERT & SELECT & DELETE, is used to evaluate performance for master slave.
+The performance of ShardingSphere-JDBC, ShardingSphere-Proxy and MySQL would be compared here. INSERT & UPDATE & DELETE which regarded as a set of associated operation and SELECT which focus on sharding optimization are used to evaluate performance for the basic scenarios (single route, primary-replica replication & encrypt & sharding, full route). While another set of associated operation, INSERT & SELECT & DELETE, is used to evaluate performance for primary-replica replication.
 To achieve the result better, these tests are performed with jmeter which based on a certain amount of data with 20 concurrent threads for 30 minutes, and one MySQL has been deployed on one machine, while the scenario of MySQL used for comparison is deployed on one machine with one instance.
 
 ## Test Scenarios
 
 ### Single Route
 
-On the basis of one thousand data volume, four databases that are deployed on the same machine and each contains 1024 tables with `id` used for database sharding and `k` used for table sharding are designed for this scenario，single route select sql statement is chosen here.
+On the basis of one thousand data volume, four databases that are deployed on the same machine and each contains 1024 tables with `id` used for database sharding and `k` used for table sharding are designed for this scenario, single route select sql statement is chosen here.
 While as a comparison, MySQL runs with INSERT & UPDATE & DELETE statement and single route select sql statement on the basis of one thousand data volume.
 
-### Master Slave
+### Primary-Replica Replication
 
-One master database and one slave database, which are deployed on different machines, are designed for this scenario based on ten thousand data volume.
+One primary database and one replica database, which are deployed on different machines, are designed for this scenario based on ten thousand data volume.
 While as a comparison, MySQL runs with INSERT & SELECT & DELETE sql statement on the basis of ten thousand data volume.
 
-### Master Slave & Encrypt & Sharding
+### Primary-Replica Replication & Encrypt & Sharding
 
 On the basis of one thousand data volume, four databases that are deployed on different machines and each contains 1024 tables with `id` used for database sharding, `k` used for table sharding, `c` encrypted with aes and  `pad` encrypted with md5 are designed for this scenario, single route select sql statement is chosen here.
 While as a comparison, MySQL runs with INSERT & UPDATE & DELETE statement and single route select sql statement on the basis of one thousand data volume.
@@ -109,7 +109,7 @@ shardingRule:
       none:
 ```
 
-#### Master Slave Configuration
+#### Primary-Replica Replication Configuration
 
 ```yaml
 schemaName: sharding_db
@@ -131,14 +131,14 @@ dataSources:
     idleTimeoutMilliseconds: 60000
     maxLifetimeMilliseconds: 1800000
     maxPoolSize: 200
-masterSlaveRule:
+primaryReplicaReplicationRule:
   name: pr_ds
-  masterDataSourceName: primary_ds
-  slaveDataSourceNames:
+  primaryDataSourceName: primary_ds
+  replicaDataSourceNames:
     - replica_ds_0
 ```
 
-#### Master Slave & Encrypt & Sharding Configuration
+#### Primary-Replica Replication & Encrypt & Sharding Configuration
 
 ```yaml
 schemaName: sharding_db
@@ -228,25 +228,25 @@ shardingRule:
   defaultDataSourceName: primary_ds_1
   defaultTableStrategy:
     none:
-  masterSlaveRules:
+  primaryReplicaReplicationRules:
     pr_ds_0:
-      masterDataSourceName: primary_ds_0
-      slaveDataSourceNames:
+      primaryDataSourceName: primary_ds_0
+      replicaDataSourceNames:
         - replica_ds_0
       loadBalanceAlgorithmType: ROUND_ROBIN
     pr_ds_1:
-      masterDataSourceName: primary_ds_1
-      slaveDataSourceNames:
+      primaryDataSourceName: primary_ds_1
+      replicaDataSourceNames:
         - replica_ds_1
       loadBalanceAlgorithmType: ROUND_ROBIN
     pr_ds_2:
-      masterDataSourceName: primary_ds_2
-      slaveDataSourceNames:
+      primaryDataSourceName: primary_ds_2
+      replicaDataSourceNames:
         - replica_ds_2
       loadBalanceAlgorithmType: ROUND_ROBIN
     pr_ds_3:
-      masterDataSourceName: primary_ds_3
-      slaveDataSourceNames:
+      primaryDataSourceName: primary_ds_3
+      replicaDataSourceNames:
         - replica_ds_3
       loadBalanceAlgorithmType: ROUND_ROBIN
 encryptRule:
diff --git a/docs/document/content/overview/_index.en.md b/docs/document/content/overview/_index.en.md
index 85d5593cab..2322fe6f01 100644
--- a/docs/document/content/overview/_index.en.md
+++ b/docs/document/content/overview/_index.en.md
@@ -18,7 +18,7 @@ Aiming at reasonably making full use of the computation and storage capacity of
 As the cornerstone of many enterprises, relational database still takes a huge market share. Therefore, at current stage, we prefer to focus on its increment instead of a total overturn.
 
 Apache ShardingSphere begin to focus on pluggable architecture from version 5.x, features can be embedded into project flexibility.
-Currently, the features such as data sharding, read-write splitting, consensus replication, data encrypt, shadow test, and SQL dialects / database protocols such as MySQL, PostgreSQL, SQLServer, Oracle supported are all weaved by plugins.
+Currently, the features such as data sharding, primary-replica replication, consensus replication, data encrypt, shadow test, and SQL dialects / database protocols such as MySQL, PostgreSQL, SQLServer, Oracle supported are all weaved by plugins.
 Developers can customize their own ShardingSphere just like building lego blocks. There are lots of SPI extensions for Apache ShardingSphere now and increase continuously.
 
 ShardingSphere became an [Apache](https://apache.org/index.html#projects-list) Top Level Project on April 16 2020.
@@ -104,7 +104,7 @@ Architects can adjust the system architecture to the most applicable one to curr
 ### Data Sharding
 
 * Database sharding & Table sharding
-* Read-write splitting
+* Primary-replica replication
 * Sharding strategy customization
 * Centre-less Distributed primary key
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/_index.en.md
index 80822af112..15348656d2 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/_index.en.md
@@ -11,4 +11,4 @@ through which developers can quickly and clearly understand the functions provid
 This chapter is a configuration manual for ShardingSphere-JDBC, which can also be referred to as a dictionary if necessary.
 
 ShardingSphere-JDBC has provided 4 kinds of configuration methods for different situations. 
-By configuration, application developers can flexibly use data sharding, read-write splitting, consensus replication, data encryption, shadow database or the combination of them.
+By configuration, application developers can flexibly use data sharding, primary-replica replication, consensus replication, data encryption, shadow database or the combination of them.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/primary-replica-replication.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/primary-replica-replication.cn.md
new file mode 100644
index 0000000000..68def1d5b4
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/primary-replica-replication.cn.md
@@ -0,0 +1,30 @@
++++
+title = "读写分离"
+weight = 2
++++
+
+## 配置入口
+
+类名称：PrimaryReplicaReplicationRuleConfiguration
+
+可配置属性：
+
+| *名称*             | *数据类型*                                                         | *说明*            |
+| ----------------- | ------------------------------------------------------------------ | ----------------- |
+| dataSources (+)   | Collection\<PrimaryReplicaReplicationDataSourceRuleConfiguration\> | 主从数据源配置      |
+| loadBalancers (*) | Map\<String, ShardingSphereAlgorithmConfiguration\>                | 从库负载均衡算法配置 |
+
+## 主从数据源配置
+
+类名称：PrimaryReplicaReplicationDataSourceRuleConfiguration
+
+可配置属性：
+
+| *名称*                     | *数据类型*             | *说明*             | *默认值*       |
+| -------------------------- | -------------------- | ------------------ | ------------- |
+| name                       | String               | 读写分离数据源名称   | -             |
+| primaryDataSourceName      | String               | 主库数据源名称      | -              |
+| replicaDataSourceNames (+) | Collection\<String\> | 从库数据源名称列表   | -              |
+| loadBalancerName (?)       | String               | 从库负载均衡算法名称 | 轮询负载均衡算法 |
+
+算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/primary-replica-replication.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/primary-replica-replication.en.md
new file mode 100644
index 0000000000..36add84a13
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/primary-replica-replication.en.md
@@ -0,0 +1,30 @@
++++
+title = "Primary-Replica Replication"
+weight = 2
++++
+
+## Root Configuration
+
+Class name: PrimaryReplicaReplicationRuleConfiguration
+
+Attributes:
+
+| *Name*            | *DataType*                                                         | *Description*                                                        |
+| ----------------- | ------------------------------------------------------------------ | -------------------------------------------------------------------- |
+| dataSources (+)   | Collection\<PrimaryReplicaReplicationDataSourceRuleConfiguration\> | Data sources of primary and replicas                                 |
+| loadBalancers (*) | Map\<String, ShardingSphereAlgorithmConfiguration\>                | Load balance algorithm name and configurations of replica data sources |
+
+## Primary-Replica Replication Data Source Configuration
+
+Class name: PrimaryReplicaReplicationDataSourceRuleConfiguration
+
+Attributes:
+
+| *Name*                     | *DataType*           | *Description*                                  | *Default Value*                    |
+| -------------------------- | -------------------- | ---------------------------------------------- | ---------------------------------- |
+| name                       | String               | Primary-replica replication data source name   | -                                  |
+| primaryDataSourceName      | String               | Primary sources source name                    | -                                  |
+| replicaDataSourceNames (+) | Collection\<String\> | Replica sources source name list               | -                                  |
+| loadBalancerName (?)       | String               | Load balance algorithm name of replica sources | Round robin load balance algorithm |
+
+Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance) for more details about type of algorithm.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/read-write-split.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/read-write-split.cn.md
deleted file mode 100644
index 912a8e196c..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/read-write-split.cn.md
+++ /dev/null
@@ -1,30 +0,0 @@
-+++
-title = "读写分离"
-weight = 2
-+++
-
-## 配置入口
-
-类名称：MasterSlaveRuleConfiguration
-
-可配置属性：
-
-| *名称*             | *数据类型*                                            | *说明*            |
-| ----------------- | ---------------------------------------------------- | ----------------- |
-| dataSources (+)   | Collection\<MasterSlaveDataSourceRuleConfiguration\> | 主从数据源配置      |
-| loadBalancers (*) | Map\<String, ShardingSphereAlgorithmConfiguration\>  | 从库负载均衡算法配置 |
-
-## 主从数据源配置
-
-类名称：MasterSlaveDataSourceRuleConfiguration
-
-可配置属性：
-
-| *名称*                   | *数据类型*             | *说明*             | *默认值*       |
-| ------------------------ | -------------------- | ------------------ | ------------- |
-| name                     | String               | 读写分离数据源名称   | -             |
-| masterDataSourceName     | String               | 主库数据源名称      | -              |
-| slaveDataSourceNames (+) | Collection\<String\> | 从库数据源名称列表   | -              |
-| loadBalancerName (?)     | String               | 从库负载均衡算法名称 | 轮询负载均衡算法 |
-
-算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/read-write-split.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/read-write-split.en.md
deleted file mode 100644
index fc0596d4df..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/read-write-split.en.md
+++ /dev/null
@@ -1,30 +0,0 @@
-+++
-title = "Read-write Split"
-weight = 2
-+++
-
-## Root Configuration
-
-Class name: MasterSlaveRuleConfiguration
-
-Attributes:
-
-| *Name*            | *DataType*                                           | *Description*                                                        |
-| ----------------- | ---------------------------------------------------- | -------------------------------------------------------------------- |
-| dataSources (+)   | Collection\<MasterSlaveDataSourceRuleConfiguration\> | Data sources of master and slaves                                    |
-| loadBalancers (*) | Map\<String, ShardingSphereAlgorithmConfiguration\>  | Load balance algorithm name and configurations of slave data sources |
-
-## Master Slave Data Source Configuration
-
-Class name: MasterSlaveDataSourceRuleConfiguration
-
-Attributes:
-
-| *Name*                   | *DataType*           | *Description*                                | *Default Value*                    |
-| ------------------------ | -------------------- | -------------------------------------------- | ---------------------------------- |
-| name                     | String               | Read-write split data source name            | -                                  |
-| masterDataSourceName     | String               | Master sources source name                   | -                                  |
-| slaveDataSourceNames (+) | Collection\<String\> | Slave sources source name list               | -                                  |
-| loadBalancerName (?)     | String               | Load balance algorithm name of slave sources | Round robin load balance algorithm |
-
-Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance) for more details about type of algorithm.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/primary-replica-replication.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/primary-replica-replication.cn.md
new file mode 100644
index 0000000000..59035ed544
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/primary-replica-replication.cn.md
@@ -0,0 +1,20 @@
++++
+title = "读写分离"
+weight = 2
++++
+
+## 配置项说明
+
+```properties
+spring.shardingsphere.datasource.names= # 省略数据源配置
+
+spring.shardingsphere.rules.primary-replica-replication.data-sources.<primary-replica-replication-data-source-name>.primary-data-source-name= # 主数据源名称
+spring.shardingsphere.rules.primary-replica-replication.data-sources.<primary-replica-replication-data-source-name>.replica-data-source-names= # 从数据源名称，多个从数据源用逗号分隔
+spring.shardingsphere.rules.primary-replica-replication.data-sources.<primary-replica-replication-data-source-name>.load-balancer-name= # 负载均衡算法名称
+
+# 负载均衡算法配置
+spring.shardingsphere.rules.primary-replica-replication.load-balancers.<load-balance-algorithm-name>.type= # 负载均衡算法类型
+spring.shardingsphere.rules.primary-replica-replication.load-balancers.<load-balance-algorithm-name>.props.xxx= # 负载均衡算法属性配置
+```
+
+算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/primary-replica-replication.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/primary-replica-replication.en.md
new file mode 100644
index 0000000000..6265b2c031
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/primary-replica-replication.en.md
@@ -0,0 +1,20 @@
++++
+title = "Primary-Replica Replication"
+weight = 2
++++
+
+## Configuration Item Explanation
+
+```properties
+spring.shardingsphere.datasource.names= # Omit data source configuration
+
+spring.shardingsphere.rules.primary-replica-replication.data-sources.<primary-replica-replication-data-source-name>.primary-data-source-name= # Primary data source name
+spring.shardingsphere.rules.primary-replica-replication.data-sources.<primary-replica-replication-data-source-name>.replica-data-source-names= # Replica data source names, multiple data source names separated with comma
+spring.shardingsphere.rules.primary-replica-replication.data-sources.<primary-replica-replication-data-source-name>.load-balancer-name= # Load balance algorithm name
+
+# Load balance algorithm configuration
+spring.shardingsphere.rules.primary-replica-replication.load-balancers.<load-balance-algorithm-name>.type= # Load balance algorithm type
+spring.shardingsphere.rules.primary-replica-replication.load-balancers.<load-balance-algorithm-name>.props.xxx= # Load balance algorithm properties
+```
+
+Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance) for more details about type of algorithm.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/read-write-split.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/read-write-split.cn.md
deleted file mode 100644
index 8372bb3693..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/read-write-split.cn.md
+++ /dev/null
@@ -1,20 +0,0 @@
-+++
-title = "读写分离"
-weight = 2
-+++
-
-## 配置项说明
-
-```properties
-spring.shardingsphere.datasource.names= # 省略数据源配置
-
-spring.shardingsphere.rules.master-slave.data-sources.<master-slave-data-source-name>.master-data-source-name= # 主数据源名称
-spring.shardingsphere.rules.master-slave.data-sources.<master-slave-data-source-name>.slave-data-source-names= # 从数据源名称，多个从数据源用逗号分隔
-spring.shardingsphere.rules.master-slave.data-sources.<master-slave-data-source-name>.load-balancer-name= # 负载均衡算法名称
-
-# 负载均衡算法配置
-spring.shardingsphere.rules.master-slave.load-balancers.<load-balance-algorithm-name>.type= # 负载均衡算法类型
-spring.shardingsphere.rules.master-slave.load-balancers.<load-balance-algorithm-name>.props.xxx= # 负载均衡算法属性配置
-```
-
-算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/read-write-split.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/read-write-split.en.md
deleted file mode 100644
index a910465599..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/read-write-split.en.md
+++ /dev/null
@@ -1,20 +0,0 @@
-+++
-title = "Read-write Split"
-weight = 2
-+++
-
-## Configuration Item Explanation
-
-```properties
-spring.shardingsphere.datasource.names= # Omit data source configuration
-
-spring.shardingsphere.rules.master-slave.data-sources.<master-slave-data-source-name>.master-data-source-name= # Master data source name
-spring.shardingsphere.rules.master-slave.data-sources.<master-slave-data-source-name>.slave-data-source-names= # Slave data source names, multiple data source names separated with comma
-spring.shardingsphere.rules.master-slave.data-sources.<master-slave-data-source-name>.load-balancer-name= # Load balance algorithm name
-
-# Load balance algorithm configuration
-spring.shardingsphere.rules.master-slave.load-balancers.<load-balance-algorithm-name>.type= # Load balance algorithm type
-spring.shardingsphere.rules.master-slave.load-balancers.<load-balance-algorithm-name>.props.xxx= # Load balance algorithm properties
-```
-
-Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance) for more details about type of algorithm.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/read-write-split.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/primary-replica-replication.cn.md
similarity index 71%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/read-write-split.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/primary-replica-replication.cn.md
index 8f4350fd1c..13c2d124f1 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/read-write-split.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/primary-replica-replication.cn.md
@@ -5,26 +5,26 @@ weight = 2
 
 ## 配置项说明
 
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/masterslave/master-slave-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/masterslave/master-slave-5.0.0.xsd)
+命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/primary-replica-replication/primary-replica-replication-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/primary-replica-replication/primary-replica-replication-5.0.0.xsd)
 
-\<master-slave:rule />
+\<primary-replica-replication:rule />
 
 | *名称*                | *类型* | *说明*           |
 | -------------------- | ------ | --------------- |
 | id                   | 属性   | Spring Bean Id   |
 | data-source-rule (+) | 标签   | 读写分离数据源规则配置 |
 
-\<master-slave:data-source-rule />
+\<primary-replica-replication:data-source-rule />
 
 | *名称*                     | *类型* | *说明*                          |
 | -------------------------- | ----- | ------------------------------- |
 | id                         | 属性  | 读写分离数据源规则名称             |
-| master-data-source-name    | 属性  | 主数据源名称                      |
-| slave-data-source-names    | 属性  | 从数据源名称，多个从数据源用逗号分隔 |
+| primary-data-source-name   | 属性  | 主数据源名称                      |
+| replica-data-source-names  | 属性  | 从数据源名称，多个从数据源用逗号分隔 |
 | load-balance-algorithm-ref | 属性  | 负载均衡算法名称                   |
 
 
-\<master-slave:load-balance-algorithm />
+\<primary-replica-replication:load-balance-algorithm />
 
 | *名称*    | *类型* | *说明*            |
 | --------- | ----- | ----------------- |
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/primary-replica-replication.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/primary-replica-replication.en.md
new file mode 100644
index 0000000000..09a36fcbba
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/primary-replica-replication.en.md
@@ -0,0 +1,34 @@
++++
+title = "Primary-Replica Replication"
+weight = 2
++++
+
+## Configuration Item Explanation
+
+Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/primary-replica-replication/primary-replica-replication-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/primary-replica-replication/primary-replica-replication-5.0.0.xsd)
+
+\<primary-replica-replication:rule />
+
+| *Name*               | *Type*    | *Description*                                              |
+| -------------------- | --------- | ---------------------------------------------------------- |
+| id                   | Attribute | Spring Bean Id                                             |
+| data-source-rule (+) | Tag       | Primary-replica replication data source rule configuration |
+
+\<primary-replica-replication:data-source-rule />
+
+| *Name*                     | *Type*     | *Description*                                                              |
+| -------------------------- | ---------- | -------------------------------------------------------------------------- |
+| id                         | Attribute  | Primary-replica data source rule name                                      |
+| primary-data-source-name   | Attribute  | Primary data source name                                                   |
+| replica-data-source-names  | Attribute  | Replica data source names, multiple data source names separated with comma |
+| load-balance-algorithm-ref | Attribute  | Load balance algorithm name                                                |
+
+\<primary-replica-replication:load-balance-algorithm />
+
+| *Name*    | *Type*     | *Description*                     |
+| --------- | ---------- | --------------------------------- |
+| id        | Attribute  | Load balance algorithm name       |
+| type      | Attribute  | Load balance algorithm type       |
+| props (?) | Tag        | Load balance algorithm properties |
+
+Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance) for more details about type of algorithm.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/read-write-split.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/read-write-split.en.md
deleted file mode 100644
index 7e4a38946a..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/read-write-split.en.md
+++ /dev/null
@@ -1,34 +0,0 @@
-+++
-title = "Read-write Split"
-weight = 2
-+++
-
-## Configuration Item Explanation
-
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/masterslave/master-slave-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/masterslave/master-slave-5.0.0.xsd)
-
-\<master-slave:rule />
-
-| *Name*               | *Type*    | *Description*                               |
-| -------------------- | --------- | ------------------------------------------- |
-| id                   | Attribute | Spring Bean Id                              |
-| data-source-rule (+) | Tag       | Master-slave data source rule configuration |
-
-\<master-slave:data-source-rule />
-
-| *Name*                     | *Type*     | *Description*                                                            |
-| -------------------------- | ---------- | ------------------------------------------------------------------------ |
-| id                         | Attribute  | Master-slave data source rule name                                       |
-| master-data-source-name    | Attribute  | Master data source name                                                  |
-| slave-data-source-names    | Attribute  | Slave data source names, multiple data source names separated with comma |
-| load-balance-algorithm-ref | Attribute  | Load balance algorithm name                                              |
-
-\<master-slave:load-balance-algorithm />
-
-| *Name*    | *Type*     | *Description*                     |
-| --------- | ---------- | --------------------------------- |
-| id        | Attribute  | Load balance algorithm name       |
-| type      | Attribute  | Load balance algorithm type       |
-| props (?) | Tag        | Load balance algorithm properties |
-
-Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance) for more details about type of algorithm.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.en.md
index b3aa020e74..f700909dc1 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.en.md
@@ -62,7 +62,7 @@ try (
 ### Data Source Configuration
 
 It is divided into single data source configuration and multi data source configuration.
-Single data source configuration is used for data encryption rules; and multi data source configuration is used for fragmentation, read-write separation and other rules.
+Single data source configuration used for data encryption rules; and multi data source configuration used for fragmentation, primary-replica replication and other rules.
 If features such as encryption and sharding are used in combination, a multi data source configuration should be used.
 
 #### Single Data Source Configuration
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/read-write-split.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/primary-replica-replication.cn.md
similarity index 88%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/read-write-split.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/primary-replica-replication.cn.md
index 98683c2f9a..e135684940 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/read-write-split.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/primary-replica-replication.cn.md
@@ -13,8 +13,8 @@ rules:
   dataSources:
     <data-source-name> (+): # 读写分离逻辑数据源名称
       primaryDataSourceName: # 主库数据源名称
-      slaveDataSourceNames: 
-        - <slave-data_source-name> (+) # 从库数据源名称
+      replicaDataSourceNames: 
+        - <replica-data_source-name> (+) # 从库数据源名称
       loadBalancerName: # 负载均衡算法名称
   
   # 负载均衡算法配置
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/read-write-split.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/primary-replica-replication.en.md
similarity index 75%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/read-write-split.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/primary-replica-replication.en.md
index 153bc33b45..552740cf95 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/read-write-split.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/primary-replica-replication.en.md
@@ -1,5 +1,5 @@
 +++
-title = "Read-write Split"
+title = "Primary-Replica Replication"
 weight = 2
 +++
 
@@ -11,10 +11,10 @@ dataSource: # Omit data source configuration
 rules:
 - !PRIMARY_REPLICA_REPLICATION
   dataSources:
-    <data-source-name> (+): # Logic data source name of master slave
+    <data-source-name> (+): # Logic data source name of primary-replica replication
       primaryDataSourceName: # Primary data source name
-      slaveDataSourceNames: 
-        - <slave-data-source-name> (+) # Slave data source name
+      replicaDataSourceNames: 
+        - <replica-data-source-name> (+) # Replica data source name
       loadBalancerName: # Load balance algorithm name
   
   # Load balance algorithm configuration
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace.cn.md
index 2154288372..8ee1c17b45 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace.cn.md
@@ -44,9 +44,9 @@ weight = 4
      </util:properties>
      <governance:reg-center id="regCenter" type="Zookeeper" server-lists="localhost:2181" />
      <governance:config-center id="configCenter" type="ZooKeeper" server-lists="localhost:2182" />
-     <governance:data-source id="shardingDatabasesTablesDataSource" data-source-ref="realShardingDatabasesTablesDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
-     <governance:slave-data-source id="masterSlaveDataSource" data-source-ref="realMasterSlaveDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
-     <governance:data-source id="encryptDataSource" data-source-ref="realEncryptDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
+     <governance:data-source id="shardingDatabasesTablesDataSource" data-source-names="realShardingDatabasesTablesDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
+     <governance:data-source id="primaryReplicaReplicationDataSource" data-source-names="realPrimaryReplicaReplicationDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
+     <governance:data-source id="encryptDataSource" data-source-names="realEncryptDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
 </beans>
 ```
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace.en.md
index ac7e10e1aa..e8c3a0984e 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace.en.md
@@ -44,9 +44,8 @@ weight = 4
      </util:properties>
      <governance:reg-center id="regCenter" type="Zookeeper" server-lists="localhost:2181" />
      <governance:config-center id="configCenter" type="ZooKeeper" server-lists="localhost:2182" />
-     <governance:data-source id="shardingDatabasesTablesDataSource" data-source-ref="realShardingDatabasesTablesDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
-     <governance:slave-data-source id="masterSlaveDataSource" data-source-ref="realMasterSlaveDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
-     <governance:data-source id="encryptDataSource" data-source-ref="realEncryptDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
+     <governance:data-source id="shardingDatabasesTablesDataSource" data-source-names="realShardingDatabasesTablesDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
+     <governance:data-source id="encryptDataSource" data-source-names="realEncryptDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
 </beans>
 ```
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/sharding/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/sharding/_index.en.md
index 243ea525f6..3ac5b24922 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/sharding/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/sharding/_index.en.md
@@ -6,7 +6,7 @@ chapter = true
 
 Data sharding is the basic capability of Apache ShardingSphere. 
 This section uses data sharding as an example.
-The usage of functions such as read-write-splitting, consensus replication, data encryption, shadow database is completely consistent with data sharding, as long as the corresponding rules are configured. 
+The usage of functions such as primary-replica replication, consensus replication, data encryption, shadow database is completely consistent with data sharding, as long as the corresponding rules are configured. 
 Multiple rules can be appended.
 
 Please refer to [Configuration Manual](/en/user-manual/shardingsphere-jdbc/configuration/) for more details.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/sharding/hint.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/sharding/hint.cn.md
index a2d9bb5c50..0845857e7b 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/sharding/hint.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/sharding/hint.cn.md
@@ -105,7 +105,7 @@ try (HintManager hintManager = HintManager.getInstance();
 
 #### 设置主库路由
 
-- 使用 `hintManager.setMasterRouteOnly` 设置主库路由。
+- 使用 `hintManager.setPrimaryRouteOnly` 设置主库路由。
 
 #### 清除分片键值
 
@@ -119,7 +119,7 @@ try (
         HintManager hintManager = HintManager.getInstance();
         Connection conn = dataSource.getConnection();
         PreparedStatement preparedStatement = conn.prepareStatement(sql)) {
-    hintManager.setMasterRouteOnly();
+    hintManager.setPrimaryRouteOnly();
     try (ResultSet rs = preparedStatement.executeQuery()) {
         while (rs.next()) {
             // ...
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/sharding/hint.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/sharding/hint.en.md
index 2cb6e996a2..b22d3cf5b2 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/sharding/hint.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/sharding/hint.en.md
@@ -11,7 +11,7 @@ Users can add sharding values to HintManager, and those values only take effect
 Usage of hint:
 
 * Sharding columns are not in SQL and table definition, but in external business logic.
-* Some operations forced to do in the master database.
+* Some operations forced to do in the primary database.
 
 ## Usage
 
@@ -97,15 +97,15 @@ try (HintManager hintManager = HintManager.getInstance();
 }
 ```
 
-### Master Route with Hint
+### Primary Route with Hint
 
 #### Get HintManager
 
 Be the same as sharding based on hint.
 
-#### Configure Master Database Route
+#### Configure Primary Database Route
 
-- Use `hintManager.setMasterRouteOnly` to configure master database route.
+- Use `hintManager.setPrimaryRouteOnly` to configure primary database route.
 
 #### Clean Hint Value
 
@@ -119,7 +119,7 @@ try (
         HintManager hintManager = HintManager.getInstance();
         Connection conn = dataSource.getConnection();
         PreparedStatement preparedStatement = conn.prepareStatement(sql)) {
-    hintManager.setMasterRouteOnly();
+    hintManager.setPrimaryRouteOnly();
     try (ResultSet rs = preparedStatement.executeQuery()) {
         while (rs.next()) {
             // ...
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/configuration/_index.en.md b/docs/document/content/user-manual/shardingsphere-proxy/configuration/_index.en.md
index 04b74f4ca4..500a23ab09 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/configuration/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/configuration/_index.en.md
@@ -10,6 +10,6 @@ through which developer can quickly and clearly understand the functions provide
 This chapter is a configuration manual for ShardingSphere-Proxy, which can also be referred to as a dictionary if necessary.
 
 ShardingSphere-Proxy only provided YAML configuration. 
-By configuration, application developers can flexibly use data sharding, read-write splitting, consensus replication, data encryption, shadow database or the combination of them.
+By configuration, application developers can flexibly use data sharding, primary-replica replication, consensus replication, data encryption, shadow database or the combination of them.
 
 Rule configuration keeps consist with YAML configuration of ShardingSphere-JDBC.
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/configuration/authentication.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/configuration/authentication.cn.md
index 9f612518df..0ddebf94cd 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/configuration/authentication.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/configuration/authentication.cn.md
@@ -13,5 +13,5 @@ authentication:
       password: root # 自定义用户名
     sharding: # 自定义用户名
       password: sharding # 自定义用户名
-      authorizedSchemas: sharding_db, masterslave_db # 该用户授权可访问的数据库，多个用逗号分隔。缺省将拥有 root 权限，可访问全部数据库。
+      authorizedSchemas: sharding_db, primary_replica_replication_db # 该用户授权可访问的数据库，多个用逗号分隔。缺省将拥有 root 权限，可访问全部数据库。
 ```
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/configuration/authentication.en.md b/docs/document/content/user-manual/shardingsphere-proxy/configuration/authentication.en.md
index e10d848fbf..5a04a207a0 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/configuration/authentication.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/configuration/authentication.en.md
@@ -12,5 +12,5 @@ authentication:
       password: root # Self-defined password
     sharding: # Self-defined username
       password: sharding # Self-defined password
-      authorizedSchemas: sharding_db, masterslave_db # Schemas authorized to this user, please use commas to connect multiple schemas. Default authorized schemas is all of the schemas.
+      authorizedSchemas: sharding_db, primary_replica_replication_db # Schemas authorized to this user, please use commas to connect multiple schemas. Default authorized schemas is all of the schemas.
 ```
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/usage/governance.en.md b/docs/document/content/user-manual/shardingsphere-proxy/usage/governance.en.md
index 9b312acfed..e808af803a 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/usage/governance.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/usage/governance.en.md
@@ -3,7 +3,7 @@ title = "Governance"
 weight = 2
 +++
 
-ShardingSphere-Proxy use SPI to support [Governance](/en/features/governance/management/), realize the unified management of configurations and metadata, as well as instance disabling and slave disabling.
+ShardingSphere-Proxy use SPI to support [Governance](/en/features/governance/management/), realize the unified management of configurations and metadata, as well as instance disabling and replica disabling.
 
 ## Zookeeper
 
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/usage/sctl.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/usage/sctl.cn.md
index 4492b136af..4ce52d67d2 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/usage/sctl.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/usage/sctl.cn.md
@@ -12,12 +12,12 @@ SCTL (ShardingSphere Control Language) 为 ShardingSphere 特有的控制语句
 |sctl:show transaction_type               | 查询当前连接的事务类型                                                                             |
 |sctl:show cached_connections             | 查询当前连接中缓存的物理数据库连接个数                                                               |
 |sctl:explain SQL                         | 查看逻辑 SQL 的执行计划，例：sctl:explain select * from t_order;                                   |
-|sctl:hint set MASTER_ONLY=true           | 针对当前连接，是否将数据库操作强制路由到主库                                                          |
+|sctl:hint set PRIMARY_ONLY=true          | 针对当前连接，是否将数据库操作强制路由到主库                                                          |
 |sctl:hint set DatabaseShardingValue=yy   | 针对当前连接，设置 hint 仅对数据库分片有效，并添加分片值，yy：数据库分片值                               |
 |sctl:hint addDatabaseShardingValue xx=yy | 针对当前连接，为表 xx 添加分片值 yy，xx：逻辑表名称，yy：数据库分片值                                   |
 |sctl:hint addTableShardingValue xx=yy    | 针对当前连接，为表 xx 添加分片值 yy，xx：逻辑表名称，yy：表分片值                                       |
-|sctl:hint clear                          | 针对当前连接，清除 hint 所有设置                                                                    |
-|sctl:hint show status                    | 针对当前连接，查询 hint 状态，master_only:true/false，sharding_type:databases_only/databases_tables |
+|sctl:hint clear                          | 针对当前连接，清除 hint 所有设置                                                                     |
+|sctl:hint show status                    | 针对当前连接，查询 hint 状态，primary_only:true/false，sharding_type:databases_only/databases_tables |
 |sctl:hint show table status              | 针对当前连接，查询逻辑表的 hint 分片值                                                               |
 
 ShardingSphere-Proxy 默认不支持 hint，如需支持，请在 `conf/server.yaml` 中，将 `properties` 的属性 `proxy-hint-enabled` 设置为 true。
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/usage/sctl.en.md b/docs/document/content/user-manual/shardingsphere-proxy/usage/sctl.en.md
index e9c2e2bbde..75371e76c6 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/usage/sctl.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/usage/sctl.en.md
@@ -5,18 +5,18 @@ weight = 4
 
 SCTL (ShardingSphere-Proxy control language) supports modify and query the state of Sharing-Proxy at runtime. The current supported syntax is:
 
-| Statement                               | Function                                                                                                         | Example                                        |
-|:----------------------------------------|:-----------------------------------------------------------------------------------------------------------------|:-----------------------------------------------|
-|sctl:set transaction_type=XX             | Modify transaction_type of the current connection, supports LOCAL, XA, BASE                                      | sctl:set transaction_type=XA                   |
-|sctl:show transaction_type               | Query the transaction type of the current connection                                                             | sctl:show transaction_type                     |
-|sctl:show cached_connections             | Query the number of cached physical database connections in the current connection                               | sctl:show cached_connections                   |
-|sctl:explain SQL                         | View the execution plan for logical SQL.                                                                         | sctl:explain select * from t_order             |
-|sctl:hint set MASTER_ONLY=true           | For current connection, set database operation force route to master database only or not                        | sctl:hint set MASTER_ONLY=true                 |
-|sctl:hint set DatabaseShardingValue=yy   | For current connection, set sharding value for database sharding only, yy: sharding value                        | sctl:hint set DatabaseShardingValue=100        |
-|sctl:hint addDatabaseShardingValue xx=yy | For current connection, add sharding value for database, xx: logic table, yy: sharding value                     | sctl:hint addDatabaseShardingValue t_order=100 |
-|sctl:hint addTableShardingValue xx=yy    | For current connection, add sharding value for table, xx: logic table, yy: sharding value                        | sctl:hint addTableShardingValue t_order=100    |
-|sctl:hint clear                          | For current connection, clear all hint settings                                                                  | sctl:hint clear                                |
-|sctl:hint show status                    | For current connection, query hint status, master_only:true/false, sharding_type:databases_only/databases_tables | sctl:hint show status                          |
-|sctl:hint show table status              | For current connection, query sharding values of logic tables                                                    | sctl:hint show table status                    |
+| Statement                               | Function                                                                                                          | Example                                        |
+|:----------------------------------------|:------------------------------------------------------------------------------------------------------------------|:-----------------------------------------------|
+|sctl:set transaction_type=XX             | Modify transaction_type of the current connection, supports LOCAL, XA, BASE                                       | sctl:set transaction_type=XA                   |
+|sctl:show transaction_type               | Query the transaction type of the current connection                                                              | sctl:show transaction_type                     |
+|sctl:show cached_connections             | Query the number of cached physical database connections in the current connection                                | sctl:show cached_connections                   |
+|sctl:explain SQL                         | View the execution plan for logical SQL.                                                                          | sctl:explain select * from t_order             |
+|sctl:hint set PRIMARY_ONLY=true          | For current connection, set database operation force route to primary database only or not                        | sctl:hint set PRIMARY_ONLY=true                |
+|sctl:hint set DatabaseShardingValue=yy   | For current connection, set sharding value for database sharding only, yy: sharding value                         | sctl:hint set DatabaseShardingValue=100        |
+|sctl:hint addDatabaseShardingValue xx=yy | For current connection, add sharding value for database, xx: logic table, yy: sharding value                      | sctl:hint addDatabaseShardingValue t_order=100 |
+|sctl:hint addTableShardingValue xx=yy    | For current connection, add sharding value for table, xx: logic table, yy: sharding value                         | sctl:hint addTableShardingValue t_order=100    |
+|sctl:hint clear                          | For current connection, clear all hint settings                                                                   | sctl:hint clear                                |
+|sctl:hint show status                    | For current connection, query hint status, primary_only:true/false, sharding_type:databases_only/databases_tables | sctl:hint show status                          |
+|sctl:hint show table status              | For current connection, query sharding values of logic tables                                                     | sctl:hint show table status                    |
 
 ShardingSphere-Proxy does not support hint by default, to support it, set the `properties` property `proxy-hint-enabled` to true in `conf/server.yaml`.
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/usage/startup.en.md b/docs/document/content/user-manual/shardingsphere-proxy/usage/startup.en.md
index 8bb4ca33b7..f519adc31e 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/usage/startup.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/usage/startup.en.md
@@ -7,7 +7,7 @@ weight = 1
 
 1. Download the latest version of ShardingSphere-Proxy.
 1. If users use docker, they can implement `docker pull shardingsphere/shardingsphere-proxy` to get the clone. Please refer to [Docker Clone](/en/user-manual/shardingsphere-proxy/docker/) for more details.
-1. After the decompression, revise `conf/server.yaml` and documents begin with `config-` prefix, `conf/config-xxx.yaml` for example, to configure sharding rules and read-write split rules. Please refer to [Configuration Manual](/en/user-manual/shardingsphere-proxy/configuration/) for the configuration method.
+1. After the decompression, revise `conf/server.yaml` and documents begin with `config-` prefix, `conf/config-xxx.yaml` for example, to configure sharding rules and primary-replica replication rules. Please refer to [Configuration Manual](/en/user-manual/shardingsphere-proxy/configuration/) for the configuration method.
 1. Please run `bin/start.sh` for Linux operating system; run `bin/start.bat` for Windows operating system to start ShardingSphere-Proxy. To configure start port and document location, please refer to [Quick Start](/en/quick-start/shardingsphere-proxy-quick-start/).
 
 ## Using PostgreSQL
diff --git a/docs/document/content/user-manual/shardingsphere-ui/usage/config-center.en.md b/docs/document/content/user-manual/shardingsphere-ui/usage/config-center.en.md
index 009c90408f..8e79e73f2a 100644
--- a/docs/document/content/user-manual/shardingsphere-ui/usage/config-center.en.md
+++ b/docs/document/content/user-manual/shardingsphere-ui/usage/config-center.en.md
@@ -10,7 +10,7 @@ Zookeeper support is provided now, and the support for other config centers will
 
 ## Rule Config
 
-+ After added and activated a config center, the configuration of all data sources in the current active config center can be obtained, including data sharding, read-write split, properties, and so on.
++ After added and activated a config center, the configuration of all data sources in the current active config center can be obtained, including data sharding, primary-replica replication, properties, and so on.
 
 + The configuration can be modified by the YAML format.
 
diff --git a/docs/document/content/user-manual/shardingsphere-ui/usage/registry-center.en.md b/docs/document/content/user-manual/shardingsphere-ui/usage/registry-center.en.md
index 546364ce0c..6bc85ba5f1 100644
--- a/docs/document/content/user-manual/shardingsphere-ui/usage/registry-center.en.md
+++ b/docs/document/content/user-manual/shardingsphere-ui/usage/registry-center.en.md
@@ -14,4 +14,4 @@ Zookeeper support is provided now, and the support for other registries will be
 
 + Users can disable or enable the instance by operate button.
 
-+ Users can disable or enable the access to slave database.
++ Users can disable or enable the access to replica database.
