commit 09b8be5c1c746910a66bbe2510155d9f3fbbc5dc
Author: Haoran Meng <menghaoranss@gmail.com>
Date:   Mon Aug 31 20:52:19 2020 +0800

    Revise document for governance (#7188)
    
    * Revise document for governance
    
    * Revise contributor document

diff --git a/docs/community/content/contribute/document-contributor.cn.md b/docs/community/content/contribute/document-contributor.cn.md
index c1540af871..89ec5b95b3 100644
--- a/docs/community/content/contribute/document-contributor.cn.md
+++ b/docs/community/content/contribute/document-contributor.cn.md
@@ -37,27 +37,32 @@ shardingsphere
   ├─document
   │  ├─archetypes
   │  ├─content
+  │  │  ├─dev-manual
   │  │  ├─downloads
   │  │  ├─faq
   │  │  ├─features
-  │  │  │  ├─orchestration
+  │  │  │  ├─encrypt
+  │  │  │  ├─governance
+  │  │  │  ├─pluggable-architecture
   │  │  │  ├─read-write-split
+  │  │  │  ├─replica
+  │  │  │  ├─scaling
+  │  │  │  ├─shadow
   │  │  │  ├─sharding
   │  │  │  │  ├─concept
-  │  │  │  │  ├─other-features
   │  │  │  │  ├─principle
   │  │  │  │  └─use-norms
-  │  │  │  ├─spi
   │  │  │  ├─test-engine
   │  │  │  └─transaction
   │  │  │      ├─concept
   │  │  │      ├─function
-  │  │  │      └─principle
-  │  │  ├─manual
+  │  │  │      └─use-norms
+  │  │  ├─user-manual
   │  │  │  ├─shardingsphere-jdbc
   │  │  │  │  ├─configuration
   │  │  │  │  └─usage
   │  │  │  ├─shardingsphere-proxy
+  │  │  │  ├─shardingsphere-scaling
   │  │  │  ├─shardingsphere-sidecar
   │  │  │  └─shardingsphere-ui
   │  │  ├─overview
diff --git a/docs/community/content/contribute/document-contributor.en.md b/docs/community/content/contribute/document-contributor.en.md
index 9ba3b9568c..bdc1e74c01 100644
--- a/docs/community/content/contribute/document-contributor.en.md
+++ b/docs/community/content/contribute/document-contributor.en.md
@@ -36,27 +36,32 @@ shardingsphere
   ├─document
   │  ├─archetypes
   │  ├─content
+  │  │  ├─dev-manual
   │  │  ├─downloads
   │  │  ├─faq
   │  │  ├─features
-  │  │  │  ├─orchestration
+  │  │  │  ├─encrypt
+  │  │  │  ├─governance
+  │  │  │  ├─pluggable-architecture
   │  │  │  ├─read-write-split
+  │  │  │  ├─replica
+  │  │  │  ├─scaling
+  │  │  │  ├─shadow
   │  │  │  ├─sharding
   │  │  │  │  ├─concept
-  │  │  │  │  ├─other-features
   │  │  │  │  ├─principle
   │  │  │  │  └─use-norms
-  │  │  │  ├─spi
   │  │  │  ├─test-engine
   │  │  │  └─transaction
   │  │  │      ├─concept
-  │  │  │      ├─function
-  │  │  │      └─principle
-  │  │  ├─manual
+  │  │  │      ├─principle
+  │  │  │      └─use-norms
+  │  │  ├─user-manual
   │  │  │  ├─shardingsphere-jdbc
   │  │  │  │  ├─configuration
   │  │  │  │  └─usage
   │  │  │  ├─shardingsphere-proxy
+  │  │  │  ├─shardingsphere-scaling
   │  │  │  ├─shardingsphere-sidecar
   │  │  │  └─shardingsphere-ui
   │  │  ├─overview
diff --git a/docs/community/content/contribute/release.cn.md b/docs/community/content/contribute/release.cn.md
index a56cf48fa9..a1c2cced2c 100644
--- a/docs/community/content/contribute/release.cn.md
+++ b/docs/community/content/contribute/release.cn.md
@@ -535,7 +535,7 @@ Hi all,
 Apache ShardingSphere Team is glad to announce the new release of Apache ShardingSphere ${RELEASE.VERSION}.
 
 ShardingSphere is an open-source ecosystem consisted of a set of distributed database middleware solutions, including 2 independent products, ShardingSphere-JDBC & ShardingSphere-Proxy. 
-They both provide functions of data sharding, distributed transaction and database orchestration, applicable in a variety of situations such as Java isomorphism, heterogeneous language. 
+They both provide functions of data sharding, distributed transaction and database governance, applicable in a variety of situations such as Java isomorphism, heterogeneous language. 
 Aiming at reasonably making full use of the computation and storage capacity of the database in a distributed system, ShardingSphere defines itself as a middleware, rather than a totally new type of database. 
 As the cornerstone of many enterprises, relational database still takes a huge market share. 
 Therefore, at the current stage, we prefer to focus on its increment instead of a total overturn.
diff --git a/docs/community/content/contribute/release.en.md b/docs/community/content/contribute/release.en.md
index 398c48f2bb..a9a542e9c0 100644
--- a/docs/community/content/contribute/release.en.md
+++ b/docs/community/content/contribute/release.en.md
@@ -541,7 +541,7 @@ Hi all,
 Apache ShardingSphere Team is glad to announce the new release of Apache ShardingSphere ${RELEASE.VERSION}.
 
 ShardingSphere is an open-source ecosystem consisted of a set of distributed database middleware solutions, including 2 independent products, ShardingSphere-JDBC & ShardingSphere-Proxy. 
-They both provide functions of data sharding, distributed transaction and database orchestration, applicable in a variety of situations such as Java isomorphism, heterogeneous language. 
+They both provide functions of data sharding, distributed transaction and database governance, applicable in a variety of situations such as Java isomorphism, heterogeneous language. 
 Aiming at reasonably making full use of the computation and storage capacity of the database in a distributed system, ShardingSphere defines itself as a middleware, rather than a totally new type of database. 
 As the cornerstone of many enterprises, relational database still takes a huge market share. 
 Therefore, at the current stage, we prefer to focus on its increment instead of a total overturn.
diff --git a/docs/community/content/contribute/release_ui.cn.md b/docs/community/content/contribute/release_ui.cn.md
index 4ef5d5adaa..90eaf2e574 100644
--- a/docs/community/content/contribute/release_ui.cn.md
+++ b/docs/community/content/contribute/release_ui.cn.md
@@ -385,7 +385,7 @@ Hi all,
 Apache ShardingSphere Team is glad to announce the new release of Apache ShardingSphere UI ${RELEASE.VERSION}.
 
 ShardingSphere is an open-source ecosystem consisted of a set of distributed database middleware solutions, including 2 independent products, ShardingSphere-JDBC & ShardingSphere-Proxy. 
-They both provide functions of data sharding, distributed transaction and database orchestration, applicable in a variety of situations such as Java isomorphism, heterogeneous language. 
+They both provide functions of data sharding, distributed transaction and database governance, applicable in a variety of situations such as Java isomorphism, heterogeneous language. 
 Aiming at reasonably making full use of the computation and storage capacity of the database in a distributed system, ShardingSphere defines itself as a middleware, rather than a totally new type of database. 
 As the cornerstone of many enterprises, relational database still takes a huge market share. 
 Therefore, at the current stage, we prefer to focus on its increment instead of a total overturn.
diff --git a/docs/community/content/contribute/release_ui.en.md b/docs/community/content/contribute/release_ui.en.md
index 69d32ee0b1..9c5dcb1500 100644
--- a/docs/community/content/contribute/release_ui.en.md
+++ b/docs/community/content/contribute/release_ui.en.md
@@ -391,7 +391,7 @@ Hi all,
 Apache ShardingSphere Team is glad to announce the new release of Apache ShardingSphere UI ${RELEASE.VERSION}.
 
 ShardingSphere is an open-source ecosystem consisted of a set of distributed database middleware solutions, including 2 independent products, ShardingSphere-JDBC & ShardingSphere-Proxy. 
-They both provide functions of data sharding, distributed transaction and database orchestration, applicable in a variety of situations such as Java isomorphism, heterogeneous language. 
+They both provide functions of data sharding, distributed transaction and database governance, applicable in a variety of situations such as Java isomorphism, heterogeneous language. 
 Aiming at reasonably making full use of the computation and storage capacity of the database in a distributed system, ShardingSphere defines itself as a middleware, rather than a totally new type of database. 
 As the cornerstone of many enterprises, relational database still takes a huge market share. 
 Therefore, at the current stage, we prefer to focus on its increment instead of a total overturn.
diff --git a/docs/document/content/faq/_index.cn.md b/docs/document/content/faq/_index.cn.md
index 58543222b8..7b19a4a491 100644
--- a/docs/document/content/faq/_index.cn.md
+++ b/docs/document/content/faq/_index.cn.md
@@ -18,8 +18,6 @@ chapter = true
 
 ShardingSphere使用lombok实现极简代码。关于更多使用和安装细节，请参考[lombok官网](https://projectlombok.org/download.html)。
 
-shardingsphere-orchestration-reg模块需要先执行`mvn install`命令，根据protobuf文件生成gRPC相关的java文件。
-
 ## 3. 使用Spring命名空间时找不到xsd?
 
 回答：
diff --git a/docs/document/content/faq/_index.en.md b/docs/document/content/faq/_index.en.md
index 8697bb4a82..79d1f64966 100644
--- a/docs/document/content/faq/_index.en.md
+++ b/docs/document/content/faq/_index.en.md
@@ -17,8 +17,6 @@ Answer:
 
 ShardingSphere uses lombok to enable minimal coding. For more details about using and installment, please refer to the official website of [lombok](https://projectlombok.org/download.html).
 
-shardingsphere-orchestration-reg module needs to execute `mvn install` command first, and generate gRPC java files according to protobuf files.
-
 ## 3. Why is xsd unable to be found when Spring Namespace is used?
 
 Answer:
diff --git a/docs/document/content/features/governance/management/config-center.cn.md b/docs/document/content/features/governance/management/config-center.cn.md
index 6ea895919d..c5cefb324b 100644
--- a/docs/document/content/features/governance/management/config-center.cn.md
+++ b/docs/document/content/features/governance/management/config-center.cn.md
@@ -49,7 +49,7 @@ sql.show: true
 多个数据库连接池的集合，不同数据库连接池属性自适配（例如：DBCP，C3P0，Druid, HikariCP）。
 
 ```yaml
-ds_0: !!org.apache.shardingsphere.orchestration.core.common.yaml.config.YamlDataSourceConfiguration
+ds_0: !!org.apache.shardingsphere.governance.core.common.yaml.config.YamlDataSourceConfiguration
   dataSourceClassName: com.zaxxer.hikari.HikariDataSource
   props:
     url: jdbc:mysql://127.0.0.1:3306/demo_ds_0?serverTimezone=UTC&useSSL=false
@@ -61,7 +61,7 @@ ds_0: !!org.apache.shardingsphere.orchestration.core.common.yaml.config.YamlData
     minPoolSize: 1
     username: root
     maxLifetimeMilliseconds: 1800000
-ds_1: !!org.apache.shardingsphere.orchestration.core.common.yaml.configYamlDataSourceConfiguration
+ds_1: !!org.apache.shardingsphere.governance.core.common.yaml.configYamlDataSourceConfiguration
   dataSourceClassName: com.zaxxer.hikari.HikariDataSource
   props:
     url: jdbc:mysql://127.0.0.1:3306/demo_ds_1?serverTimezone=UTC&useSSL=false
diff --git a/docs/document/content/features/governance/management/config-center.en.md b/docs/document/content/features/governance/management/config-center.en.md
index 63e915d3c3..434f1a9e9b 100644
--- a/docs/document/content/features/governance/management/config-center.en.md
+++ b/docs/document/content/features/governance/management/config-center.en.md
@@ -49,7 +49,7 @@ sql.show: true
 A collection of multiple database connection pools, whose properties (e.g. DBCP, C3P0, Druid and HikariCP) are configured by users themselves.
 
 ```yaml
-ds_0: !!org.apache.shardingsphere.orchestration.core.common.yaml.config.YamlDataSourceConfiguration
+ds_0: !!org.apache.shardingsphere.governance.core.common.yaml.config.YamlDataSourceConfiguration
   dataSourceClassName: com.zaxxer.hikari.HikariDataSource
   props:
     url: jdbc:mysql://127.0.0.1:3306/demo_ds_0?serverTimezone=UTC&useSSL=false
@@ -61,7 +61,7 @@ ds_0: !!org.apache.shardingsphere.orchestration.core.common.yaml.config.YamlData
     minPoolSize: 1
     username: root
     maxLifetimeMilliseconds: 1800000
-ds_1: !!org.apache.shardingsphere.orchestration.core.common.yaml.config.YamlDataSourceConfiguration
+ds_1: !!org.apache.shardingsphere.governance.core.common.yaml.config.YamlDataSourceConfiguration
   dataSourceClassName: com.zaxxer.hikari.HikariDataSource
   props:
     url: jdbc:mysql://127.0.0.1:3306/demo_ds_1?serverTimezone=UTC&useSSL=false
diff --git a/docs/document/content/features/governance/management/dependency.en.md b/docs/document/content/features/governance/management/dependency.en.md
index b519a38884..c917b01f4f 100644
--- a/docs/document/content/features/governance/management/dependency.en.md
+++ b/docs/document/content/features/governance/management/dependency.en.md
@@ -5,7 +5,7 @@ weight = 4
 
 Apache ShardingSphere uses SPI to load data to the config center/registry/metadata center and disable instances and databases. 
 Currently, Apache ShardingSphere supports frequently used registry centers, Zookeeper, Etcd, Apollo and Nacos. 
-In addition, by injecting them to ShardingSphere with SPI, users can use other third-party config/registry/metadata centers to enable databases orchestration.
+In addition, by injecting them to ShardingSphere with SPI, users can use other third-party config/registry/metadata centers to enable databases governance.
 
 |                                               | *Driver*                                             | *Version* | *Config Center* | *Registry Center* | *Metadata Center* |
 | --------------------------------------------- | ---------------------------------------------------- | --------- | --------------- | ----------------- | ----------------- |
diff --git a/docs/document/content/features/governance/management/metadata-center.cn.md b/docs/document/content/features/governance/management/metadata-center.cn.md
index b9f8fdde74..828525ae12 100644
--- a/docs/document/content/features/governance/management/metadata-center.cn.md
+++ b/docs/document/content/features/governance/management/metadata-center.cn.md
@@ -14,14 +14,13 @@ weight = 3
 元数据中心在定义的命名空间和治理节点的 `metadata` 节点下，以 YAML 格式存储，每个逻辑数据源独立存储。
 
 ```
-├─orchestration-namespace
-│   ├─orchestration-name
-│   │   ├──metadata
-│   │   │    ├──schema_1
-│   │   │    │    ├── [YAML text contents]
-│   │   │    ├──schema_2
-│   │   │    │    ├── [YAML text contents]
-│   │   │    ├──....
+├─governance-name
+│   ├──metadata
+│   │    ├──schema_1
+│   │    │    ├── [YAML text contents]
+│   │    ├──schema_2
+│   │    │    ├── [YAML text contents]
+│   │    ├──....
 ```
 
 ## YAML Text Contents
diff --git a/docs/document/content/features/governance/management/metadata-center.en.md b/docs/document/content/features/governance/management/metadata-center.en.md
index 051ee97154..cd4ddaec42 100644
--- a/docs/document/content/features/governance/management/metadata-center.en.md
+++ b/docs/document/content/features/governance/management/metadata-center.en.md
@@ -11,17 +11,16 @@ weight = 3
 
 ## Data Structure in Metadata Center
 
-The metadata center stores metadata in YAML under the metadata node of the defined namespace and orchestration node, and each logical data source is stored independently.
+The metadata center stores metadata in YAML under the metadata node of the defined governance node, and each logical data source is stored independently.
 
 ```
-├─orchestration-namespace
-│   ├─orchestration-name
-│   │   ├──metadata
-│   │   │    ├──schema1
-│   │   │    │    ├── [YAML text contents]     
-│   │   │    ├──schema2
-│   │   │    │    ├── [YAML text contents]    
-│   │   │    ├──....
+├─governance-name
+│   ├──metadata
+│   │    ├──schema1
+│   │    │    ├── [YAML text contents]     
+│   │    ├──schema2
+│   │    │    ├── [YAML text contents]    
+│   │    ├──....
 ```
 
 ## YAML text contents
diff --git a/docs/document/content/overview/_index.en.md b/docs/document/content/overview/_index.en.md
index e47e958026..52caf5aae5 100644
--- a/docs/document/content/overview/_index.en.md
+++ b/docs/document/content/overview/_index.en.md
@@ -12,7 +12,7 @@ chapter = true
 [![Stargazers over time](https://starchart.cc/apache/shardingsphere.svg)](https://starchart.cc/apache/shardingsphere)
 
 Apache ShardingSphere is an open-source ecosystem consisted of a set of distributed database middleware solutions, including 3 independent products, JDBC, Proxy & Sidecar (Planning). 
-They all provide functions of data sharding, distributed transaction and database orchestration, applicable in a variety of situations such as Java isomorphism, heterogeneous language and cloud native.
+They all provide functions of data sharding, distributed transaction and database governance, applicable in a variety of situations such as Java isomorphism, heterogeneous language and cloud native.
 
 Aiming at reasonably making full use of the computation and storage capacity of database in distributed system, ShardingSphere defines itself as a middleware, rather than a totally new type of database.
 As the cornerstone of many enterprises, relational database still takes a huge market share. Therefore, at current stage, we prefer to focus on its increment instead of a total overturn.
@@ -114,7 +114,7 @@ Architects can adjust the system architecture to the most applicable one to curr
 * XA transaction
 * BASE transaction
 
-### Database Orchestration
+### Database Governance
 
 * Distributed Governance
 * Data migration & Scale out
diff --git a/docs/document/content/quick-start/shardingsphere-scaling-quick-start.cn.md b/docs/document/content/quick-start/shardingsphere-scaling-quick-start.cn.md
index 20177ab77f..65f26d9e81 100644
--- a/docs/document/content/quick-start/shardingsphere-scaling-quick-start.cn.md
+++ b/docs/document/content/quick-start/shardingsphere-scaling-quick-start.cn.md
@@ -33,7 +33,7 @@ curl -X POST \
   -H 'content-type: application/json' \
   -d '{
    "ruleConfiguration": {
-      "sourceDatasource": "ds_0: !!org.apache.shardingsphere.orchestration.core.common.yaml.config.YamlDataSourceConfiguration\n  dataSourceClassName: com.zaxxer.hikari.HikariDataSource\n  props:\n    jdbcUrl: jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC&useSSL=false\n    username: root\n    password: '\''123456'\'keyGenerateStrategy
+      "sourceDatasource": "ds_0: !!org.apache.shardingsphere.governance.core.common.yaml.config.YamlDataSourceConfiguration\n  dataSourceClassName: com.zaxxer.hikari.HikariDataSource\n  props:\n    jdbcUrl: jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC&useSSL=false\n    username: root\n    password: '\''123456'\'keyGenerateStrategy
 ```
 
 更多管理接口详情请参见[使用手册](/cn/user-manual/shardingsphere-scaling/usage/)。
diff --git a/docs/document/content/quick-start/shardingsphere-scaling-quick-start.en.md b/docs/document/content/quick-start/shardingsphere-scaling-quick-start.en.md
index ee4bbddccb..51dbf2feb2 100644
--- a/docs/document/content/quick-start/shardingsphere-scaling-quick-start.en.md
+++ b/docs/document/content/quick-start/shardingsphere-scaling-quick-start.en.md
@@ -33,7 +33,7 @@ curl -X POST \
   -H 'content-type: application/json' \
   -d '{
    "ruleConfiguration": {
-      "sourceDatasource": "ds_0: !!org.apache.shardingsphere.orchestration.core.common.yaml.config.YamlDataSourceConfiguration\n  dataSourceClassName: com.zaxxer.hikari.HikariDataSource\n  props:\n    jdbcUrl: jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC&useSSL=false\n    username: root\n    password: '\''123456'\'keyGenerateStrategy
+      "sourceDatasource": "ds_0: !!org.apache.shardingsphere.governance.core.common.yaml.config.YamlDataSourceConfiguration\n  dataSourceClassName: com.zaxxer.hikari.HikariDataSource\n  props:\n    jdbcUrl: jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC&useSSL=false\n    username: root\n    password: '\''123456'\'keyGenerateStrategy
 ```
 
 Please refer to [Configuration Manual](/en/user-manual/shardingsphere-scaling/usage/) for more details. 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/_index.cn.md
index b7b10ad4a9..d02b3a7685 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/_index.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/_index.cn.md
@@ -31,7 +31,7 @@ DataSource dataSource = ShardingSphereDataSourceFactory.createDataSource(dataSou
 
 ### 创建携带治理功能的数据源
 
-通过 OrchestrationShardingSphereDataSourceFactory 工厂创建的 OrchestrationShardingSphereDataSource 实现自 JDBC 的标准接口 DataSource。
+通过 GovernanceShardingSphereDataSourceFactory 工厂创建的 GovernanceShardingSphereDataSource 实现自 JDBC 的标准接口 DataSource。
 
 ```java
 // 构建数据源
@@ -44,9 +44,9 @@ Collection<RuleConfiguration> configurations = // ...
 Properties props = // ...
 
 // 构建注册中心配置对象
-OrchestrationConfiguration orchestrationConfig = // ...
+GovernanceConfiguration governanceConfig = // ...
 
-DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(dataSourceMap, configurations, props, orchestrationConfig);
+DataSource dataSource = GovernanceShardingSphereDataSourceFactory.createDataSource(dataSourceMap, configurations, props, governanceConfig);
 ```
 
 ### 使用数据源
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/_index.en.md
index 6d9aa3cc06..b914d72c4c 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/_index.en.md
@@ -30,9 +30,9 @@ Properties props = // ...
 DataSource dataSource = ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, configurations, props);
 ```
 
-### Create Orchestration DataSource
+### Create Governance DataSource
 
-The OrchestrationShardingSphereDataSource created by OrchestrationShardingSphereDataSourceFactory implements the standard JDBC DataSource interface.
+The GovernanceShardingSphereDataSource created by GovernanceShardingSphereDataSourceFactory implements the standard JDBC DataSource interface.
 
 
 ```java
@@ -45,10 +45,10 @@ Collection<RuleConfiguration> configurations = // ...
 // Build properties
 Properties props = // ...
 
-// Build orchestration configuration
-OrchestrationConfiguration orchestrationConfig = // ...
+// Build governance configuration
+GovernanceConfiguration governanceConfig = // ...
 
-DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(dataSourceMap, configurations, props, orchestrationConfig);
+DataSource dataSource = GovernanceShardingSphereDataSourceFactory.createDataSource(dataSourceMap, configurations, props, governanceConfig);
 ```
 
 ### Use DataSource
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/governance.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/governance.cn.md
index 1e1b4a887a..133d14488f 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/governance.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/governance.cn.md
@@ -9,15 +9,15 @@ weight = 6
 
 *配置入口*
 
-类名称：org.apache.shardingsphere.orchestration.repository.api.config.OrchestrationConfiguration
+类名称：org.apache.shardingsphere.governance.repository.api.config.GovernanceConfiguration
 
 可配置属性：
 
 | *名称*                              | *数据类型*                           | *说明*                                                            |
 | ----------------------------------- | ----------------------------------- | ----------------------------------------------------------------- |
 | name         | String  | 注册中心实例名称 |
-| registryCenterConfiguration         | OrchestrationCenterConfiguration  | 注册中心实例的配置 |
-| additionalConfigCenterConfiguration | OrchestrationCenterConfiguration  | 可选的配置中心实例配置 |
+| registryCenterConfiguration         | GovernanceCenterConfiguration  | 注册中心实例的配置 |
+| additionalConfigCenterConfiguration | GovernanceCenterConfiguration  | 可选的配置中心实例配置 |
 | overwrite | boolean   | 本地配置是否覆盖配置中心配置，如果可覆盖，每次启动都以本地配置为准 |
 
 注册中心的类型可以为Zookeeper或etcd。
@@ -25,7 +25,7 @@ weight = 6
 
 *治理实例配置*
 
-类名称：org.apache.shardingsphere.orchestration.repository.api.config.OrchestrationCenterConfiguration
+类名称：org.apache.shardingsphere.governance.repository.api.config.GovernanceCenterConfiguration
 
 可配置属性：
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/governance.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/governance.en.md
index 8fa1679283..07695510c0 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/governance.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/governance.en.md
@@ -9,29 +9,29 @@ weight = 6
 
 *Configuration Entrance*
 
-Class name: org.apache.shardingsphere.orchestration.repository.api.config.OrchestrationConfiguration
+Class name: org.apache.shardingsphere.governance.repository.api.config.GovernanceConfiguration
 
 Attributes:
 
 | *Name*                              | *Data Type*                         | *Description*                                                                                                       |
 | ----------------------------------- | ----------------------------------- | ------------------------------------------------------------------------------------------------------------------- |
-| name         | String  | Orchestration instance name |
-| registryCenterConfiguration         | OrchestrationCenterConfiguration  | Config of registry-center |
-| additionalConfigCenterConfiguration | OrchestrationCenterConfiguration  | Config additional of config-center |
+| name         | String  | Governance instance name |
+| registryCenterConfiguration         | GovernanceCenterConfiguration  | Config of registry-center |
+| additionalConfigCenterConfiguration | GovernanceCenterConfiguration  | Config additional of config-center |
 
 The type of registryCenter could be Zookeeper or etcd.
 The type of additional ConfigCenter could be Zookeeper or etcd, Apollo, Nacos.
 
-*Orchestration Instance Configuration*
+*Governance Instance Configuration*
 
-Class name: org.apache.shardingsphere.orchestration.repository.api.config.OrchestrationCenterConfiguration
+Class name: org.apache.shardingsphere.governance.repository.api.config.GovernanceCenterConfiguration
 
 Attributes:
 
 | *Name*        | *Data Type* | *Description*                                                                                                                                    |
 | ------------- | ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |
-| type          | String      | Orchestration instance type, such as: Zookeeper, etcd, Apollo, Nacos                                                                             |
-| serverLists   | String      | The list of servers that connect to orchestration instance, including IP and port number, use commas to separate, such as: host1:2181,host2:2181 |                                                                                                                    |
+| type          | String      | Governance instance type, such as: Zookeeper, etcd, Apollo, Nacos                                                                             |
+| serverLists   | String      | The list of servers that connect to governance instance, including IP and port number, use commas to separate, such as: host1:2181,host2:2181 |                                                                                                                    |
 | props         | Properties  | Properties for center instance config, such as options of zookeeper                                                                              |
 | overwrite       | boolean     | Local configurations overwrite config center configurations or not; if they overwrite, each start takes reference of local configurations | 
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/governance.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/governance.cn.md
index 0121d360ec..297aefec42 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/governance.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/governance.cn.md
@@ -8,12 +8,12 @@ weight = 6
 ### 治理
 
 ```properties
-spring.shardingsphere.orchestration.name= # 治理名称
-spring.shardingsphere.orchestration.registry-center.type= # 治理持久化类型。如：Zookeeper, etcd, Apollo, Nacos
-spring.shardingsphere.orchestration.registry-center.server-lists= # 治理服务列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181
-spring.shardingsphere.orchestration.registry-center.props= # 其它配置
-spring.shardingsphere.orchestration.additional-config-center.type= # 可选的配置中心类型。如：Zookeeper, etcd, Apollo, Nacos
-spring.shardingsphere.orchestration.additional-config-center.server-lists= # 可选的配置中心服务列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181
-spring.shardingsphere.orchestration.additional-config-center.props= # 可选的配置中心其它配置
-spring.shardingsphere.orchestration.overwrite= # 本地配置是否覆盖配置中心配置。如果可覆盖，每次启动都以本地配置为准.
+spring.shardingsphere.governance.name= # 治理名称
+spring.shardingsphere.governance.registry-center.type= # 治理持久化类型。如：Zookeeper, etcd, Apollo, Nacos
+spring.shardingsphere.governance.registry-center.server-lists= # 治理服务列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181
+spring.shardingsphere.governance.registry-center.props= # 其它配置
+spring.shardingsphere.governance.additional-config-center.type= # 可选的配置中心类型。如：Zookeeper, etcd, Apollo, Nacos
+spring.shardingsphere.governance.additional-config-center.server-lists= # 可选的配置中心服务列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181
+spring.shardingsphere.governance.additional-config-center.props= # 可选的配置中心其它配置
+spring.shardingsphere.governance.overwrite= # 本地配置是否覆盖配置中心配置。如果可覆盖，每次启动都以本地配置为准.
 ```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/governance.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/governance.en.md
index 6d021090d2..c98e9db65a 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/governance.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/governance.en.md
@@ -8,12 +8,12 @@ weight = 6
 ### Management
 
 ```properties
-spring.shardingsphere.orchestration.name= # Orchestration name
-spring.shardingsphere.orchestration.registry-center.type= # Orchestration instance type. Example:Zookeeper, etcd, Apollo, Nacos
-spring.shardingsphere.orchestration.registry-center.server-lists= # The list of servers that connect to orchestration instance, including IP and port number; use commas to separate
-spring.shardingsphere.orchestration.registry-center.props= # Other properties
-spring.shardingsphere.orchestration.additional-config-center.type= # Additional config center type. Example:Zookeeper, etcd, Apollo, Nacos
-spring.shardingsphere.orchestration.additional-config-center.server-lists= # Additional config center server list. including IP and port number; use commas to separate
-spring.shardingsphere.orchestration.additional-config-center.props= # Additional config center other properties
-spring.shardingsphere.orchestration.overwrite= # Whether to overwrite local configurations with config center configurations; if it can, each initialization should refer to local configurations
+spring.shardingsphere.governance.name= # Governance name
+spring.shardingsphere.governance.registry-center.type= # Governance instance type. Example:Zookeeper, etcd, Apollo, Nacos
+spring.shardingsphere.governance.registry-center.server-lists= # The list of servers that connect to governance instance, including IP and port number; use commas to separate
+spring.shardingsphere.governance.registry-center.props= # Other properties
+spring.shardingsphere.governance.additional-config-center.type= # Additional config center type. Example:Zookeeper, etcd, Apollo, Nacos
+spring.shardingsphere.governance.additional-config-center.server-lists= # Additional config center server list. including IP and port number; use commas to separate
+spring.shardingsphere.governance.additional-config-center.props= # Additional config center other properties
+spring.shardingsphere.governance.overwrite= # Whether to overwrite local configurations with config center configurations; if it can, each initialization should refer to local configurations
 ```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/governance.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/governance.cn.md
index 6d24746744..e4c41644db 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/governance.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/governance.cn.md
@@ -11,21 +11,21 @@ weight = 6
 <?xml version="1.0" encoding="UTF-8"?>
 <beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
-       xmlns:orchestration="http://shardingsphere.apache.org/schema/shardingsphere/orchestration"
+       xmlns:governance="http://shardingsphere.apache.org/schema/shardingsphere/governance"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/orchestration
-                           http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd
+                           http://shardingsphere.apache.org/schema/shardingsphere/governance
+                           http://shardingsphere.apache.org/schema/shardingsphere/governance/governance.xsd
 ">
     
-    <orchestration:reg-center id="regCenter" type="ZooKeeper" server-lists="localhost:2181" />
-    <orchestration:config-center id="configCenter" type="ZooKeeper" server-lists="localhost:2182" />
-    <orchestration:data-source id="shardingDatabasesTablesDataSource" data-source-ref="realShardingDatabasesTablesDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
+    <governance:reg-center id="regCenter" type="ZooKeeper" server-lists="localhost:2181" />
+    <governance:config-center id="configCenter" type="ZooKeeper" server-lists="localhost:2182" />
+    <governance:data-source id="shardingDatabasesTablesDataSource" data-source-ref="realShardingDatabasesTablesDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
 </beans>
 ```
-命名空间: [http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration-5.0.0.xsd)
+命名空间: [http://shardingsphere.apache.org/schema/shardingsphere/governance/governance-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/governance/governance-5.0.0.xsd)
 
-<orchestration:reg-center />
+<governance:reg-center />
 
 | *名称*         | *类型* | *说明*                                                                        |
 | ------------- | ------ | ----------------------------------------------------------------------------- |
@@ -34,7 +34,7 @@ weight = 6
 | server-lists  | 属性   | 注册中心服务列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181 |
 | props (?)     | 属性   | 配置本实例需要的其他参数，例如 ZooKeeper 的连接参数等                               |
 
-<orchestration:config-center />
+<governance:config-center />
 
 | *名称*         | *类型* | *说明*                                                                         |
 | ------------- | ------ | ----------------------------------------------------------------------------- |
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/governance.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/governance.en.md
index c1b9df61c9..ca060f95bf 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/governance.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/governance.en.md
@@ -11,21 +11,21 @@ weight = 6
 <?xml version="1.0" encoding="UTF-8"?>
 <beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
-       xmlns:orchestration="http://shardingsphere.apache.org/schema/shardingsphere/orchestration"
+       xmlns:governance="http://shardingsphere.apache.org/schema/shardingsphere/governance"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/orchestration
-                           http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd
+                           http://shardingsphere.apache.org/schema/shardingsphere/governance
+                           http://shardingsphere.apache.org/schema/shardingsphere/governance/governance.xsd
 ">
-    <orchestration:reg-center id="regCenter" type="ZooKeeper" server-lists="localhost:2181" />
-    <orchestration:config-center id="configCenter" type="ZooKeeper" server-lists="localhost:2182" />
-    <orchestration:data-source id="shardingDatabasesTablesDataSource" data-source-ref="realShardingDatabasesTablesDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
+    <governance:reg-center id="regCenter" type="ZooKeeper" server-lists="localhost:2181" />
+    <governance:config-center id="configCenter" type="ZooKeeper" server-lists="localhost:2182" />
+    <governance:data-source id="shardingDatabasesTablesDataSource" data-source-ref="realShardingDatabasesTablesDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
 </beans>
 ```
 
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration-5.0.0.xsd)
+Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/governance/governance-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/governance/governance-5.0.0.xsd)
 
-<orchestration:reg-center />
+<governance:reg-center />
 
 | *Name*        | *Type*     | *Description*                                                                                             |
 | ------------- | ---------- | --------------------------------------------------------------------------------------------------------- |
@@ -34,7 +34,7 @@ Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/orchestration
 | server-lists  | Attribute  | The list of servers that connect to registry center, including IP and port number; use commas to separate |
 | props (?)     | Attribute  | Properties for center instance config, such as options of zookeeper                                       |
 
-<orchestration:config-center />
+<governance:config-center />
 
 | *Name*        | *Type*     | *Description*                                                                                           |
 | ------------- | ---------- | ------------------------------------------------------------------------------------------------------- |
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.cn.md
index 19614ac292..9ce389ceb3 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.cn.md
@@ -24,13 +24,13 @@ DataSource dataSource = YamlShardingSphereDataSourceFactory.createDataSource(yam
 
 ### 创建携带治理功能的数据源
 
-通过 YamlOrchestrationShardingSphereDataSourceFactory 工厂创建的 OrchestrationShardingSphereDataSource 实现自 JDBC 的标准接口 DataSource。
+通过 YamlGovernanceShardingSphereDataSourceFactory 工厂创建的 GovernanceShardingSphereDataSource 实现自 JDBC 的标准接口 DataSource。
 
 ```java
 // 指定 YAML 文件路径
 File yamlFile = // ...
 
-DataSource dataSource = YamlOrchestrationShardingSphereDataSourceFactory.createDataSource(yamlFile);
+DataSource dataSource = YamlGovernanceShardingSphereDataSourceFactory.createDataSource(yamlFile);
 ```
 
 ### 使用数据源
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.en.md
index 0b4b5bf30e..b3aa020e74 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.en.md
@@ -14,7 +14,7 @@ YAML configuration is the most common configuration mode, which can omit the com
 
 ### Create Simple DataSource
 
-The ShardingSphereDataSource created by YamlOrchestrationShardingSphereDataSourceFactory implements the standard JDBC DataSource interface.
+The ShardingSphereDataSource created by YamlGovernanceShardingSphereDataSourceFactory implements the standard JDBC DataSource interface.
 
 ```java
 // Indicate YAML file path
@@ -23,16 +23,16 @@ File yamlFile = // ...
 DataSource dataSource = YamlShardingSphereDataSourceFactory.createDataSource(yamlFile);
 ```
 
-### Create Orchestration DataSource
+### Create Governance DataSource
 
-The OrchestrationShardingSphereDataSource created by YamlOrchestrationShardingSphereDataSourceFactory implements the standard JDBC DataSource interface.
+The GovernanceShardingSphereDataSource created by YamlGovernanceShardingSphereDataSourceFactory implements the standard JDBC DataSource interface.
 
 
 ```java
 // Indicate YAML file path
 File yamlFile = // ...
 
-DataSource dataSource = YamlOrchestrationShardingSphereDataSourceFactory.createDataSource(yamlFile);
+DataSource dataSource = YamlGovernanceShardingSphereDataSourceFactory.createDataSource(yamlFile);
 ```
 
 ### Use DataSource
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/governance.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/governance.cn.md
index 87d15d6829..aa9a19b956 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/governance.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/governance.cn.md
@@ -8,7 +8,7 @@ weight = 6
 ### 治理
 
 ```yaml
-orchestration:  
+governance:  
   name: # 治理名称
   registryCenter: # 配置中心
     type: # 治理持久化类型。如：Zookeeper, etcd
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/governance.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/governance.en.md
index 03ef014ba7..121462a923 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/governance.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/governance.en.md
@@ -8,13 +8,13 @@ weight = 6
 ### Management
 
 ```yaml
-orchestration:
-  name: #Orchestration name
+governance:
+  name: #Governance name
   registryCenter: # Registry Center
-    type: #Orchestration instance type. Example:Zookeeper, etcd
-    serverLists: #The list of servers that connect to orchestration instance, including IP and port number; use commas to separate
+    type: #Governance instance type. Example:Zookeeper, etcd
+    serverLists: #The list of servers that connect to governance instance, including IP and port number; use commas to separate
   additionalConfigCenter:
-    type: #Orchestration instance type. Example:Zookeeper, etcd, Apollo, Nacos
-    serverLists: #The list of servers that connect to orchestration instance, including IP and port number; use commas to separate
+    type: #Governance instance type. Example:Zookeeper, etcd, Apollo, Nacos
+    serverLists: #The list of servers that connect to governance instance, including IP and port number; use commas to separate
   overwrite: #Whether to overwrite local configurations with config center configurations; if it can, each initialization should refer to local configurations
 ```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.cn.md
index 49797cac16..f691055455 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.cn.md
@@ -8,21 +8,21 @@ weight = 1
 ```xml
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-orchestration</artifactId>
+    <artifactId>shardingsphere-jdbc-governance</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 
 <!-- 使用 ZooKeeper 时，需要引入此模块 -->
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-orchestration-repository-zookeeper-curator</artifactId>
+    <artifactId>shardingsphere-governance-repository-zookeeper-curator</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 
 <!-- 使用 Etcd 时，需要引入此模块 -->
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-orchestration-repository-etcd</artifactId>
+    <artifactId>shardingsphere-governance-repository-etcd</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 ```
@@ -36,29 +36,29 @@ weight = 1
 // ...
 
 // 配置配置/注册/元数据中心
-OrchestrationCenterConfiguration configuration = new OrchestrationCenterConfiguration("Zookeeper", "localhost:2181", new Properties());
+GovernanceCenterConfiguration configuration = new GovernanceCenterConfiguration("Zookeeper", "localhost:2181", new Properties());
 
 // 配置治理
 Map<String, CenterConfiguration> configurationMap = new HashMap<String, CenterConfiguration>();
-configurationMap.put("orchestration-shardingsphere-data-source", configuration);
+configurationMap.put("governance-shardingsphere-data-source", configuration);
 
-// 创建 OrchestrationShardingSphereDataSource
-DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(
+// 创建 GovernanceShardingSphereDataSource
+DataSource dataSource = GovernanceShardingSphereDataSourceFactory.createDataSource(
         createDataSourceMap(), createShardingRuleConfig(), new HashMap<String, Object>(), new Properties(),
-        new OrchestrationConfiguration("shardingsphere-orchestration", configurationMap, true));
+        new GovernanceConfiguration("shardingsphere-governance", configurationMap, true));
 ```
 
-## 使用 OrchestrationShardingSphereDataSource
+## 使用 GovernanceShardingSphereDataSource
 
-通过 OrchestrationShardingSphereDataSourceFactory 工厂创建的 OrchestrationShardingSphereDataSource 实现自 JDBC 的标准接口 DataSource。
+通过 GovernanceShardingSphereDataSourceFactory 工厂创建的 GovernanceShardingSphereDataSource 实现自 JDBC 的标准接口 DataSource。
 可通过 DataSource 选择使用原生 JDBC，或JPA， MyBatis 等 ORM 框架。
 
 以原生 JDBC 使用方式为例：
 
 ```java
-DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(
+DataSource dataSource = GovernanceShardingSphereDataSourceFactory.createDataSource(
         createDataSourceMap(), createShardingRuleConfig(), new HashMap<String, Object>(), new Properties(), 
-        new OrchestrationConfiguration("shardingsphere-orchestration", configurationMap, true));
+        new GovernanceConfiguration("shardingsphere-governance", configurationMap, true));
 String sql = "SELECT i.* FROM t_order o JOIN t_order_item i ON o.order_id=i.order_id WHERE o.user_id=? AND o.order_id=?";
 try (
         Connection conn = dataSource.getConnection();
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.en.md
index 67fb9754c1..28aef670d0 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.en.md
@@ -8,21 +8,21 @@ weight = 1
 ```xml
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-orchestration</artifactId>
+    <artifactId>shardingsphere-jdbc-governance</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 
 <!-- import if using ZooKeeper -->
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-orchestration-repository-zookeeper-curator</artifactId>
+    <artifactId>shardingsphere-governance-repository-zookeeper-curator</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 
 <!-- import if using Etcd -->
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-orchestration-repository-etcd</artifactId>
+    <artifactId>shardingsphere-governance-repository-etcd</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 ```
@@ -36,29 +36,29 @@ Using ZooKeeper as config center and registry center for example.
 // ...
 
 // Configure config/registry/metadata center
-OrchestrationCenterConfiguration configuration = new OrchestrationCenterConfiguration("Zookeeper", "localhost:2181", new Properties());
+GovernanceCenterConfiguration configuration = new GovernanceCenterConfiguration("Zookeeper", "localhost:2181", new Properties());
 
-// Configure orchestration
+// Configure governance
 Map<String, CenterConfiguration> configurationMap = new HashMap<String, CenterConfiguration>();
-configurationMap.put("orchestration-shardingsphere-data-source", configuration);
+configurationMap.put("governance-shardingsphere-data-source", configuration);
 
-// Create OrchestrationShardingSphereDataSource
-DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(
+// Create GovernanceShardingSphereDataSource
+DataSource dataSource = GovernanceShardingSphereDataSourceFactory.createDataSource(
         createDataSourceMap(), createShardingRuleConfig(), new HashMap<String, Object>(), new Properties(),
-        new OrchestrationConfiguration("shardingsphere-orchestration", configurationMap, true));
+        new GovernanceConfiguration("shardingsphere-governance", configurationMap, true));
 ```
 
-## Use OrchestrationShardingSphereDataSource
+## Use GovernanceShardingSphereDataSource
 
-The OrchestrationShardingSphereDataSource created by OrchestrationShardingSphereDataSourceFactory implements the standard JDBC DataSource interface.
+The GovernanceShardingSphereDataSource created by GovernanceShardingSphereDataSourceFactory implements the standard JDBC DataSource interface.
 Developer can choose to use native JDBC or ORM frameworks such as JPA or MyBatis through the DataSource.
 
 Take native JDBC usage as an example:
 
 ```java
-DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(
+DataSource dataSource = GovernanceShardingSphereDataSourceFactory.createDataSource(
         createDataSourceMap(), createShardingRuleConfig(), new HashMap<String, Object>(), new Properties(), 
-        new OrchestrationConfiguration("shardingsphere-orchestration", configurationMap, true));
+        new GovernanceConfiguration("shardingsphere-governance", configurationMap, true));
 String sql = "SELECT i.* FROM t_order o JOIN t_order_item i ON o.order_id=i.order_id WHERE o.user_id=? AND o.order_id=?";
 try (
         Connection conn = dataSource.getConnection();
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-boot-starter.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-boot-starter.cn.md
index b098cec64c..69421c2eaa 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-boot-starter.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-boot-starter.cn.md
@@ -8,21 +8,21 @@ weight = 3
 ```xml
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-orchestration-spring-boot-starter</artifactId>
+    <artifactId>shardingsphere-jdbc-governance-spring-boot-starter</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 
 <!-- 使用 ZooKeeper 时，需要引入此模块 -->
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-orchestration-repository-zookeeper-curator</artifactId>
+    <artifactId>shardingsphere-governance-repository-zookeeper-curator</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 
 <!-- 使用 Etcd 时，需要引入此模块 -->
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-orchestration-repository-etcd</artifactId>
+    <artifactId>shardingsphere-governance-repository-etcd</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 ```
@@ -30,17 +30,17 @@ weight = 3
 ## 规则配置
 
 ```properties
-spring.shardingsphere.orchestration.name=orchestration-spring-boot-shardingsphere-test
-spring.shardingsphere.orchestration.registry-center.type=Zookeeper
-spring.shardingsphere.orchestration.registry-center.server-lists=localhost:2181
-spring.shardingsphere.orchestration.additional-config-center.type=Zookeeper
-spring.shardingsphere.orchestration.additional-config-center.server-lists=localhost:2182
-spring.shardingsphere.orchestration.overwrite=true
+spring.shardingsphere.governance.name=governance-spring-boot-shardingsphere-test
+spring.shardingsphere.governance.registry-center.type=Zookeeper
+spring.shardingsphere.governance.registry-center.server-lists=localhost:2181
+spring.shardingsphere.governance.additional-config-center.type=Zookeeper
+spring.shardingsphere.governance.additional-config-center.server-lists=localhost:2182
+spring.shardingsphere.governance.overwrite=true
 ```
 
-## 在 Spring 中使用 OrchestrationShardingSphereDataSource
+## 在 Spring 中使用 GovernanceShardingSphereDataSource
 
-直接通过注入的方式即可使用 OrchestrationShardingSphereDataSource；或者将 OrchestrationShardingSphereDataSource 配置在JPA， MyBatis 等 ORM 框架中配合使用。
+直接通过注入的方式即可使用 GovernanceShardingSphereDataSource；或者将 GovernanceShardingSphereDataSource 配置在JPA， MyBatis 等 ORM 框架中配合使用。
 
 ```java
 @Resource
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-boot-starter.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-boot-starter.en.md
index 57416e4068..22a976b52f 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-boot-starter.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-boot-starter.en.md
@@ -8,21 +8,21 @@ weight = 3
 ```xml
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-orchestration-spring-boot-starter</artifactId>
+    <artifactId>shardingsphere-jdbc-governance-spring-boot-starter</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 
 <!-- import if using ZooKeeper -->
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-orchestration-repository-zookeeper-curator</artifactId>
+    <artifactId>shardingsphere-governance-repository-zookeeper-curator</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 
 <!-- import if using Etcd -->
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-orchestration-repository-etcd</artifactId>
+    <artifactId>shardingsphere-governance-repository-etcd</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 ```
@@ -30,18 +30,18 @@ weight = 3
 ## Configure Rule
 
 ```properties
-spring.shardingsphere.orchestration.name=orchestration-spring-boot-shardingsphere-test
-spring.shardingsphere.orchestration.registry-center.type=Zookeeper
-spring.shardingsphere.orchestration.registry-center.server-lists=localhost:2181
-spring.shardingsphere.orchestration.additional-config-center.type=Zookeeper
-spring.shardingsphere.orchestration.additional-config-center.server-lists=localhost:2182
-spring.shardingsphere.orchestration.overwrite=true
+spring.shardingsphere.governance.name=governance-spring-boot-shardingsphere-test
+spring.shardingsphere.governance.registry-center.type=Zookeeper
+spring.shardingsphere.governance.registry-center.server-lists=localhost:2181
+spring.shardingsphere.governance.additional-config-center.type=Zookeeper
+spring.shardingsphere.governance.additional-config-center.server-lists=localhost:2182
+spring.shardingsphere.governance.overwrite=true
 ```
 
-## Use OrchestrationShardingSphereDataSource in Spring
+## Use GovernanceShardingSphereDataSource in Spring
 
-OrchestrationShardingSphereDataSource can be used directly by injection; 
-or configure OrchestrationShardingSphereDataSource in ORM frameworks such as JPA or MyBatis.
+GovernanceShardingSphereDataSource can be used directly by injection; 
+or configure GovernanceShardingSphereDataSource in ORM frameworks such as JPA or MyBatis.
 
 ```java
 @Resource
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace.cn.md
index 52b59e781a..2154288372 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace.cn.md
@@ -8,21 +8,21 @@ weight = 4
 ```xml
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-orchestration-spring-namespace</artifactId>
+    <artifactId>shardingsphere-jdbc-governance-spring-namespace</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 
 <!-- 使用 ZooKeeper 时，需要引入此模块 -->
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-orchestration-repository-zookeeper-curator</artifactId>
+    <artifactId>shardingsphere-governance-repository-zookeeper-curator</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 
 <!-- 使用 Etcd 时，需要引入此模块 -->
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-orchestration-repository-etcd</artifactId>
+    <artifactId>shardingsphere-governance-repository-etcd</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 ```
@@ -32,27 +32,27 @@ weight = 4
 ```xml
 <?xml version="1.0" encoding="UTF-8"?>
 <beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:orchestration="http://shardingsphere.apache.org/schema/shardingsphere/orchestration"
+       xmlns:governance="http://shardingsphere.apache.org/schema/shardingsphere/governance"
        xmlns="http://www.springframework.org/schema/beans"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/orchestration
-                           http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd">
+                           http://shardingsphere.apache.org/schema/shardingsphere/governance
+                           http://shardingsphere.apache.org/schema/shardingsphere/governance/governance.xsd">
      <util:properties id="instance-properties">
          <prop key="max-retries">3</prop>
          <prop key="operation-timeout-milliseconds">3000</prop>
      </util:properties>
-     <orchestration:reg-center id="regCenter" type="Zookeeper" server-lists="localhost:2181" />
-     <orchestration:config-center id="configCenter" type="ZooKeeper" server-lists="localhost:2182" />
-     <orchestration:data-source id="shardingDatabasesTablesDataSource" data-source-ref="realShardingDatabasesTablesDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
-     <orchestration:slave-data-source id="masterSlaveDataSource" data-source-ref="realMasterSlaveDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
-     <orchestration:data-source id="encryptDataSource" data-source-ref="realEncryptDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
+     <governance:reg-center id="regCenter" type="Zookeeper" server-lists="localhost:2181" />
+     <governance:config-center id="configCenter" type="ZooKeeper" server-lists="localhost:2182" />
+     <governance:data-source id="shardingDatabasesTablesDataSource" data-source-ref="realShardingDatabasesTablesDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
+     <governance:slave-data-source id="masterSlaveDataSource" data-source-ref="realMasterSlaveDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
+     <governance:data-source id="encryptDataSource" data-source-ref="realEncryptDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
 </beans>
 ```
 
-## 在 Spring 中使用 OrchestrationShardingSphereDataSource
+## 在 Spring 中使用 GovernanceShardingSphereDataSource
 
-直接通过注入的方式即可使用 OrchestrationShardingSphereDataSource；或者将 OrchestrationShardingSphereDataSource 配置在JPA， MyBatis 等 ORM 框架中配合使用。
+直接通过注入的方式即可使用 GovernanceShardingSphereDataSource；或者将 GovernanceShardingSphereDataSource 配置在JPA， MyBatis 等 ORM 框架中配合使用。
 
 ```java
 @Resource
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace.en.md
index a4f16e3bd2..ac7e10e1aa 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace.en.md
@@ -8,21 +8,21 @@ weight = 4
 ```xml
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-orchestration-spring-namespace</artifactId>
+    <artifactId>shardingsphere-jdbc-governance-spring-namespace</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 
 <!-- import if using ZooKeeper -->
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-orchestration-repository-zookeeper-curator</artifactId>
+    <artifactId>shardingsphere-governance-repository-zookeeper-curator</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 
 <!-- import if using Etcd -->
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-orchestration-repository-etcd</artifactId>
+    <artifactId>shardingsphere-governance-repository-etcd</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 ```
@@ -32,28 +32,28 @@ weight = 4
 ```xml
 <?xml version="1.0" encoding="UTF-8"?>
 <beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:orchestration="http://shardingsphere.apache.org/schema/shardingsphere/orchestration"
+       xmlns:governance="http://shardingsphere.apache.org/schema/shardingsphere/governance"
        xmlns="http://www.springframework.org/schema/beans"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/orchestration
-                           http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd">
+                           http://shardingsphere.apache.org/schema/shardingsphere/governance
+                           http://shardingsphere.apache.org/schema/shardingsphere/governance/governance.xsd">
      <util:properties id="instance-properties">
          <prop key="max-retries">3</prop>
          <prop key="operation-timeout-milliseconds">3000</prop>
      </util:properties>
-     <orchestration:reg-center id="regCenter" type="Zookeeper" server-lists="localhost:2181" />
-     <orchestration:config-center id="configCenter" type="ZooKeeper" server-lists="localhost:2182" />
-     <orchestration:data-source id="shardingDatabasesTablesDataSource" data-source-ref="realShardingDatabasesTablesDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
-     <orchestration:slave-data-source id="masterSlaveDataSource" data-source-ref="realMasterSlaveDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
-     <orchestration:data-source id="encryptDataSource" data-source-ref="realEncryptDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
+     <governance:reg-center id="regCenter" type="Zookeeper" server-lists="localhost:2181" />
+     <governance:config-center id="configCenter" type="ZooKeeper" server-lists="localhost:2182" />
+     <governance:data-source id="shardingDatabasesTablesDataSource" data-source-ref="realShardingDatabasesTablesDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
+     <governance:slave-data-source id="masterSlaveDataSource" data-source-ref="realMasterSlaveDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
+     <governance:data-source id="encryptDataSource" data-source-ref="realEncryptDataSource" reg-center-ref="regCenter" config-center-ref="configCenter" overwrite="true" />
 </beans>
 ```
 
-## Use OrchestrationShardingSphereDataSource in Spring
+## Use GovernanceShardingSphereDataSource in Spring
 
-OrchestrationShardingSphereDataSource can be used directly by injection; 
-or configure OrchestrationShardingSphereDataSource in ORM frameworks such as JPA or MyBatis.
+GovernanceShardingSphereDataSource can be used directly by injection; 
+or configure GovernanceShardingSphereDataSource in ORM frameworks such as JPA or MyBatis.
 
 ```java
 @Resource
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/yaml.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/yaml.cn.md
index d0bff27163..b2d0c04b88 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/yaml.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/yaml.cn.md
@@ -8,21 +8,21 @@ weight = 2
 ```xml
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-orchestration</artifactId>
+    <artifactId>shardingsphere-jdbc-governance</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 
 <!-- 使用 ZooKeeper 时，需要引入此模块 -->
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-orchestration-repository-zookeeper-curator</artifactId>
+    <artifactId>shardingsphere-governance-repository-zookeeper-curator</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 
 <!-- 使用 Etcd 时，需要引入此模块 -->
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-orchestration-repository-etcd</artifactId>
+    <artifactId>shardingsphere-governance-repository-etcd</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 ```
@@ -32,8 +32,8 @@ weight = 2
 以下示例将 ZooKeeper 作为配置中心和注册中心。
 
 ```yaml
-orchestration:
-  name: orchestration_ds
+governance:
+  name: governance_ds
   registryCenter:
       type: Zookeeper
       serverLists: localhost:2181
@@ -41,19 +41,19 @@ orchestration:
 ```
 
 ```java
-// 创建 OrchestrationShardingSphereDataSource
-DataSource dataSource = YamlOrchestrationShardingSphereDataSourceFactory.createDataSource(yamlFile);
+// 创建 GovernanceShardingSphereDataSource
+DataSource dataSource = YamlGovernanceShardingSphereDataSourceFactory.createDataSource(yamlFile);
 ```
 
-## 使用 OrchestrationShardingSphereDataSource
+## 使用 GovernanceShardingSphereDataSource
 
-通过 YamlOrchestrationShardingSphereDataSourceFactory 工厂创建的 OrchestrationShardingSphereDataSource 实现自 JDBC 的标准接口 DataSource。
+通过 YamlGovernanceShardingSphereDataSourceFactory 工厂创建的 GovernanceShardingSphereDataSource 实现自 JDBC 的标准接口 DataSource。
 可通过 DataSource 选择使用原生 JDBC，或JPA， MyBatis 等 ORM 框架。
 
 以原生 JDBC 使用方式为例：
 
 ```java
-DataSource dataSource = YamlOrchestrationShardingSphereDataSourceFactory.createDataSource(yamlFile);
+DataSource dataSource = YamlGovernanceShardingSphereDataSourceFactory.createDataSource(yamlFile);
 String sql = "SELECT i.* FROM t_order o JOIN t_order_item i ON o.order_id=i.order_id WHERE o.user_id=? AND o.order_id=?";
 try (
         Connection conn = dataSource.getConnection();
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/yaml.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/yaml.en.md
index 4563fd13eb..6765a8edb9 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/yaml.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/yaml.en.md
@@ -8,21 +8,21 @@ weight = 2
 ```xml
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-orchestration</artifactId>
+    <artifactId>shardingsphere-jdbc-governance</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 
 <!-- import if using ZooKeeper -->
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-orchestration-repository-zookeeper-curator</artifactId>
+    <artifactId>shardingsphere-governance-repository-zookeeper-curator</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 
 <!-- import if using Etcd -->
 <dependency>
     <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-orchestration-repository-etcd</artifactId>
+    <artifactId>shardingsphere-governance-repository-etcd</artifactId>
     <version>${shardingsphere.version}</version>
 </dependency>
 ```
@@ -32,8 +32,8 @@ weight = 2
 Using ZooKeeper as config center and registry center for example.
 
 ```yaml
-orchestration:
-  name: orchestration_ds
+governance:
+  name: governance_ds
   registryCenter:
       type: Zookeeper
       serverLists: localhost:2181
@@ -41,19 +41,19 @@ orchestration:
 ```
 
 ```java
-// Create OrchestrationShardingSphereDataSource
-DataSource dataSource = YamlOrchestrationShardingSphereDataSourceFactory.createDataSource(yamlFile);
+// Create GovernanceShardingSphereDataSource
+DataSource dataSource = YamlGovernanceShardingSphereDataSourceFactory.createDataSource(yamlFile);
 ```
 
-## Use OrchestrationShardingSphereDataSource
+## Use GovernanceShardingSphereDataSource
 
-The OrchestrationShardingSphereDataSource created by YamlOrchestrationShardingSphereDataSourceFactory implements the standard JDBC DataSource interface.
+The GovernanceShardingSphereDataSource created by YamlGovernanceShardingSphereDataSourceFactory implements the standard JDBC DataSource interface.
 Developer can choose to use native JDBC or ORM frameworks such as JPA or MyBatis through the DataSource.
 
 Take native JDBC usage as an example:
 
 ```java
-DataSource dataSource = YamlOrchestrationShardingSphereDataSourceFactory.createDataSource(yamlFile);
+DataSource dataSource = YamlGovernanceShardingSphereDataSourceFactory.createDataSource(yamlFile);
 String sql = "SELECT i.* FROM t_order o JOIN t_order_item i ON o.order_id=i.order_id WHERE o.user_id=? AND o.order_id=?";
 try (
         Connection conn = dataSource.getConnection();
diff --git a/docs/document/content/user-manual/shardingsphere-scaling/usage.cn.md b/docs/document/content/user-manual/shardingsphere-scaling/usage.cn.md
index 717cdde55e..4603acb91b 100644
--- a/docs/document/content/user-manual/shardingsphere-scaling/usage.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-scaling/usage.cn.md
@@ -72,7 +72,7 @@ curl -X POST \
   -H 'content-type: application/json' \
   -d '{
    "ruleConfiguration": {
-      "sourceDatasource": "ds_0: !!org.apache.shardingsphere.orchestration.core.common.yaml.config.YamlDataSourceConfiguration\n  dataSourceClassName: com.zaxxer.hikari.HikariDataSource\n  props:\n    jdbcUrl: jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC&useSSL=false\n    username: root\n    password: '\''123456'\''\n    connectionTimeout: 30000\n    idleTimeout: 60000\n    maxLifetime: 1800000\n    maxPoolSize: 50\n    minPoolSize: 1\n    maintenanceIntervalMilliseconds: 30000\n    readOnly: false\n",
+      "sourceDatasource": "ds_0: !!org.apache.shardingsphere.governance.core.common.yaml.config.YamlDataSourceConfiguration\n  dataSourceClassName: com.zaxxer.hikari.HikariDataSource\n  props:\n    jdbcUrl: jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC&useSSL=false\n    username: root\n    password: '\''123456'\''\n    connectionTimeout: 30000\n    idleTimeout: 60000\n    maxLifetime: 1800000\n    maxPoolSize: 50\n    minPoolSize: 1\n    maintenanceIntervalMilliseconds: 30000\n    readOnly: false\n",
       "sourceRule": "defaultDatabaseStrategy:\n  inline:\n    algorithmExpression: ds_${user_id % 2}\n    shardingColumn: user_id\ntables:\n  t1:\n    actualDataNodes: ds_0.t1\n    keyGenerateStrategy:\n      column: order_id\n      type: SNOWFLAKE\n    logicTable: t1\n    tableStrategy:\n      inline:\n        algorithmExpression: t1\n        shardingColumn: order_id\n  t2:\n    actualDataNodes: ds_0.t2\n    keyGenerateStrategy:\n      column: order_item_id\n      type: SNOWFLAKE\n    logicTable: t2\n    tableStrategy:\n      inline:\n        algorithmExpression: t2\n        shardingColumn: order_id\n",
       "destinationDataSources": {
          "name": "dt_0",
diff --git a/docs/document/content/user-manual/shardingsphere-scaling/usage.en.md b/docs/document/content/user-manual/shardingsphere-scaling/usage.en.md
index 246a28388f..8d26de9267 100644
--- a/docs/document/content/user-manual/shardingsphere-scaling/usage.en.md
+++ b/docs/document/content/user-manual/shardingsphere-scaling/usage.en.md
@@ -72,7 +72,7 @@ curl -X POST \
   -H 'content-type: application/json' \
   -d '{
    "ruleConfiguration": {
-      "sourceDatasource": "ds_0: !!org.apache.shardingsphere.orchestration.core.common.yaml.config.YamlDataSourceConfiguration\n  dataSourceClassName: com.zaxxer.hikari.HikariDataSource\n  props:\n    jdbcUrl: jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC&useSSL=false\n    username: root\n    password: '\''123456'\''\n    connectionTimeout: 30000\n    idleTimeout: 60000\n    maxLifetime: 1800000\n    maxPoolSize: 50\n    minPoolSize: 1\n    maintenanceIntervalMilliseconds: 30000\n    readOnly: false\n",
+      "sourceDatasource": "ds_0: !!org.apache.shardingsphere.governance.core.common.yaml.config.YamlDataSourceConfiguration\n  dataSourceClassName: com.zaxxer.hikari.HikariDataSource\n  props:\n    jdbcUrl: jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC&useSSL=false\n    username: root\n    password: '\''123456'\''\n    connectionTimeout: 30000\n    idleTimeout: 60000\n    maxLifetime: 1800000\n    maxPoolSize: 50\n    minPoolSize: 1\n    maintenanceIntervalMilliseconds: 30000\n    readOnly: false\n",
       "sourceRule": "defaultDatabaseStrategy:\n  inline:\n    algorithmExpression: ds_${user_id % 2}\n    shardingColumn: user_id\ntables:\n  t1:\n    actualDataNodes: ds_0.t1\n    keyGenerateStrategy:\n      column: order_id\n      type: SNOWFLAKE\n    logicTable: t1\n    tableStrategy:\n      inline:\n        algorithmExpression: t1\n        shardingColumn: order_id\n  t2:\n    actualDataNodes: ds_0.t2\n    keyGenerateStrategy:\n      column: order_item_id\n      type: SNOWFLAKE\n    logicTable: t2\n    tableStrategy:\n      inline:\n        algorithmExpression: t2\n        shardingColumn: order_id\n",
       "destinationDataSources": {
          "name": "dt_0",
diff --git a/docs/document/content/user-manual/shardingsphere-ui/_index.en.md b/docs/document/content/user-manual/shardingsphere-ui/_index.en.md
index fa46472ade..da1d3d7680 100644
--- a/docs/document/content/user-manual/shardingsphere-ui/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-ui/_index.en.md
@@ -8,7 +8,7 @@ chapter = true
 ## Introduction
 
 ShardingSphere-UI is a simple and useful web administration console for ShardingSphere. 
-It is designed to help users more easily use ShardingSphere, and currently provides ability of registry center management, dynamic configuration management, database orchestration, etc.
+It is designed to help users more easily use ShardingSphere, and currently provides ability of registry center management, dynamic configuration management, database governance, etc.
 
 The frontend of project uses vue as javascript framework and the backend is a standard spring boot project. 
 You can deploy it with maven, and also run locally by separating the frontend and backend.
